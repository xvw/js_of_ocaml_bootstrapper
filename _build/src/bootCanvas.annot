"src/bootCanvas.ml" 22 565 569 "src/bootCanvas.ml" 22 565 574
type(
  int -> int -> float * float
)
ident(
  def point "src/bootCanvas.ml" 26 620 620 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 22 565 575 "src/bootCanvas.ml" 22 565 576
type(
  int
)
ident(
  def x "src/bootCanvas.ml" 22 565 577 "src/bootCanvas.ml" 25 618 619
)
"src/bootCanvas.ml" 22 565 577 "src/bootCanvas.ml" 22 565 578
type(
  int
)
ident(
  def y "src/bootCanvas.ml" 23 583 585 "src/bootCanvas.ml" 24 601 617
)
"src/bootCanvas.ml" 23 583 585 "src/bootCanvas.ml" 23 583 597
type(
  int -> float
)
ident(
  ext_ref Pervasives.float_of_int
)
"src/bootCanvas.ml" 23 583 598 "src/bootCanvas.ml" 23 583 599
type(
  int
)
ident(
  int_ref x "src/bootCanvas.ml" 22 565 575 "src/bootCanvas.ml" 22 565 576
)
"src/bootCanvas.ml" 23 583 585 "src/bootCanvas.ml" 23 583 599
type(
  float
)
"src/bootCanvas.ml" 24 601 603 "src/bootCanvas.ml" 24 601 615
type(
  int -> float
)
ident(
  ext_ref Pervasives.float_of_int
)
"src/bootCanvas.ml" 24 601 616 "src/bootCanvas.ml" 24 601 617
type(
  int
)
ident(
  int_ref y "src/bootCanvas.ml" 22 565 577 "src/bootCanvas.ml" 22 565 578
)
"src/bootCanvas.ml" 24 601 603 "src/bootCanvas.ml" 24 601 617
type(
  float
)
"src/bootCanvas.ml" 23 583 585 "src/bootCanvas.ml" 24 601 617
type(
  float * float
)
"src/bootCanvas.ml" 22 565 577 "src/bootCanvas.ml" 25 618 619
type(
  int -> float * float
)
"src/bootCanvas.ml" 22 565 575 "src/bootCanvas.ml" 25 618 619
type(
  int -> int -> float * float
)
"src/bootCanvas.ml" 26 620 624 "src/bootCanvas.ml" 26 620 629
type(
  int -> int -> int -> int -> float * float * float * float
)
ident(
  def _rect "src/bootCanvas.ml" 33 716 716 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 26 620 630 "src/bootCanvas.ml" 26 620 631
type(
  int
)
ident(
  def x "src/bootCanvas.ml" 26 620 632 "src/bootCanvas.ml" 31 713 714
)
"src/bootCanvas.ml" 26 620 632 "src/bootCanvas.ml" 26 620 633
type(
  int
)
ident(
  def y "src/bootCanvas.ml" 26 620 634 "src/bootCanvas.ml" 31 713 714
)
"src/bootCanvas.ml" 26 620 634 "src/bootCanvas.ml" 26 620 635
type(
  int
)
ident(
  def w "src/bootCanvas.ml" 26 620 636 "src/bootCanvas.ml" 31 713 714
)
"src/bootCanvas.ml" 26 620 636 "src/bootCanvas.ml" 26 620 637
type(
  int
)
ident(
  def h "src/bootCanvas.ml" 27 642 644 "src/bootCanvas.ml" 30 696 712
)
"src/bootCanvas.ml" 27 642 644 "src/bootCanvas.ml" 27 642 656
type(
  int -> float
)
ident(
  ext_ref Pervasives.float_of_int
)
"src/bootCanvas.ml" 27 642 657 "src/bootCanvas.ml" 27 642 658
type(
  int
)
ident(
  int_ref x "src/bootCanvas.ml" 26 620 630 "src/bootCanvas.ml" 26 620 631
)
"src/bootCanvas.ml" 27 642 644 "src/bootCanvas.ml" 27 642 658
type(
  float
)
"src/bootCanvas.ml" 28 660 662 "src/bootCanvas.ml" 28 660 674
type(
  int -> float
)
ident(
  ext_ref Pervasives.float_of_int
)
"src/bootCanvas.ml" 28 660 675 "src/bootCanvas.ml" 28 660 676
type(
  int
)
ident(
  int_ref y "src/bootCanvas.ml" 26 620 632 "src/bootCanvas.ml" 26 620 633
)
"src/bootCanvas.ml" 28 660 662 "src/bootCanvas.ml" 28 660 676
type(
  float
)
"src/bootCanvas.ml" 29 678 680 "src/bootCanvas.ml" 29 678 692
type(
  int -> float
)
ident(
  ext_ref Pervasives.float_of_int
)
"src/bootCanvas.ml" 29 678 693 "src/bootCanvas.ml" 29 678 694
type(
  int
)
ident(
  int_ref w "src/bootCanvas.ml" 26 620 634 "src/bootCanvas.ml" 26 620 635
)
"src/bootCanvas.ml" 29 678 680 "src/bootCanvas.ml" 29 678 694
type(
  float
)
"src/bootCanvas.ml" 30 696 698 "src/bootCanvas.ml" 30 696 710
type(
  int -> float
)
ident(
  ext_ref Pervasives.float_of_int
)
"src/bootCanvas.ml" 30 696 711 "src/bootCanvas.ml" 30 696 712
type(
  int
)
ident(
  int_ref h "src/bootCanvas.ml" 26 620 636 "src/bootCanvas.ml" 26 620 637
)
"src/bootCanvas.ml" 30 696 698 "src/bootCanvas.ml" 30 696 712
type(
  float
)
"src/bootCanvas.ml" 27 642 644 "src/bootCanvas.ml" 30 696 712
type(
  float * float * float * float
)
"src/bootCanvas.ml" 26 620 636 "src/bootCanvas.ml" 31 713 714
type(
  int -> float * float * float * float
)
"src/bootCanvas.ml" 26 620 634 "src/bootCanvas.ml" 31 713 714
type(
  int -> int -> float * float * float * float
)
"src/bootCanvas.ml" 26 620 632 "src/bootCanvas.ml" 31 713 714
type(
  int -> int -> int -> float * float * float * float
)
"src/bootCanvas.ml" 26 620 630 "src/bootCanvas.ml" 31 713 714
type(
  int -> int -> int -> int -> float * float * float * float
)
"src/bootCanvas.ml" 33 716 720 "src/bootCanvas.ml" 33 716 730
type(
  'a -> 'b -> 'c -> 'd -> 'a * 'b * 'c * 'd
)
ident(
  def alpha_rect "src/bootCanvas.ml" 36 778 778 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 33 716 731 "src/bootCanvas.ml" 33 716 732
type(
  'a
)
ident(
  def x "src/bootCanvas.ml" 33 716 733 "src/bootCanvas.ml" 33 716 753
)
"src/bootCanvas.ml" 33 716 733 "src/bootCanvas.ml" 33 716 734
type(
  'b
)
ident(
  def y "src/bootCanvas.ml" 33 716 735 "src/bootCanvas.ml" 33 716 753
)
"src/bootCanvas.ml" 33 716 735 "src/bootCanvas.ml" 33 716 736
type(
  'c
)
ident(
  def w "src/bootCanvas.ml" 33 716 737 "src/bootCanvas.ml" 33 716 753
)
"src/bootCanvas.ml" 33 716 737 "src/bootCanvas.ml" 33 716 738
type(
  'd
)
ident(
  def h "src/bootCanvas.ml" 33 716 742 "src/bootCanvas.ml" 33 716 752
)
"src/bootCanvas.ml" 33 716 742 "src/bootCanvas.ml" 33 716 743
type(
  'a
)
ident(
  int_ref x "src/bootCanvas.ml" 33 716 731 "src/bootCanvas.ml" 33 716 732
)
"src/bootCanvas.ml" 33 716 745 "src/bootCanvas.ml" 33 716 746
type(
  'b
)
ident(
  int_ref y "src/bootCanvas.ml" 33 716 733 "src/bootCanvas.ml" 33 716 734
)
"src/bootCanvas.ml" 33 716 748 "src/bootCanvas.ml" 33 716 749
type(
  'c
)
ident(
  int_ref w "src/bootCanvas.ml" 33 716 735 "src/bootCanvas.ml" 33 716 736
)
"src/bootCanvas.ml" 33 716 751 "src/bootCanvas.ml" 33 716 752
type(
  'd
)
ident(
  int_ref h "src/bootCanvas.ml" 33 716 737 "src/bootCanvas.ml" 33 716 738
)
"src/bootCanvas.ml" 33 716 742 "src/bootCanvas.ml" 33 716 752
type(
  'a * 'b * 'c * 'd
)
"src/bootCanvas.ml" 33 716 737 "src/bootCanvas.ml" 33 716 753
type(
  'd -> 'a * 'b * 'c * 'd
)
"src/bootCanvas.ml" 33 716 735 "src/bootCanvas.ml" 33 716 753
type(
  'c -> 'd -> 'a * 'b * 'c * 'd
)
"src/bootCanvas.ml" 33 716 733 "src/bootCanvas.ml" 33 716 753
type(
  'b -> 'c -> 'd -> 'a * 'b * 'c * 'd
)
"src/bootCanvas.ml" 33 716 731 "src/bootCanvas.ml" 33 716 753
type(
  'a -> 'b -> 'c -> 'd -> 'a * 'b * 'c * 'd
)
"src/bootCanvas.ml" 36 778 782 "src/bootCanvas.ml" 36 778 785
type(
  Dom_html.canvasElement Js.t option ref
)
ident(
  def get "src/bootCanvas.ml" 39 820 820 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 36 778 788 "src/bootCanvas.ml" 36 778 791
type(
  Dom_html.canvasElement Js.t option ->
  Dom_html.canvasElement Js.t option ref
)
ident(
  ext_ref Pervasives.ref
)
"src/bootCanvas.ml" 36 778 792 "src/bootCanvas.ml" 36 778 796
type(
  Dom_html.canvasElement Js.t option
)
"src/bootCanvas.ml" 36 778 788 "src/bootCanvas.ml" 36 778 796
type(
  Dom_html.canvasElement Js.t option ref
)
"src/bootCanvas.ml" 39 820 824 "src/bootCanvas.ml" 39 820 830
type(
  int -> int -> unit
)
ident(
  def create "src/bootCanvas.ml" 49 1104 1104 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 39 820 831 "src/bootCanvas.ml" 39 820 836
type(
  int
)
ident(
  def width "src/bootCanvas.ml" 39 820 837 "src/bootCanvas.ml" 46 1045 1074
)
"src/bootCanvas.ml" 39 820 837 "src/bootCanvas.ml" 39 820 843
type(
  int
)
ident(
  def height "src/bootCanvas.ml" 40 846 848 "src/bootCanvas.ml" 46 1045 1074
)
"src/bootCanvas.ml" 40 846 855 "src/bootCanvas.ml" 40 846 858
type(
  Dom_html.canvasElement Js.t option ref
)
ident(
  int_ref get "src/bootCanvas.ml" 36 778 782 "src/bootCanvas.ml" 36 778 785
)
"src/bootCanvas.ml" 40 846 854 "src/bootCanvas.ml" 40 846 858
type(
  Dom_html.canvasElement Js.t option
)
type(
  Dom_html.canvasElement Js.t option ref ->
  Dom_html.canvasElement Js.t option
)
ident(
  ext_ref Pervasives.( ! )
)
"src/bootCanvas.ml" 41 864 873 "src/bootCanvas.ml" 41 864 874
type(
  Dom_html.canvasElement Js.t
)
"src/bootCanvas.ml" 41 864 868 "src/bootCanvas.ml" 41 864 874
type(
  Dom_html.canvasElement Js.t option
)
"src/bootCanvas.ml" 41 864 878 "src/bootCanvas.ml" 41 864 883
type(
  exn -> unit
)
ident(
  ext_ref Pervasives.raise
)
"src/bootCanvas.ml" 41 864 884 "src/bootCanvas.ml" 41 864 899
type(
  exn
)
"src/bootCanvas.ml" 41 864 878 "src/bootCanvas.ml" 41 864 899
type(
  unit
)
"src/bootCanvas.ml" 42 900 904 "src/bootCanvas.ml" 42 900 908
type(
  Dom_html.canvasElement Js.t option
)
"src/bootCanvas.ml" 43 912 920 "src/bootCanvas.ml" 43 912 926
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 44 965 969 "src/bootCanvas.ml" 46 1045 1074
)
"src/bootCanvas.ml" 43 912 939 "src/bootCanvas.ml" 43 912 951
type(
  Dom_html.document Js.t -> Dom_html.canvasElement Js.t
)
ident(
  ext_ref Dom_html.createCanvas
)
"src/bootCanvas.ml" 43 912 952 "src/bootCanvas.ml" 43 912 960
type(
  Dom_html.document Js.t
)
ident(
  ext_ref Dom_html.document
)
"src/bootCanvas.ml" 43 912 939 "src/bootCanvas.ml" 43 912 960
type(
  Dom_html.canvasElement Js.t
)
"src/bootCanvas.ml" 44 965 973 "src/bootCanvas.ml" 44 965 974
type(
  unit
)
"src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 984
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  int_ref x "src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 1002
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 1002
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref canvas "src/bootCanvas.ml" 43 912 920 "src/bootCanvas.ml" 43 912 926
)
"src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 993
type(
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  int Js.prop
)
"src/bootCanvas.ml" 44 965 997 "src/bootCanvas.ml" 44 965 1002
type(
  int
)
type(
  int
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 1002
)
type(
  int
)
ident(
  int_ref width "src/bootCanvas.ml" 39 820 831 "src/bootCanvas.ml" 39 820 836
)
"src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 1002
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  int
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 1002
)
type(
  string
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 1002
)
type(
  Dom_html.canvasElement Js.t -> string -> int -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  int
)
type(
  int
)
ident(
  int_ref M.res "src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 1002
)
type(
  int
)
type(
  int
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  def x "src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 993
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  int
)
ident(
  def res "src/bootCanvas.ml" 44 965 1002 "src/bootCanvas.ml" 44 965 1002
)
type(
  int
)
type(
  int
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 1002
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 44 965 978 "src/bootCanvas.ml" 44 965 1002
)
"src/bootCanvas.ml" 45 1004 1012 "src/bootCanvas.ml" 45 1004 1013
type(
  unit
)
"src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1023
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  int_ref x "src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1043
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1043
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref canvas "src/bootCanvas.ml" 43 912 920 "src/bootCanvas.ml" 43 912 926
)
"src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1033
type(
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  int Js.prop
)
"src/bootCanvas.ml" 45 1004 1037 "src/bootCanvas.ml" 45 1004 1043
type(
  int
)
type(
  int
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1043
)
type(
  int
)
ident(
  int_ref height "src/bootCanvas.ml" 39 820 837 "src/bootCanvas.ml" 39 820 843
)
"src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1043
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  int
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1043
)
type(
  string
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1043
)
type(
  Dom_html.canvasElement Js.t -> string -> int -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  int
)
type(
  int
)
ident(
  int_ref M.res "src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1043
)
type(
  int
)
type(
  int
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  def x "src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1033
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  int
)
ident(
  def res "src/bootCanvas.ml" 45 1004 1043 "src/bootCanvas.ml" 45 1004 1043
)
type(
  int
)
type(
  int
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1043
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 45 1004 1017 "src/bootCanvas.ml" 45 1004 1043
)
"src/bootCanvas.ml" 46 1045 1052 "src/bootCanvas.ml" 46 1045 1055
type(
  Dom_html.canvasElement Js.t option ref
)
ident(
  int_ref get "src/bootCanvas.ml" 36 778 782 "src/bootCanvas.ml" 36 778 785
)
"src/bootCanvas.ml" 46 1045 1066 "src/bootCanvas.ml" 46 1045 1072
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref canvas "src/bootCanvas.ml" 43 912 920 "src/bootCanvas.ml" 43 912 926
)
"src/bootCanvas.ml" 46 1045 1060 "src/bootCanvas.ml" 46 1045 1073
type(
  Dom_html.canvasElement Js.t option
)
"src/bootCanvas.ml" 46 1045 1052 "src/bootCanvas.ml" 46 1045 1074
type(
  unit
)
type(
  Dom_html.canvasElement Js.t option ref ->
  Dom_html.canvasElement Js.t option -> unit
)
ident(
  ext_ref Pervasives.( := )
)
"src/bootCanvas.ml" 44 965 969 "src/bootCanvas.ml" 46 1045 1074
type(
  unit
)
"src/bootCanvas.ml" 43 912 916 "src/bootCanvas.ml" 46 1045 1074
type(
  unit
)
"src/bootCanvas.ml" 40 846 848 "src/bootCanvas.ml" 46 1045 1074
type(
  unit
)
"src/bootCanvas.ml" 39 820 837 "src/bootCanvas.ml" 46 1045 1074
type(
  int -> unit
)
"src/bootCanvas.ml" 39 820 831 "src/bootCanvas.ml" 46 1045 1074
type(
  int -> int -> unit
)
"src/bootCanvas.ml" 49 1104 1108 "src/bootCanvas.ml" 49 1104 1112
type(
  (Dom_html.canvasElement Js.t -> 'a) -> 'a
)
ident(
  def wrap "src/bootCanvas.ml" 55 1220 1220 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 49 1104 1113 "src/bootCanvas.ml" 49 1104 1114
type(
  Dom_html.canvasElement Js.t -> 'a
)
ident(
  def f "src/bootCanvas.ml" 50 1117 1119 "src/bootCanvas.ml" 52 1165 1182
)
"src/bootCanvas.ml" 50 1117 1126 "src/bootCanvas.ml" 50 1117 1129
type(
  Dom_html.canvasElement Js.t option ref
)
ident(
  int_ref get "src/bootCanvas.ml" 36 778 782 "src/bootCanvas.ml" 36 778 785
)
"src/bootCanvas.ml" 50 1117 1125 "src/bootCanvas.ml" 50 1117 1129
type(
  Dom_html.canvasElement Js.t option
)
type(
  Dom_html.canvasElement Js.t option ref ->
  Dom_html.canvasElement Js.t option
)
ident(
  ext_ref Pervasives.( ! )
)
"src/bootCanvas.ml" 51 1135 1139 "src/bootCanvas.ml" 51 1135 1143
type(
  Dom_html.canvasElement Js.t option
)
"src/bootCanvas.ml" 51 1135 1147 "src/bootCanvas.ml" 51 1135 1152
type(
  exn -> 'a
)
ident(
  ext_ref Pervasives.raise
)
"src/bootCanvas.ml" 51 1135 1153 "src/bootCanvas.ml" 51 1135 1164
type(
  exn
)
"src/bootCanvas.ml" 51 1135 1147 "src/bootCanvas.ml" 51 1135 1164
type(
  'a
)
"src/bootCanvas.ml" 52 1165 1174 "src/bootCanvas.ml" 52 1165 1175
type(
  Dom_html.canvasElement Js.t
)
ident(
  def x "src/bootCanvas.ml" 52 1165 1179 "src/bootCanvas.ml" 52 1165 1182
)
"src/bootCanvas.ml" 52 1165 1169 "src/bootCanvas.ml" 52 1165 1175
type(
  Dom_html.canvasElement Js.t option
)
"src/bootCanvas.ml" 52 1165 1179 "src/bootCanvas.ml" 52 1165 1180
type(
  Dom_html.canvasElement Js.t -> 'a
)
ident(
  int_ref f "src/bootCanvas.ml" 49 1104 1113 "src/bootCanvas.ml" 49 1104 1114
)
"src/bootCanvas.ml" 52 1165 1181 "src/bootCanvas.ml" 52 1165 1182
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref x "src/bootCanvas.ml" 52 1165 1174 "src/bootCanvas.ml" 52 1165 1175
)
"src/bootCanvas.ml" 52 1165 1179 "src/bootCanvas.ml" 52 1165 1182
type(
  'a
)
"src/bootCanvas.ml" 50 1117 1119 "src/bootCanvas.ml" 52 1165 1182
type(
  'a
)
"src/bootCanvas.ml" 49 1104 1113 "src/bootCanvas.ml" 52 1165 1182
type(
  (Dom_html.canvasElement Js.t -> 'a) -> 'a
)
"src/bootCanvas.ml" 55 1220 1224 "src/bootCanvas.ml" 55 1220 1230
type(
  #Dom.node Js.t -> unit
)
ident(
  def append "src/bootCanvas.ml" 60 1331 1331 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 55 1220 1231 "src/bootCanvas.ml" 55 1220 1234
type(
  (#Dom.node as 'a) Js.t
)
ident(
  def elt "src/bootCanvas.ml" 56 1237 1239 "src/bootCanvas.ml" 56 1237 1287
)
"src/bootCanvas.ml" 56 1237 1239 "src/bootCanvas.ml" 56 1237 1243
type(
  (Dom_html.canvasElement Js.t -> unit) -> unit
)
ident(
  int_ref wrap "src/bootCanvas.ml" 49 1104 1108 "src/bootCanvas.ml" 49 1104 1112
)
"src/bootCanvas.ml" 56 1237 1249 "src/bootCanvas.ml" 56 1237 1255
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 56 1237 1259 "src/bootCanvas.ml" 56 1237 1285
)
"src/bootCanvas.ml" 56 1237 1259 "src/bootCanvas.ml" 56 1237 1274
type(
  'a Js.t -> Dom_html.canvasElement Js.t -> unit
)
ident(
  ext_ref Dom.appendChild
)
"src/bootCanvas.ml" 56 1237 1275 "src/bootCanvas.ml" 56 1237 1278
type(
  'a Js.t
)
ident(
  int_ref elt "src/bootCanvas.ml" 55 1220 1231 "src/bootCanvas.ml" 55 1220 1234
)
"src/bootCanvas.ml" 56 1237 1279 "src/bootCanvas.ml" 56 1237 1285
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref canvas "src/bootCanvas.ml" 56 1237 1249 "src/bootCanvas.ml" 56 1237 1255
)
"src/bootCanvas.ml" 56 1237 1259 "src/bootCanvas.ml" 56 1237 1285
type(
  unit
)
"src/bootCanvas.ml" 56 1237 1249 "src/bootCanvas.ml" 56 1237 1285
type(
  Dom_html.canvasElement Js.t -> unit
)
"src/bootCanvas.ml" 56 1237 1239 "src/bootCanvas.ml" 56 1237 1287
type(
  unit
)
"src/bootCanvas.ml" 55 1220 1231 "src/bootCanvas.ml" 56 1237 1287
type(
  'a Js.t -> unit
)
"src/bootCanvas.ml" 60 1331 1335 "src/bootCanvas.ml" 60 1331 1344
type(
  #Dom.node Js.t -> int -> int -> unit
)
ident(
  def create_in "src/bootCanvas.ml" 64 1411 1411 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 60 1331 1345 "src/bootCanvas.ml" 60 1331 1348
type(
  (#Dom.node as 'a) Js.t
)
ident(
  def elt "src/bootCanvas.ml" 60 1331 1349 "src/bootCanvas.ml" 62 1397 1409
)
"src/bootCanvas.ml" 60 1331 1349 "src/bootCanvas.ml" 60 1331 1354
type(
  int
)
ident(
  def width "src/bootCanvas.ml" 60 1331 1355 "src/bootCanvas.ml" 62 1397 1409
)
"src/bootCanvas.ml" 60 1331 1355 "src/bootCanvas.ml" 60 1331 1361
type(
  int
)
ident(
  def height "src/bootCanvas.ml" 61 1364 1366 "src/bootCanvas.ml" 62 1397 1409
)
"src/bootCanvas.ml" 61 1364 1370 "src/bootCanvas.ml" 61 1364 1371
type(
  unit
)
"src/bootCanvas.ml" 61 1364 1374 "src/bootCanvas.ml" 61 1364 1380
type(
  int -> int -> unit
)
ident(
  int_ref create "src/bootCanvas.ml" 39 820 824 "src/bootCanvas.ml" 39 820 830
)
"src/bootCanvas.ml" 61 1364 1381 "src/bootCanvas.ml" 61 1364 1386
type(
  int
)
ident(
  int_ref width "src/bootCanvas.ml" 60 1331 1349 "src/bootCanvas.ml" 60 1331 1354
)
"src/bootCanvas.ml" 61 1364 1387 "src/bootCanvas.ml" 61 1364 1393
type(
  int
)
ident(
  int_ref height "src/bootCanvas.ml" 60 1331 1355 "src/bootCanvas.ml" 60 1331 1361
)
"src/bootCanvas.ml" 61 1364 1374 "src/bootCanvas.ml" 61 1364 1393
type(
  unit
)
"src/bootCanvas.ml" 62 1397 1399 "src/bootCanvas.ml" 62 1397 1405
type(
  'a Js.t -> unit
)
ident(
  int_ref append "src/bootCanvas.ml" 55 1220 1224 "src/bootCanvas.ml" 55 1220 1230
)
"src/bootCanvas.ml" 62 1397 1406 "src/bootCanvas.ml" 62 1397 1409
type(
  'a Js.t
)
ident(
  int_ref elt "src/bootCanvas.ml" 60 1331 1345 "src/bootCanvas.ml" 60 1331 1348
)
"src/bootCanvas.ml" 62 1397 1399 "src/bootCanvas.ml" 62 1397 1409
type(
  unit
)
"src/bootCanvas.ml" 61 1364 1366 "src/bootCanvas.ml" 62 1397 1409
type(
  unit
)
"src/bootCanvas.ml" 60 1331 1355 "src/bootCanvas.ml" 62 1397 1409
type(
  int -> unit
)
"src/bootCanvas.ml" 60 1331 1349 "src/bootCanvas.ml" 62 1397 1409
type(
  int -> int -> unit
)
"src/bootCanvas.ml" 60 1331 1345 "src/bootCanvas.ml" 62 1397 1409
type(
  'a Js.t -> int -> int -> unit
)
"src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> 'a) ->
  'a
)
ident(
  def wrap_2d "src/bootCanvas.ml" 69 1509 1509 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 64 1411 1423 "src/bootCanvas.ml" 64 1411 1424
type(
  Dom_html.canvasElement Js.t -> Dom_html.canvasRenderingContext2D Js.t -> 'a
)
ident(
  def f "src/bootCanvas.ml" 65 1427 1429 "src/bootCanvas.ml" 67 1502 1507
)
"src/bootCanvas.ml" 65 1427 1429 "src/bootCanvas.ml" 65 1427 1433
type(
  (Dom_html.canvasElement Js.t -> 'a) -> 'a
)
ident(
  int_ref wrap "src/bootCanvas.ml" 49 1104 1108 "src/bootCanvas.ml" 49 1104 1112
)
"src/bootCanvas.ml" 65 1427 1439 "src/bootCanvas.ml" 65 1427 1445
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 66 1449 1455 "src/bootCanvas.ml" 66 1449 1501
)
"src/bootCanvas.ml" 66 1449 1455 "src/bootCanvas.ml" 66 1449 1456
type(
  Dom_html.canvasElement Js.t -> Dom_html.canvasRenderingContext2D Js.t -> 'a
)
ident(
  int_ref f "src/bootCanvas.ml" 64 1411 1423 "src/bootCanvas.ml" 64 1411 1424
)
"src/bootCanvas.ml" 66 1449 1457 "src/bootCanvas.ml" 66 1449 1463
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref canvas "src/bootCanvas.ml" 65 1427 1439 "src/bootCanvas.ml" 65 1427 1445
)
"src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1471
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  int_ref x "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref canvas "src/bootCanvas.ml" 65 1427 1439 "src/bootCanvas.ml" 65 1427 1445
)
"src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1485
type(
  Dom_html.context -> Dom_html.canvasRenderingContext2D Js.t Js.meth
)
type(
  Dom_html.context -> Dom_html.canvasRenderingContext2D Js.t Js.meth
)
"src/bootCanvas.ml" 66 1449 1486 "src/bootCanvas.ml" 66 1449 1499
type(
  Dom_html.canvasRenderingContext2D Js.t
)
type(
  Dom_html.context
)
type(
  Dom_html.context
)
ident(
  int_ref jsoo_29529091 "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
)
type(
  Dom_html.context
)
type(
  Dom_html.context
)
ident(
  ext_ref Dom_html._2d_
)
"src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
type(
  Dom_html.canvasRenderingContext2D Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  Dom_html.context -> Dom_html.canvasRenderingContext2D Js.t Js.meth
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  def x "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1485
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  Dom_html.context -> Dom_html.canvasRenderingContext2D Js.t Js.meth
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def res "src/bootCanvas.ml" 66 1449 1500 "src/bootCanvas.ml" 66 1449 1500
)
type(
  'b
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  Dom_html.context
)
ident(
  int_ref jsoo_29529091 "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
)
type(
  Dom_html.context -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
)
type(
  Dom_html.canvasElement Js.t -> string -> Js.Unsafe.any array -> 'b
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'b
)
ident(
  def jsoo_res "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
)
type(
  Dom_html.context
)
ident(
  def jsoo_29529091 "src/bootCanvas.ml" 66 1449 1465 "src/bootCanvas.ml" 66 1449 1500
)
"src/bootCanvas.ml" 66 1449 1455 "src/bootCanvas.ml" 66 1449 1501
type(
  'a
)
"src/bootCanvas.ml" 65 1427 1439 "src/bootCanvas.ml" 66 1449 1501
type(
  Dom_html.canvasElement Js.t -> 'a
)
"src/bootCanvas.ml" 65 1427 1429 "src/bootCanvas.ml" 67 1502 1507
type(
  'a
)
"src/bootCanvas.ml" 64 1411 1423 "src/bootCanvas.ml" 67 1502 1507
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> 'a) ->
  'a
)
"src/bootCanvas.ml" 69 1509 1513 "src/bootCanvas.ml" 69 1509 1529
type(
  float -> unit
)
ident(
  def set_global_alpha "src/bootCanvas.ml" 74 1600 1600 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 69 1509 1530 "src/bootCanvas.ml" 69 1509 1531
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 70 1534 1536 "src/bootCanvas.ml" 72 1593 1598
)
"src/bootCanvas.ml" 70 1534 1536 "src/bootCanvas.ml" 70 1534 1543
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 70 1534 1549 "src/bootCanvas.ml" 70 1534 1555
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 70 1534 1556 "src/bootCanvas.ml" 71 1563 1592
)
"src/bootCanvas.ml" 70 1534 1556 "src/bootCanvas.ml" 70 1534 1559
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1592
)
"src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1572
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a.
                      (#Dom_html.element as 'a) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1592
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1592
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 70 1534 1556 "src/bootCanvas.ml" 70 1534 1559
)
"src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1587
type(
  < get : float; set : float -> unit > Js.gen_prop
)
type(
  float Js.prop
)
"src/bootCanvas.ml" 71 1563 1591 "src/bootCanvas.ml" 71 1563 1592
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1592
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 69 1509 1530 "src/bootCanvas.ml" 69 1509 1531
)
"src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1592
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  float
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1592
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1592
)
type(
  Dom_html.canvasRenderingContext2D Js.t -> string -> float -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  float
)
type(
  float
)
ident(
  int_ref M.res "src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1592
)
type(
  float
)
type(
  float
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  < get : float; set : float -> unit > Js.gen_prop
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1587
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  < get : float; set : float -> unit > Js.gen_prop
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  float
)
ident(
  def res "src/bootCanvas.ml" 71 1563 1592 "src/bootCanvas.ml" 71 1563 1592
)
type(
  float
)
type(
  float
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1592
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 71 1563 1569 "src/bootCanvas.ml" 71 1563 1592
)
"src/bootCanvas.ml" 70 1534 1556 "src/bootCanvas.ml" 71 1563 1592
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 70 1534 1549 "src/bootCanvas.ml" 71 1563 1592
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 70 1534 1536 "src/bootCanvas.ml" 72 1593 1598
type(
  unit
)
"src/bootCanvas.ml" 69 1509 1530 "src/bootCanvas.ml" 72 1593 1598
type(
  float -> unit
)
"src/bootCanvas.ml" 74 1600 1604 "src/bootCanvas.ml" 74 1600 1620
type(
  'a -> float
)
ident(
  def get_global_alpha "src/bootCanvas.ml" 79 1686 1686 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 74 1600 1621 "src/bootCanvas.ml" 74 1600 1622
type(
  'a
)
ident(
  def x "src/bootCanvas.ml" 75 1625 1627 "src/bootCanvas.ml" 77 1679 1684
)
"src/bootCanvas.ml" 75 1625 1627 "src/bootCanvas.ml" 75 1625 1634
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> float) ->
  float
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 75 1625 1640 "src/bootCanvas.ml" 75 1625 1646
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 75 1625 1647 "src/bootCanvas.ml" 76 1654 1678
)
"src/bootCanvas.ml" 75 1625 1647 "src/bootCanvas.ml" 75 1625 1650
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1678
)
"src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1663
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1678
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1678
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 75 1625 1647 "src/bootCanvas.ml" 75 1625 1650
)
"src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1678
type(
  float
)
type(
  float
)
type(
  float
)
type(
  float
)
ident(
  int_ref M.res "src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1678
)
type(
  float
)
type(
  float
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1678
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  < get : float; set : float -> unit > Js.gen_prop
)
type(
  < get : float; set : float -> unit > Js.gen_prop
)
type(
  float Js.prop
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1678
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  < get : float; set : float -> unit > Js.gen_prop
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'h.
                      (#Dom_html.element as 'h) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  float
)
ident(
  def res "src/bootCanvas.ml" 76 1654 1678 "src/bootCanvas.ml" 76 1654 1678
)
type(
  'i
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1678
)
type(
  Dom_html.canvasRenderingContext2D Js.t -> string -> 'i
)
ident(
  ext_ref Js.Unsafe.get
)
type(
  'i
)
ident(
  def jsoo_res "src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1678
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 76 1654 1660 "src/bootCanvas.ml" 76 1654 1678
)
"src/bootCanvas.ml" 75 1625 1647 "src/bootCanvas.ml" 76 1654 1678
type(
  Dom_html.canvasRenderingContext2D Js.t -> float
)
"src/bootCanvas.ml" 75 1625 1640 "src/bootCanvas.ml" 76 1654 1678
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> float
)
"src/bootCanvas.ml" 75 1625 1627 "src/bootCanvas.ml" 77 1679 1684
type(
  float
)
"src/bootCanvas.ml" 74 1600 1621 "src/bootCanvas.ml" 77 1679 1684
type(
  'a -> float
)
"src/bootCanvas.ml" 79 1686 1690 "src/bootCanvas.ml" 79 1686 1695
type(
  'a option
)
ident(
  def empty "src/bootCanvas.ml" 80 1703 1703 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 79 1686 1698 "src/bootCanvas.ml" 79 1686 1702
type(
  'a option
)
"src/bootCanvas.ml" 80 1703 1707 "src/bootCanvas.ml" 80 1703 1718
type(
  BootColor.t -> fill_param option
)
ident(
  def plain_color "src/bootCanvas.ml" 81 1738 1738 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 80 1703 1719 "src/bootCanvas.ml" 80 1703 1720
type(
  BootColor.t
)
ident(
  def c "src/bootCanvas.ml" 80 1703 1723 "src/bootCanvas.ml" 80 1703 1737
)
"src/bootCanvas.ml" 80 1703 1735 "src/bootCanvas.ml" 80 1703 1736
type(
  BootColor.t
)
ident(
  int_ref c "src/bootCanvas.ml" 80 1703 1719 "src/bootCanvas.ml" 80 1703 1720
)
"src/bootCanvas.ml" 80 1703 1729 "src/bootCanvas.ml" 80 1703 1736
type(
  fill_param
)
"src/bootCanvas.ml" 80 1703 1723 "src/bootCanvas.ml" 80 1703 1737
type(
  fill_param option
)
"src/bootCanvas.ml" 80 1703 1719 "src/bootCanvas.ml" 80 1703 1737
type(
  BootColor.t -> fill_param option
)
"src/bootCanvas.ml" 81 1738 1742 "src/bootCanvas.ml" 81 1738 1757
type(
  point -> point -> (float * BootColor.t) list -> fill_param option
)
ident(
  def linear_gradient "src/bootCanvas.ml" 82 1806 1806 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 81 1738 1758 "src/bootCanvas.ml" 81 1738 1759
type(
  point
)
ident(
  def p "src/bootCanvas.ml" 81 1738 1760 "src/bootCanvas.ml" 81 1738 1805
)
"src/bootCanvas.ml" 81 1738 1760 "src/bootCanvas.ml" 81 1738 1762
type(
  point
)
ident(
  def pa "src/bootCanvas.ml" 81 1738 1763 "src/bootCanvas.ml" 81 1738 1805
)
"src/bootCanvas.ml" 81 1738 1763 "src/bootCanvas.ml" 81 1738 1767
type(
  (float * BootColor.t) list
)
ident(
  def step "src/bootCanvas.ml" 81 1738 1770 "src/bootCanvas.ml" 81 1738 1805
)
"src/bootCanvas.ml" 81 1738 1792 "src/bootCanvas.ml" 81 1738 1793
type(
  point
)
ident(
  int_ref p "src/bootCanvas.ml" 81 1738 1758 "src/bootCanvas.ml" 81 1738 1759
)
"src/bootCanvas.ml" 81 1738 1795 "src/bootCanvas.ml" 81 1738 1797
type(
  point
)
ident(
  int_ref pa "src/bootCanvas.ml" 81 1738 1760 "src/bootCanvas.ml" 81 1738 1762
)
"src/bootCanvas.ml" 81 1738 1799 "src/bootCanvas.ml" 81 1738 1803
type(
  (float * BootColor.t) list
)
ident(
  int_ref step "src/bootCanvas.ml" 81 1738 1763 "src/bootCanvas.ml" 81 1738 1767
)
"src/bootCanvas.ml" 81 1738 1776 "src/bootCanvas.ml" 81 1738 1804
type(
  fill_param
)
"src/bootCanvas.ml" 81 1738 1770 "src/bootCanvas.ml" 81 1738 1805
type(
  fill_param option
)
"src/bootCanvas.ml" 81 1738 1763 "src/bootCanvas.ml" 81 1738 1805
type(
  (float * BootColor.t) list -> fill_param option
)
"src/bootCanvas.ml" 81 1738 1760 "src/bootCanvas.ml" 81 1738 1805
type(
  point -> (float * BootColor.t) list -> fill_param option
)
"src/bootCanvas.ml" 81 1738 1758 "src/bootCanvas.ml" 81 1738 1805
type(
  point -> point -> (float * BootColor.t) list -> fill_param option
)
"src/bootCanvas.ml" 82 1806 1810 "src/bootCanvas.ml" 82 1806 1825
type(
  point ->
  point -> float -> float -> (float * BootColor.t) list -> fill_param option
)
ident(
  def radial_gradient "src/bootCanvas.ml" 84 1896 1896 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 82 1806 1826 "src/bootCanvas.ml" 82 1806 1827
type(
  point
)
ident(
  def p "src/bootCanvas.ml" 82 1806 1828 "src/bootCanvas.ml" 83 1847 1895
)
"src/bootCanvas.ml" 82 1806 1828 "src/bootCanvas.ml" 82 1806 1830
type(
  point
)
ident(
  def pb "src/bootCanvas.ml" 82 1806 1831 "src/bootCanvas.ml" 83 1847 1895
)
"src/bootCanvas.ml" 82 1806 1831 "src/bootCanvas.ml" 82 1806 1834
type(
  float
)
ident(
  def rad "src/bootCanvas.ml" 82 1806 1835 "src/bootCanvas.ml" 83 1847 1895
)
"src/bootCanvas.ml" 82 1806 1835 "src/bootCanvas.ml" 82 1806 1839
type(
  float
)
ident(
  def rad2 "src/bootCanvas.ml" 82 1806 1840 "src/bootCanvas.ml" 83 1847 1895
)
"src/bootCanvas.ml" 82 1806 1840 "src/bootCanvas.ml" 82 1806 1844
type(
  (float * BootColor.t) list
)
ident(
  def step "src/bootCanvas.ml" 83 1847 1849 "src/bootCanvas.ml" 83 1847 1895
)
"src/bootCanvas.ml" 83 1847 1871 "src/bootCanvas.ml" 83 1847 1872
type(
  point
)
ident(
  int_ref p "src/bootCanvas.ml" 82 1806 1826 "src/bootCanvas.ml" 82 1806 1827
)
"src/bootCanvas.ml" 83 1847 1874 "src/bootCanvas.ml" 83 1847 1876
type(
  point
)
ident(
  int_ref pb "src/bootCanvas.ml" 82 1806 1828 "src/bootCanvas.ml" 82 1806 1830
)
"src/bootCanvas.ml" 83 1847 1878 "src/bootCanvas.ml" 83 1847 1881
type(
  float
)
ident(
  int_ref rad "src/bootCanvas.ml" 82 1806 1831 "src/bootCanvas.ml" 82 1806 1834
)
"src/bootCanvas.ml" 83 1847 1883 "src/bootCanvas.ml" 83 1847 1887
type(
  float
)
ident(
  int_ref rad2 "src/bootCanvas.ml" 82 1806 1835 "src/bootCanvas.ml" 82 1806 1839
)
"src/bootCanvas.ml" 83 1847 1889 "src/bootCanvas.ml" 83 1847 1893
type(
  (float * BootColor.t) list
)
ident(
  int_ref step "src/bootCanvas.ml" 82 1806 1840 "src/bootCanvas.ml" 82 1806 1844
)
"src/bootCanvas.ml" 83 1847 1855 "src/bootCanvas.ml" 83 1847 1894
type(
  fill_param
)
"src/bootCanvas.ml" 83 1847 1849 "src/bootCanvas.ml" 83 1847 1895
type(
  fill_param option
)
"src/bootCanvas.ml" 82 1806 1840 "src/bootCanvas.ml" 83 1847 1895
type(
  (float * BootColor.t) list -> fill_param option
)
"src/bootCanvas.ml" 82 1806 1835 "src/bootCanvas.ml" 83 1847 1895
type(
  float -> (float * BootColor.t) list -> fill_param option
)
"src/bootCanvas.ml" 82 1806 1831 "src/bootCanvas.ml" 83 1847 1895
type(
  float -> float -> (float * BootColor.t) list -> fill_param option
)
"src/bootCanvas.ml" 82 1806 1828 "src/bootCanvas.ml" 83 1847 1895
type(
  point -> float -> float -> (float * BootColor.t) list -> fill_param option
)
"src/bootCanvas.ml" 82 1806 1826 "src/bootCanvas.ml" 83 1847 1895
type(
  point ->
  point -> float -> float -> (float * BootColor.t) list -> fill_param option
)
"src/bootCanvas.ml" 84 1896 1900 "src/bootCanvas.ml" 84 1896 1907
type(
  image ->
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ] -> fill_param option
)
ident(
  def pattern "src/bootCanvas.ml" 86 1951 1951 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 84 1896 1908 "src/bootCanvas.ml" 84 1896 1911
type(
  image
)
ident(
  def img "src/bootCanvas.ml" 84 1896 1912 "src/bootCanvas.ml" 84 1896 1949
)
"src/bootCanvas.ml" 84 1896 1912 "src/bootCanvas.ml" 84 1896 1918
type(
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ]
)
ident(
  def repeat "src/bootCanvas.ml" 84 1896 1921 "src/bootCanvas.ml" 84 1896 1949
)
"src/bootCanvas.ml" 84 1896 1936 "src/bootCanvas.ml" 84 1896 1939
type(
  image
)
ident(
  int_ref img "src/bootCanvas.ml" 84 1896 1908 "src/bootCanvas.ml" 84 1896 1911
)
"src/bootCanvas.ml" 84 1896 1941 "src/bootCanvas.ml" 84 1896 1947
type(
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ]
)
ident(
  int_ref repeat "src/bootCanvas.ml" 84 1896 1912 "src/bootCanvas.ml" 84 1896 1918
)
"src/bootCanvas.ml" 84 1896 1927 "src/bootCanvas.ml" 84 1896 1948
type(
  fill_param
)
"src/bootCanvas.ml" 84 1896 1921 "src/bootCanvas.ml" 84 1896 1949
type(
  fill_param option
)
"src/bootCanvas.ml" 84 1896 1912 "src/bootCanvas.ml" 84 1896 1949
type(
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ] -> fill_param option
)
"src/bootCanvas.ml" 84 1896 1908 "src/bootCanvas.ml" 84 1896 1949
type(
  image ->
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ] -> fill_param option
)
"src/bootCanvas.ml" 86 1951 1955 "src/bootCanvas.ml" 86 1951 1961
type(
  ?background:'a option ->
  ?strokes:'b option -> unit -> 'a option * 'b option
)
ident(
  def filler "src/bootCanvas.ml" 89 2029 2029 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 86 1951 1975 "src/bootCanvas.ml" 86 1951 1979
type(
  'a option
)
type(
  'a option
)
ident(
  int_ref *sth* "src/bootCanvas.ml" 86 1951 1975 "src/bootCanvas.ml" 86 1951 1979
)
type(
  'a option option
)
type(
  'a option option
)
type(
  'a option
)
"src/bootCanvas.ml" 86 1951 1962 "src/bootCanvas.ml" 86 1951 1980
type(
  'a option
)
"src/bootCanvas.ml" 86 1951 1991 "src/bootCanvas.ml" 86 1951 1995
type(
  'b option
)
type(
  'b option
)
ident(
  int_ref *sth* "src/bootCanvas.ml" 86 1951 1991 "src/bootCanvas.ml" 86 1951 1995
)
type(
  'b option option
)
type(
  'b option option
)
type(
  'b option
)
"src/bootCanvas.ml" 86 1951 1981 "src/bootCanvas.ml" 86 1951 1996
type(
  'b option
)
"src/bootCanvas.ml" 86 1951 1997 "src/bootCanvas.ml" 86 1951 1999
type(
  unit
)
"src/bootCanvas.ml" 87 2002 2005 "src/bootCanvas.ml" 87 2002 2015
type(
  'a option
)
ident(
  int_ref background "src/bootCanvas.ml" 86 1951 1962 "src/bootCanvas.ml" 86 1951 1980
)
"src/bootCanvas.ml" 87 2002 2017 "src/bootCanvas.ml" 87 2002 2024
type(
  'b option
)
ident(
  int_ref strokes "src/bootCanvas.ml" 86 1951 1981 "src/bootCanvas.ml" 86 1951 1996
)
"src/bootCanvas.ml" 87 2002 2005 "src/bootCanvas.ml" 87 2002 2024
type(
  'a option * 'b option
)
"src/bootCanvas.ml" 86 1951 1997 "src/bootCanvas.ml" 87 2002 2025
type(
  unit -> 'a option * 'b option
)
"src/bootCanvas.ml" 86 1951 1981 "src/bootCanvas.ml" 87 2002 2025
type(
  ?strokes:'b option -> unit -> 'a option * 'b option
)
type(
  unit -> 'a option * 'b option
)
type(
  'b option
)
type(
  'b option option
)
ident(
  int_ref *opt* "src/bootCanvas.ml" 86 1951 1981 "src/bootCanvas.ml" 87 2002 2025
)
type(
  'b option option
)
"src/bootCanvas.ml" 86 1951 1962 "src/bootCanvas.ml" 87 2002 2025
type(
  ?background:'a option ->
  ?strokes:'b option -> unit -> 'a option * 'b option
)
type(
  ?strokes:'b option -> unit -> 'a option * 'b option
)
type(
  'a option
)
type(
  'a option option
)
ident(
  int_ref *opt* "src/bootCanvas.ml" 86 1951 1962 "src/bootCanvas.ml" 87 2002 2025
)
type(
  'a option option
)
"src/bootCanvas.ml" 92 2055 2061 "src/bootCanvas.ml" 92 2055 2063
type(
  float
)
ident(
  def pi "src/bootCanvas.ml" 94 2090 2092 "src/bootCanvas.ml" 195 5193 5196
)
"src/bootCanvas.ml" 92 2055 2066 "src/bootCanvas.ml" 92 2055 2088
type(
  float
)
"src/bootCanvas.ml" 94 2090 2096 "src/bootCanvas.ml" 94 2090 2105
type(
  [< `Butt | `Round | `Square ] -> Js.js_string Js.t
)
ident(
  def cap_style "src/bootCanvas.ml" 101 2235 2237 "src/bootCanvas.ml" 195 5193 5196
)
"src/bootCanvas.ml" 94 2090 2106 "src/bootCanvas.ml" 94 2090 2107
type(
  [< `Butt | `Round | `Square ] as 'a
)
ident(
  def s "src/bootCanvas.ml" 95 2110 2114 "src/bootCanvas.ml" 99 2218 2233
)
"src/bootCanvas.ml" 95 2110 2118 "src/bootCanvas.ml" 95 2110 2123
type(
  string
)
ident(
  def style "src/bootCanvas.ml" 99 2218 2225 "src/bootCanvas.ml" 99 2218 2233
)
"src/bootCanvas.ml" 95 2110 2132 "src/bootCanvas.ml" 95 2110 2133
type(
  'a
)
ident(
  int_ref s "src/bootCanvas.ml" 94 2090 2106 "src/bootCanvas.ml" 94 2090 2107
)
"src/bootCanvas.ml" 96 2140 2148 "src/bootCanvas.ml" 96 2140 2154
type(
  'a
)
"src/bootCanvas.ml" 96 2140 2158 "src/bootCanvas.ml" 96 2140 2165
type(
  string
)
"src/bootCanvas.ml" 97 2166 2174 "src/bootCanvas.ml" 97 2166 2181
type(
  'a
)
"src/bootCanvas.ml" 97 2166 2185 "src/bootCanvas.ml" 97 2166 2193
type(
  string
)
"src/bootCanvas.ml" 98 2194 2202 "src/bootCanvas.ml" 98 2194 2207
type(
  'a
)
"src/bootCanvas.ml" 98 2194 2211 "src/bootCanvas.ml" 98 2194 2217
type(
  string
)
"src/bootCanvas.ml" 95 2110 2126 "src/bootCanvas.ml" 98 2194 2217
type(
  string
)
"src/bootCanvas.ml" 99 2218 2225 "src/bootCanvas.ml" 99 2218 2227
type(
  string -> Js.js_string Js.t
)
ident(
  ext_ref BootPervasives._s
)
"src/bootCanvas.ml" 99 2218 2228 "src/bootCanvas.ml" 99 2218 2233
type(
  string
)
ident(
  int_ref style "src/bootCanvas.ml" 95 2110 2118 "src/bootCanvas.ml" 95 2110 2123
)
"src/bootCanvas.ml" 99 2218 2225 "src/bootCanvas.ml" 99 2218 2233
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 95 2110 2114 "src/bootCanvas.ml" 99 2218 2233
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 94 2090 2106 "src/bootCanvas.ml" 99 2218 2233
type(
  'a -> Js.js_string Js.t
)
"src/bootCanvas.ml" 101 2235 2241 "src/bootCanvas.ml" 101 2235 2251
type(
  [< `Bevel | `Miter | `Square ] -> Js.js_string Js.t
)
ident(
  def join_style "src/bootCanvas.ml" 108 2382 2384 "src/bootCanvas.ml" 195 5193 5196
)
"src/bootCanvas.ml" 101 2235 2252 "src/bootCanvas.ml" 101 2235 2253
type(
  [< `Bevel | `Miter | `Square ] as 'b
)
ident(
  def s "src/bootCanvas.ml" 102 2256 2260 "src/bootCanvas.ml" 106 2365 2380
)
"src/bootCanvas.ml" 102 2256 2264 "src/bootCanvas.ml" 102 2256 2269
type(
  string
)
ident(
  def style "src/bootCanvas.ml" 106 2365 2372 "src/bootCanvas.ml" 106 2365 2380
)
"src/bootCanvas.ml" 102 2256 2278 "src/bootCanvas.ml" 102 2256 2279
type(
  'b
)
ident(
  int_ref s "src/bootCanvas.ml" 101 2235 2252 "src/bootCanvas.ml" 101 2235 2253
)
"src/bootCanvas.ml" 103 2285 2293 "src/bootCanvas.ml" 103 2285 2299
type(
  'b
)
"src/bootCanvas.ml" 103 2285 2303 "src/bootCanvas.ml" 103 2285 2310
type(
  string
)
"src/bootCanvas.ml" 104 2311 2319 "src/bootCanvas.ml" 104 2311 2326
type(
  'b
)
"src/bootCanvas.ml" 104 2311 2330 "src/bootCanvas.ml" 104 2311 2338
type(
  string
)
"src/bootCanvas.ml" 105 2339 2347 "src/bootCanvas.ml" 105 2339 2353
type(
  'b
)
"src/bootCanvas.ml" 105 2339 2357 "src/bootCanvas.ml" 105 2339 2364
type(
  string
)
"src/bootCanvas.ml" 102 2256 2272 "src/bootCanvas.ml" 105 2339 2364
type(
  string
)
"src/bootCanvas.ml" 106 2365 2372 "src/bootCanvas.ml" 106 2365 2374
type(
  string -> Js.js_string Js.t
)
ident(
  ext_ref BootPervasives._s
)
"src/bootCanvas.ml" 106 2365 2375 "src/bootCanvas.ml" 106 2365 2380
type(
  string
)
ident(
  int_ref style "src/bootCanvas.ml" 102 2256 2264 "src/bootCanvas.ml" 102 2256 2269
)
"src/bootCanvas.ml" 106 2365 2372 "src/bootCanvas.ml" 106 2365 2380
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 102 2256 2260 "src/bootCanvas.ml" 106 2365 2380
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 101 2235 2252 "src/bootCanvas.ml" 106 2365 2380
type(
  'b -> Js.js_string Js.t
)
"src/bootCanvas.ml" 108 2382 2388 "src/bootCanvas.ml" 108 2382 2394
type(
  < stroke : 'jsoo_1df5757a Js.meth;
    strokeStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop; .. >
  Js.t -> BootColor.t -> 'jsoo_1df5757a
)
ident(
  def stroke "src/bootCanvas.ml" 112 2488 2490 "src/bootCanvas.ml" 195 5193 5196
)
"src/bootCanvas.ml" 108 2382 2395 "src/bootCanvas.ml" 108 2382 2398
type(
  (< stroke : 'jsoo_1df5757a Js.meth;
     strokeStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop; .. >
   as 'c)
  Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 108 2382 2399 "src/bootCanvas.ml" 110 2460 2480
)
"src/bootCanvas.ml" 108 2382 2399 "src/bootCanvas.ml" 108 2382 2400
type(
  BootColor.t
)
ident(
  def c "src/bootCanvas.ml" 109 2403 2407 "src/bootCanvas.ml" 110 2460 2480
)
"src/bootCanvas.ml" 109 2403 2411 "src/bootCanvas.ml" 109 2403 2412
type(
  unit
)
"src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2418
type(
  'c
)
ident(
  int_ref x "src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2456
)
type(
  'c Js.t
)
type(
  'c Js.t
)
type(
  'c Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2456
)
type(
  'c Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 108 2382 2395 "src/bootCanvas.ml" 108 2382 2398
)
"src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2433
type(
  (< set : Js.js_string Js.t -> unit; .. > as 'd) Js.gen_prop
)
type(
  'd Js.gen_prop
)
"src/bootCanvas.ml" 109 2403 2438 "src/bootCanvas.ml" 109 2403 2453
type(
  BootColor.t -> Js.js_string Js.t
)
ident(
  ext_ref BootColor.to_js
)
"src/bootCanvas.ml" 109 2403 2454 "src/bootCanvas.ml" 109 2403 2455
type(
  BootColor.t
)
ident(
  int_ref c "src/bootCanvas.ml" 108 2382 2399 "src/bootCanvas.ml" 108 2382 2400
)
"src/bootCanvas.ml" 109 2403 2438 "src/bootCanvas.ml" 109 2403 2455
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2456
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2456
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2456
)
type(
  string
)
type(
  'c Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2456
)
type(
  'c Js.t -> string -> Js.js_string Js.t -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2456
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
type(
  'c -> 'd Js.gen_prop
)
type(
  'c
)
ident(
  def x "src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2433
)
type(
  'c -> 'd Js.gen_prop
)
type(
  'c Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def res "src/bootCanvas.ml" 109 2403 2456 "src/bootCanvas.ml" 109 2403 2456
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2456
)
type(
  'c Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 109 2403 2415 "src/bootCanvas.ml" 109 2403 2456
)
"src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2467
type(
  'c
)
ident(
  int_ref x "src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2480
)
type(
  'c Js.t
)
type(
  'c Js.t
)
type(
  'c Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2480
)
type(
  'c Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 108 2382 2395 "src/bootCanvas.ml" 108 2382 2398
)
"src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2477
type(
  'jsoo_1df5757a Js.meth
)
type(
  'jsoo_1df5757a Js.meth
)
"src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2480
type(
  'jsoo_1df5757a
)
type(
  'jsoo_1df5757a
)
type(
  'jsoo_1df5757a
)
type(
  'jsoo_1df5757a
)
ident(
  int_ref M.res "src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2480
)
type(
  'jsoo_1df5757a
)
type(
  'jsoo_1df5757a
)
type(
  'jsoo_1df5757a
)
type(
  'jsoo_1df5757a
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2480
)
type(
  'c -> 'jsoo_1df5757a Js.meth
)
type(
  'c
)
ident(
  def x "src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2477
)
type(
  'c -> 'jsoo_1df5757a Js.meth
)
type(
  'c Js.t
)
type(
  'jsoo_1df5757a
)
ident(
  def res "src/bootCanvas.ml" 110 2460 2480 "src/bootCanvas.ml" 110 2460 2480
)
type(
  'e
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  'c Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2480
)
type(
  'c Js.t -> string -> Js.Unsafe.any array -> 'e
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'e
)
ident(
  def jsoo_res "src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2480
)
type(
  'c Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 110 2460 2464 "src/bootCanvas.ml" 110 2460 2480
)
"src/bootCanvas.ml" 109 2403 2407 "src/bootCanvas.ml" 110 2460 2480
type(
  'jsoo_1df5757a
)
"src/bootCanvas.ml" 108 2382 2399 "src/bootCanvas.ml" 110 2460 2480
type(
  BootColor.t -> 'jsoo_1df5757a
)
"src/bootCanvas.ml" 108 2382 2395 "src/bootCanvas.ml" 110 2460 2480
type(
  'c Js.t -> BootColor.t -> 'jsoo_1df5757a
)
"src/bootCanvas.ml" 112 2488 2494 "src/bootCanvas.ml" 112 2488 2498
type(
  < fill : 'jsoo_593685be Js.meth;
    fillStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop; .. >
  Js.t -> BootColor.t -> 'jsoo_593685be
)
ident(
  def fill "src/bootCanvas.ml" 116 2582 2584 "src/bootCanvas.ml" 195 5193 5196
)
"src/bootCanvas.ml" 112 2488 2499 "src/bootCanvas.ml" 112 2488 2502
type(
  (< fill : 'jsoo_593685be Js.meth;
     fillStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop; .. >
   as 'f)
  Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 112 2488 2503 "src/bootCanvas.ml" 114 2562 2580
)
"src/bootCanvas.ml" 112 2488 2503 "src/bootCanvas.ml" 112 2488 2504
type(
  BootColor.t
)
ident(
  def c "src/bootCanvas.ml" 113 2507 2511 "src/bootCanvas.ml" 114 2562 2580
)
"src/bootCanvas.ml" 113 2507 2515 "src/bootCanvas.ml" 113 2507 2516
type(
  unit
)
"src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2522
type(
  'f
)
ident(
  int_ref x "src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2558
)
type(
  'f Js.t
)
type(
  'f Js.t
)
type(
  'f Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2558
)
type(
  'f Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 112 2488 2499 "src/bootCanvas.ml" 112 2488 2502
)
"src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2535
type(
  (< set : Js.js_string Js.t -> unit; .. > as 'g) Js.gen_prop
)
type(
  'g Js.gen_prop
)
"src/bootCanvas.ml" 113 2507 2540 "src/bootCanvas.ml" 113 2507 2555
type(
  BootColor.t -> Js.js_string Js.t
)
ident(
  ext_ref BootColor.to_js
)
"src/bootCanvas.ml" 113 2507 2556 "src/bootCanvas.ml" 113 2507 2557
type(
  BootColor.t
)
ident(
  int_ref c "src/bootCanvas.ml" 112 2488 2503 "src/bootCanvas.ml" 112 2488 2504
)
"src/bootCanvas.ml" 113 2507 2540 "src/bootCanvas.ml" 113 2507 2557
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2558
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2558
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2558
)
type(
  string
)
type(
  'f Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2558
)
type(
  'f Js.t -> string -> Js.js_string Js.t -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2558
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
type(
  'f -> 'g Js.gen_prop
)
type(
  'f
)
ident(
  def x "src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2535
)
type(
  'f -> 'g Js.gen_prop
)
type(
  'f Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def res "src/bootCanvas.ml" 113 2507 2558 "src/bootCanvas.ml" 113 2507 2558
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2558
)
type(
  'f Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 113 2507 2519 "src/bootCanvas.ml" 113 2507 2558
)
"src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2569
type(
  'f
)
ident(
  int_ref x "src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2580
)
type(
  'f Js.t
)
type(
  'f Js.t
)
type(
  'f Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2580
)
type(
  'f Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 112 2488 2499 "src/bootCanvas.ml" 112 2488 2502
)
"src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2577
type(
  'jsoo_593685be Js.meth
)
type(
  'jsoo_593685be Js.meth
)
"src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2580
type(
  'jsoo_593685be
)
type(
  'jsoo_593685be
)
type(
  'jsoo_593685be
)
type(
  'jsoo_593685be
)
ident(
  int_ref M.res "src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2580
)
type(
  'jsoo_593685be
)
type(
  'jsoo_593685be
)
type(
  'jsoo_593685be
)
type(
  'jsoo_593685be
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2580
)
type(
  'f -> 'jsoo_593685be Js.meth
)
type(
  'f
)
ident(
  def x "src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2577
)
type(
  'f -> 'jsoo_593685be Js.meth
)
type(
  'f Js.t
)
type(
  'jsoo_593685be
)
ident(
  def res "src/bootCanvas.ml" 114 2562 2580 "src/bootCanvas.ml" 114 2562 2580
)
type(
  'h
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  'f Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2580
)
type(
  'f Js.t -> string -> Js.Unsafe.any array -> 'h
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'h
)
ident(
  def jsoo_res "src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2580
)
type(
  'f Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 114 2562 2566 "src/bootCanvas.ml" 114 2562 2580
)
"src/bootCanvas.ml" 113 2507 2511 "src/bootCanvas.ml" 114 2562 2580
type(
  'jsoo_593685be
)
"src/bootCanvas.ml" 112 2488 2503 "src/bootCanvas.ml" 114 2562 2580
type(
  BootColor.t -> 'jsoo_593685be
)
"src/bootCanvas.ml" 112 2488 2499 "src/bootCanvas.ml" 114 2562 2580
type(
  'f Js.t -> BootColor.t -> 'jsoo_593685be
)
"src/bootCanvas.ml" 116 2582 2588 "src/bootCanvas.ml" 116 2582 2599
type(
  ('i -> 'j -> unit) -> 'i -> 'j option -> unit
)
ident(
  def wrap_option "src/bootCanvas.ml" 120 2661 2663 "src/bootCanvas.ml" 195 5193 5196
)
"src/bootCanvas.ml" 116 2582 2600 "src/bootCanvas.ml" 116 2582 2601
type(
  'i -> 'j -> unit
)
ident(
  def f "src/bootCanvas.ml" 116 2582 2602 "src/bootCanvas.ml" 118 2641 2659
)
"src/bootCanvas.ml" 116 2582 2602 "src/bootCanvas.ml" 116 2582 2605
type(
  'i
)
ident(
  def ctx "src/bootCanvas.ml" 116 2582 2608 "src/bootCanvas.ml" 118 2641 2659
)
"src/bootCanvas.ml" 117 2617 2628 "src/bootCanvas.ml" 117 2617 2629
type(
  'j
)
ident(
  def x "src/bootCanvas.ml" 117 2617 2633 "src/bootCanvas.ml" 117 2617 2640
)
"src/bootCanvas.ml" 117 2617 2623 "src/bootCanvas.ml" 117 2617 2629
type(
  'j option
)
"src/bootCanvas.ml" 117 2617 2633 "src/bootCanvas.ml" 117 2617 2634
type(
  'i -> 'j -> unit
)
ident(
  int_ref f "src/bootCanvas.ml" 116 2582 2600 "src/bootCanvas.ml" 116 2582 2601
)
"src/bootCanvas.ml" 117 2617 2635 "src/bootCanvas.ml" 117 2617 2638
type(
  'i
)
ident(
  int_ref ctx "src/bootCanvas.ml" 116 2582 2602 "src/bootCanvas.ml" 116 2582 2605
)
"src/bootCanvas.ml" 117 2617 2639 "src/bootCanvas.ml" 117 2617 2640
type(
  'j
)
ident(
  int_ref x "src/bootCanvas.ml" 117 2617 2628 "src/bootCanvas.ml" 117 2617 2629
)
"src/bootCanvas.ml" 117 2617 2633 "src/bootCanvas.ml" 117 2617 2640
type(
  unit
)
"src/bootCanvas.ml" 118 2641 2647 "src/bootCanvas.ml" 118 2641 2651
type(
  'j option
)
"src/bootCanvas.ml" 118 2641 2657 "src/bootCanvas.ml" 118 2641 2659
type(
  unit
)
"src/bootCanvas.ml" 116 2582 2608 "src/bootCanvas.ml" 118 2641 2659
type(
  'j option -> unit
)
"src/bootCanvas.ml" 116 2582 2602 "src/bootCanvas.ml" 118 2641 2659
type(
  'i -> 'j option -> unit
)
"src/bootCanvas.ml" 116 2582 2600 "src/bootCanvas.ml" 118 2641 2659
type(
  ('i -> 'j -> unit) -> 'i -> 'j option -> unit
)
"src/bootCanvas.ml" 120 2661 2667 "src/bootCanvas.ml" 120 2661 2673
type(
  [< `No_repeat | `Repeat | `Repeat_x | `Repeat_y ] -> Js.js_string Js.t
)
ident(
  def repeat "src/bootCanvas.ml" 128 2846 2848 "src/bootCanvas.ml" 195 5193 5196
)
"src/bootCanvas.ml" 120 2661 2674 "src/bootCanvas.ml" 120 2661 2675
type(
  [< `No_repeat | `Repeat | `Repeat_x | `Repeat_y ] as 'k
)
ident(
  def s "src/bootCanvas.ml" 121 2678 2682 "src/bootCanvas.ml" 126 2831 2844
)
"src/bootCanvas.ml" 121 2678 2686 "src/bootCanvas.ml" 121 2678 2689
type(
  string
)
ident(
  def rep "src/bootCanvas.ml" 126 2831 2838 "src/bootCanvas.ml" 126 2831 2844
)
"src/bootCanvas.ml" 121 2678 2698 "src/bootCanvas.ml" 121 2678 2699
type(
  'k
)
ident(
  int_ref s "src/bootCanvas.ml" 120 2661 2674 "src/bootCanvas.ml" 120 2661 2675
)
"src/bootCanvas.ml" 122 2705 2713 "src/bootCanvas.ml" 122 2705 2720
type(
  'k
)
"src/bootCanvas.ml" 122 2705 2724 "src/bootCanvas.ml" 122 2705 2732
type(
  string
)
"src/bootCanvas.ml" 123 2733 2741 "src/bootCanvas.ml" 123 2733 2750
type(
  'k
)
"src/bootCanvas.ml" 123 2733 2754 "src/bootCanvas.ml" 123 2733 2764
type(
  string
)
"src/bootCanvas.ml" 124 2765 2773 "src/bootCanvas.ml" 124 2765 2782
type(
  'k
)
"src/bootCanvas.ml" 124 2765 2786 "src/bootCanvas.ml" 124 2765 2796
type(
  string
)
"src/bootCanvas.ml" 125 2797 2805 "src/bootCanvas.ml" 125 2797 2815
type(
  'k
)
"src/bootCanvas.ml" 125 2797 2819 "src/bootCanvas.ml" 125 2797 2830
type(
  string
)
"src/bootCanvas.ml" 121 2678 2692 "src/bootCanvas.ml" 125 2797 2830
type(
  string
)
"src/bootCanvas.ml" 126 2831 2838 "src/bootCanvas.ml" 126 2831 2840
type(
  string -> Js.js_string Js.t
)
ident(
  ext_ref BootPervasives._s
)
"src/bootCanvas.ml" 126 2831 2841 "src/bootCanvas.ml" 126 2831 2844
type(
  string
)
ident(
  int_ref rep "src/bootCanvas.ml" 121 2678 2686 "src/bootCanvas.ml" 121 2678 2689
)
"src/bootCanvas.ml" 126 2831 2838 "src/bootCanvas.ml" 126 2831 2844
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 121 2678 2682 "src/bootCanvas.ml" 126 2831 2844
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 120 2661 2674 "src/bootCanvas.ml" 126 2831 2844
type(
  'k -> Js.js_string Js.t
)
"src/bootCanvas.ml" 128 2846 2852 "src/bootCanvas.ml" 128 2846 2873
type(
  < createLinearGradient : float ->
                           float ->
                           float ->
                           float ->
                           (< addColorStop : float ->
                                             Js.js_string Js.t ->
                                             unit Js.meth;
                              .. >
                            as 'l)
                           Js.t Js.meth;
    createPattern : image -> Js.js_string Js.t -> 'jsoo_arg Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float -> float -> float -> 'l Js.t Js.meth;
    fill : unit Js.meth;
    fillStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop;
    fillStyle_gradient : < set : 'l Js.t -> unit; .. > Js.gen_prop;
    fillStyle_pattern : < set : 'jsoo_arg -> unit; .. > Js.gen_prop; .. >
  Js.t -> fill_param option -> unit
)
ident(
  def apply_filler_for_fill "src/bootCanvas.ml" 159 3952 3954 "src/bootCanvas.ml" 195 5193 5196
)
"src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
type(
  (< createLinearGradient : float ->
                            float -> float -> float -> 'l Js.t Js.meth;
     createPattern : image -> Js.js_string Js.t -> 'jsoo_arg Js.meth;
     createRadialGradient : float ->
                            float ->
                            float ->
                            float -> float -> float -> 'l Js.t Js.meth;
     fill : unit Js.meth;
     fillStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop;
     fillStyle_gradient : < set : 'l Js.t -> unit; .. > Js.gen_prop;
     fillStyle_pattern : < set : 'jsoo_arg -> unit; .. > Js.gen_prop; .. >
   as 'm)
  Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 128 2846 2880 "src/bootCanvas.ml" 157 3934 3950
)
"src/bootCanvas.ml" 129 2889 2900 "src/bootCanvas.ml" 129 2889 2901
type(
  fill_param
)
ident(
  def x "src/bootCanvas.ml" 130 2911 2919 "src/bootCanvas.ml" 155 3899 3923
)
"src/bootCanvas.ml" 129 2889 2895 "src/bootCanvas.ml" 129 2889 2901
type(
  fill_param option
)
"src/bootCanvas.ml" 130 2911 2925 "src/bootCanvas.ml" 130 2911 2926
type(
  fill_param
)
ident(
  int_ref x "src/bootCanvas.ml" 129 2889 2900 "src/bootCanvas.ml" 129 2889 2901
)
"src/bootCanvas.ml" 131 2932 2948 "src/bootCanvas.ml" 131 2932 2949
type(
  BootColor.t
)
ident(
  def c "src/bootCanvas.ml" 132 2953 2963 "src/bootCanvas.ml" 133 3014 3037
)
"src/bootCanvas.ml" 131 2932 2942 "src/bootCanvas.ml" 131 2932 2949
type(
  fill_param
)
"src/bootCanvas.ml" 132 2953 2967 "src/bootCanvas.ml" 132 2953 2968
type(
  unit
)
"src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 2974
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 3010
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 3010
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 2987
type(
  (< set : Js.js_string Js.t -> unit; .. > as 'n) Js.gen_prop
)
type(
  'n Js.gen_prop
)
"src/bootCanvas.ml" 132 2953 2992 "src/bootCanvas.ml" 132 2953 3007
type(
  BootColor.t -> Js.js_string Js.t
)
ident(
  ext_ref BootColor.to_js
)
"src/bootCanvas.ml" 132 2953 3008 "src/bootCanvas.ml" 132 2953 3009
type(
  BootColor.t
)
ident(
  int_ref c "src/bootCanvas.ml" 131 2932 2948 "src/bootCanvas.ml" 131 2932 2949
)
"src/bootCanvas.ml" 132 2953 2992 "src/bootCanvas.ml" 132 2953 3009
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 3010
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 3010
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 3010
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 3010
)
type(
  'm Js.t -> string -> Js.js_string Js.t -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 3010
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
type(
  'm -> 'n Js.gen_prop
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 2987
)
type(
  'm -> 'n Js.gen_prop
)
type(
  'm Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def res "src/bootCanvas.ml" 132 2953 3010 "src/bootCanvas.ml" 132 2953 3010
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 3010
)
type(
  'm Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 132 2953 2971 "src/bootCanvas.ml" 132 2953 3010
)
"src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3027
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3037
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3037
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3035
type(
  unit Js.meth
)
type(
  unit Js.meth
)
"src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3037
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3037
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3037
)
type(
  'm -> unit Js.meth
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3035
)
type(
  'm -> unit Js.meth
)
type(
  'm Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 133 3014 3037 "src/bootCanvas.ml" 133 3014 3037
)
type(
  'o
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3037
)
type(
  'm Js.t -> string -> Js.Unsafe.any array -> 'o
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'o
)
ident(
  def jsoo_res "src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3037
)
type(
  'm Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 133 3014 3024 "src/bootCanvas.ml" 133 3014 3037
)
"src/bootCanvas.ml" 132 2953 2963 "src/bootCanvas.ml" 133 3014 3037
type(
  unit
)
"src/bootCanvas.ml" 134 3038 3057 "src/bootCanvas.ml" 134 3038 3060
type(
  image
)
ident(
  def img "src/bootCanvas.ml" 135 3070 3080 "src/bootCanvas.ml" 137 3192 3216
)
"src/bootCanvas.ml" 134 3038 3062 "src/bootCanvas.ml" 134 3038 3065
type(
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ]
)
ident(
  def rep "src/bootCanvas.ml" 135 3070 3080 "src/bootCanvas.ml" 137 3192 3216
)
"src/bootCanvas.ml" 134 3038 3048 "src/bootCanvas.ml" 134 3038 3066
type(
  fill_param
)
"src/bootCanvas.ml" 135 3070 3084 "src/bootCanvas.ml" 135 3070 3091
type(
  'jsoo_arg
)
ident(
  def pattern "src/bootCanvas.ml" 136 3135 3145 "src/bootCanvas.ml" 137 3192 3216
)
"src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3097
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3114
type(
  image -> Js.js_string Js.t -> 'jsoo_arg Js.meth
)
type(
  image -> Js.js_string Js.t -> 'jsoo_arg Js.meth
)
"src/bootCanvas.ml" 135 3070 3115 "src/bootCanvas.ml" 135 3070 3118
type(
  'jsoo_arg
)
type(
  image
)
type(
  image
)
ident(
  int_ref jsoo_bcb1e9dd "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  image
)
type(
  image
)
ident(
  int_ref img "src/bootCanvas.ml" 134 3038 3057 "src/bootCanvas.ml" 134 3038 3060
)
"src/bootCanvas.ml" 135 3070 3120 "src/bootCanvas.ml" 135 3070 3126
type(
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ] -> Js.js_string Js.t
)
ident(
  int_ref repeat "src/bootCanvas.ml" 120 2661 2667 "src/bootCanvas.ml" 120 2661 2673
)
"src/bootCanvas.ml" 135 3070 3127 "src/bootCanvas.ml" 135 3070 3130
type(
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ]
)
ident(
  int_ref rep "src/bootCanvas.ml" 134 3038 3062 "src/bootCanvas.ml" 134 3038 3065
)
"src/bootCanvas.ml" 135 3070 3120 "src/bootCanvas.ml" 135 3070 3130
type(
  'jsoo_arg
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_80410c35 "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
ident(
  int_ref M.res "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  'm -> image -> Js.js_string Js.t -> 'jsoo_arg Js.meth
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3114
)
type(
  'm -> image -> Js.js_string Js.t -> 'jsoo_arg Js.meth
)
type(
  'm Js.t
)
type(
  'jsoo_arg
)
ident(
  def res "src/bootCanvas.ml" 135 3070 3131 "src/bootCanvas.ml" 135 3070 3131
)
type(
  'p
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_80410c35 "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  Js.js_string Js.t -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  image
)
ident(
  int_ref jsoo_bcb1e9dd "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  image -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  'm Js.t -> string -> Js.Unsafe.any array -> 'p
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'p
)
ident(
  def jsoo_res "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  'm Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_80410c35 "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
type(
  image
)
ident(
  def jsoo_bcb1e9dd "src/bootCanvas.ml" 135 3070 3094 "src/bootCanvas.ml" 135 3070 3131
)
"src/bootCanvas.ml" 136 3135 3149 "src/bootCanvas.ml" 136 3135 3150
type(
  unit
)
"src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3156
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3188
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3188
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3177
type(
  (< set : 'jsoo_arg -> unit; .. > as 'q) Js.gen_prop
)
type(
  'q Js.gen_prop
)
"src/bootCanvas.ml" 136 3135 3181 "src/bootCanvas.ml" 136 3135 3188
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3188
)
type(
  'jsoo_arg
)
ident(
  int_ref pattern "src/bootCanvas.ml" 135 3070 3084 "src/bootCanvas.ml" 135 3070 3091
)
"src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3188
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  'jsoo_arg
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3188
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3188
)
type(
  'm Js.t -> string -> 'jsoo_arg -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
ident(
  int_ref M.res "src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3188
)
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
type(
  'm -> 'q Js.gen_prop
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3177
)
type(
  'm -> 'q Js.gen_prop
)
type(
  'm Js.t
)
type(
  'jsoo_arg
)
ident(
  def res "src/bootCanvas.ml" 136 3135 3188 "src/bootCanvas.ml" 136 3135 3188
)
type(
  'jsoo_arg
)
type(
  'jsoo_arg
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3188
)
type(
  'm Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 136 3135 3153 "src/bootCanvas.ml" 136 3135 3188
)
"src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3205
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3216
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3216
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3213
type(
  unit Js.meth
)
type(
  unit Js.meth
)
"src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3216
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3216
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3216
)
type(
  'm -> unit Js.meth
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3213
)
type(
  'm -> unit Js.meth
)
type(
  'm Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 137 3192 3216 "src/bootCanvas.ml" 137 3192 3216
)
type(
  'r
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3216
)
type(
  'm Js.t -> string -> Js.Unsafe.any array -> 'r
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'r
)
ident(
  def jsoo_res "src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3216
)
type(
  'm Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 137 3192 3202 "src/bootCanvas.ml" 137 3192 3216
)
"src/bootCanvas.ml" 136 3135 3145 "src/bootCanvas.ml" 137 3192 3216
type(
  unit
)
"src/bootCanvas.ml" 135 3070 3080 "src/bootCanvas.ml" 137 3192 3216
type(
  unit
)
"src/bootCanvas.ml" 138 3217 3244 "src/bootCanvas.ml" 138 3217 3245
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 139 3271 3281 "src/bootCanvas.ml" 146 3538 3562
)
"src/bootCanvas.ml" 138 3217 3247 "src/bootCanvas.ml" 138 3217 3248
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 139 3271 3281 "src/bootCanvas.ml" 146 3538 3562
)
"src/bootCanvas.ml" 138 3217 3244 "src/bootCanvas.ml" 138 3217 3248
type(
  point
)
"src/bootCanvas.ml" 138 3217 3252 "src/bootCanvas.ml" 138 3217 3254
type(
  float
)
ident(
  def x2 "src/bootCanvas.ml" 139 3271 3281 "src/bootCanvas.ml" 146 3538 3562
)
"src/bootCanvas.ml" 138 3217 3256 "src/bootCanvas.ml" 138 3217 3258
type(
  float
)
ident(
  def y2 "src/bootCanvas.ml" 139 3271 3281 "src/bootCanvas.ml" 146 3538 3562
)
"src/bootCanvas.ml" 138 3217 3252 "src/bootCanvas.ml" 138 3217 3258
type(
  point
)
"src/bootCanvas.ml" 138 3217 3261 "src/bootCanvas.ml" 138 3217 3266
type(
  (float * BootColor.t) list
)
ident(
  def steps "src/bootCanvas.ml" 139 3271 3281 "src/bootCanvas.ml" 146 3538 3562
)
"src/bootCanvas.ml" 138 3217 3227 "src/bootCanvas.ml" 138 3217 3267
type(
  fill_param
)
"src/bootCanvas.ml" 139 3271 3285 "src/bootCanvas.ml" 139 3271 3289
type(
  'l Js.t
)
ident(
  def grad "src/bootCanvas.ml" 140 3337 3347 "src/bootCanvas.ml" 146 3538 3562
)
"src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3295
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3319
type(
  float -> float -> float -> float -> 'l Js.t Js.meth
)
type(
  float -> float -> float -> float -> 'l Js.t Js.meth
)
"src/bootCanvas.ml" 139 3271 3320 "src/bootCanvas.ml" 139 3271 3321
type(
  'l Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_c11647d6 "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 138 3217 3244 "src/bootCanvas.ml" 138 3217 3245
)
"src/bootCanvas.ml" 139 3271 3323 "src/bootCanvas.ml" 139 3271 3324
type(
  'l Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_a030bfac "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 138 3217 3247 "src/bootCanvas.ml" 138 3217 3248
)
"src/bootCanvas.ml" 139 3271 3326 "src/bootCanvas.ml" 139 3271 3328
type(
  'l Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_a4c2a144 "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float
)
type(
  float
)
ident(
  int_ref x2 "src/bootCanvas.ml" 138 3217 3252 "src/bootCanvas.ml" 138 3217 3254
)
"src/bootCanvas.ml" 139 3271 3330 "src/bootCanvas.ml" 139 3271 3332
type(
  'l Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_7bc72a9e "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float
)
type(
  float
)
ident(
  int_ref y2 "src/bootCanvas.ml" 138 3217 3256 "src/bootCanvas.ml" 138 3217 3258
)
"src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  'm -> float -> float -> float -> float -> 'l Js.t Js.meth
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3319
)
type(
  'm -> float -> float -> float -> float -> 'l Js.t Js.meth
)
type(
  'm Js.t
)
type(
  'l Js.t
)
ident(
  def res "src/bootCanvas.ml" 139 3271 3333 "src/bootCanvas.ml" 139 3271 3333
)
type(
  's
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_7bc72a9e "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_a4c2a144 "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_a030bfac "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_c11647d6 "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  'm Js.t -> string -> Js.Unsafe.any array -> 's
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  's
)
ident(
  def jsoo_res "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  'm Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float
)
ident(
  def jsoo_7bc72a9e "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float
)
ident(
  def jsoo_a4c2a144 "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float
)
ident(
  def jsoo_a030bfac "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
type(
  float
)
ident(
  def jsoo_c11647d6 "src/bootCanvas.ml" 139 3271 3292 "src/bootCanvas.ml" 139 3271 3333
)
"src/bootCanvas.ml" 140 3337 3351 "src/bootCanvas.ml" 140 3337 3352
type(
  unit
)
"src/bootCanvas.ml" 141 3355 3367 "src/bootCanvas.ml" 141 3355 3376
type(
  (float * BootColor.t -> unit) -> (float * BootColor.t) list -> unit
)
ident(
  ext_ref List.iter
)
"src/bootCanvas.ml" 142 3377 3397 "src/bootCanvas.ml" 142 3377 3398
type(
  float
)
ident(
  def i "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
"src/bootCanvas.ml" 142 3377 3400 "src/bootCanvas.ml" 142 3377 3401
type(
  BootColor.t
)
ident(
  def s "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
"src/bootCanvas.ml" 142 3377 3397 "src/bootCanvas.ml" 142 3377 3401
type(
  float * BootColor.t
)
"src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3410
type(
  'l
)
ident(
  int_ref x "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  'l Js.t
)
ident(
  int_ref grad "src/bootCanvas.ml" 139 3271 3285 "src/bootCanvas.ml" 139 3271 3289
)
"src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3426
type(
  float -> Js.js_string Js.t -> unit Js.meth
)
type(
  float -> Js.js_string Js.t -> unit Js.meth
)
"src/bootCanvas.ml" 142 3377 3427 "src/bootCanvas.ml" 142 3377 3428
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_a78544e1 "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  float
)
type(
  float
)
ident(
  int_ref i "src/bootCanvas.ml" 142 3377 3397 "src/bootCanvas.ml" 142 3377 3398
)
"src/bootCanvas.ml" 142 3377 3430 "src/bootCanvas.ml" 142 3377 3445
type(
  BootColor.t -> Js.js_string Js.t
)
ident(
  ext_ref BootColor.to_js
)
"src/bootCanvas.ml" 142 3377 3446 "src/bootCanvas.ml" 142 3377 3447
type(
  BootColor.t
)
ident(
  int_ref s "src/bootCanvas.ml" 142 3377 3400 "src/bootCanvas.ml" 142 3377 3401
)
"src/bootCanvas.ml" 142 3377 3430 "src/bootCanvas.ml" 142 3377 3447
type(
  unit
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_2772c6f9 "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  'l -> float -> Js.js_string Js.t -> unit Js.meth
)
type(
  'l
)
ident(
  def x "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3426
)
type(
  'l -> float -> Js.js_string Js.t -> unit Js.meth
)
type(
  'l Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 142 3377 3448 "src/bootCanvas.ml" 142 3377 3448
)
type(
  't
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_2772c6f9 "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  Js.js_string Js.t -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_a78544e1 "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  'l Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  'l Js.t -> string -> Js.Unsafe.any array -> 't
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  't
)
ident(
  def jsoo_res "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  'l Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_2772c6f9 "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
type(
  float
)
ident(
  def jsoo_a78544e1 "src/bootCanvas.ml" 142 3377 3406 "src/bootCanvas.ml" 142 3377 3448
)
"src/bootCanvas.ml" 142 3377 3396 "src/bootCanvas.ml" 142 3377 3448
type(
  float * BootColor.t -> unit
)
"src/bootCanvas.ml" 143 3450 3464 "src/bootCanvas.ml" 143 3450 3469
type(
  (float * BootColor.t) list
)
ident(
  int_ref steps "src/bootCanvas.ml" 138 3217 3261 "src/bootCanvas.ml" 138 3217 3266
)
"src/bootCanvas.ml" 141 3355 3367 "src/bootCanvas.ml" 143 3450 3469
type(
  unit
)
"src/bootCanvas.ml" 145 3483 3497 "src/bootCanvas.ml" 145 3483 3498
type(
  unit
)
"src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3504
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3534
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3534
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3526
type(
  (< set : 'l Js.t -> unit; .. > as 'u) Js.gen_prop
)
type(
  'u Js.gen_prop
)
"src/bootCanvas.ml" 145 3483 3530 "src/bootCanvas.ml" 145 3483 3534
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3534
)
type(
  'l Js.t
)
ident(
  int_ref grad "src/bootCanvas.ml" 139 3271 3285 "src/bootCanvas.ml" 139 3271 3289
)
"src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3534
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  'l Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3534
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3534
)
type(
  'm Js.t -> string -> 'l Js.t -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3534
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'm -> 'u Js.gen_prop
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3526
)
type(
  'm -> 'u Js.gen_prop
)
type(
  'm Js.t
)
type(
  'l Js.t
)
ident(
  def res "src/bootCanvas.ml" 145 3483 3534 "src/bootCanvas.ml" 145 3483 3534
)
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3534
)
type(
  'm Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 145 3483 3501 "src/bootCanvas.ml" 145 3483 3534
)
"src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3551
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3562
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3562
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3559
type(
  unit Js.meth
)
type(
  unit Js.meth
)
"src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3562
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3562
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3562
)
type(
  'm -> unit Js.meth
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3559
)
type(
  'm -> unit Js.meth
)
type(
  'm Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 146 3538 3562 "src/bootCanvas.ml" 146 3538 3562
)
type(
  'v
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3562
)
type(
  'm Js.t -> string -> Js.Unsafe.any array -> 'v
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'v
)
ident(
  def jsoo_res "src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3562
)
type(
  'm Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 146 3538 3548 "src/bootCanvas.ml" 146 3538 3562
)
"src/bootCanvas.ml" 145 3483 3493 "src/bootCanvas.ml" 146 3538 3562
type(
  unit
)
"src/bootCanvas.ml" 140 3337 3347 "src/bootCanvas.ml" 146 3538 3562
type(
  unit
)
"src/bootCanvas.ml" 139 3271 3281 "src/bootCanvas.ml" 146 3538 3562
type(
  unit
)
"src/bootCanvas.ml" 147 3563 3590 "src/bootCanvas.ml" 147 3563 3591
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 148 3624 3634 "src/bootCanvas.ml" 155 3899 3923
)
"src/bootCanvas.ml" 147 3563 3593 "src/bootCanvas.ml" 147 3563 3594
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 148 3624 3634 "src/bootCanvas.ml" 155 3899 3923
)
"src/bootCanvas.ml" 147 3563 3590 "src/bootCanvas.ml" 147 3563 3594
type(
  point
)
"src/bootCanvas.ml" 147 3563 3598 "src/bootCanvas.ml" 147 3563 3600
type(
  float
)
ident(
  def x2 "src/bootCanvas.ml" 148 3624 3634 "src/bootCanvas.ml" 155 3899 3923
)
"src/bootCanvas.ml" 147 3563 3602 "src/bootCanvas.ml" 147 3563 3604
type(
  float
)
ident(
  def y2 "src/bootCanvas.ml" 148 3624 3634 "src/bootCanvas.ml" 155 3899 3923
)
"src/bootCanvas.ml" 147 3563 3598 "src/bootCanvas.ml" 147 3563 3604
type(
  point
)
"src/bootCanvas.ml" 147 3563 3607 "src/bootCanvas.ml" 147 3563 3608
type(
  float
)
ident(
  def r "src/bootCanvas.ml" 148 3624 3634 "src/bootCanvas.ml" 155 3899 3923
)
"src/bootCanvas.ml" 147 3563 3610 "src/bootCanvas.ml" 147 3563 3612
type(
  float
)
ident(
  def r2 "src/bootCanvas.ml" 148 3624 3634 "src/bootCanvas.ml" 155 3899 3923
)
"src/bootCanvas.ml" 147 3563 3614 "src/bootCanvas.ml" 147 3563 3619
type(
  (float * BootColor.t) list
)
ident(
  def steps "src/bootCanvas.ml" 148 3624 3634 "src/bootCanvas.ml" 155 3899 3923
)
"src/bootCanvas.ml" 147 3563 3573 "src/bootCanvas.ml" 147 3563 3620
type(
  fill_param
)
"src/bootCanvas.ml" 148 3624 3638 "src/bootCanvas.ml" 148 3624 3642
type(
  'l Js.t
)
ident(
  def grad "src/bootCanvas.ml" 149 3697 3707 "src/bootCanvas.ml" 155 3899 3923
)
"src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3648
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3672
type(
  float -> float -> float -> float -> float -> float -> 'l Js.t Js.meth
)
type(
  float -> float -> float -> float -> float -> float -> 'l Js.t Js.meth
)
"src/bootCanvas.ml" 148 3624 3673 "src/bootCanvas.ml" 148 3624 3674
type(
  'l Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_0c2c3e28 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 147 3563 3590 "src/bootCanvas.ml" 147 3563 3591
)
"src/bootCanvas.ml" 148 3624 3676 "src/bootCanvas.ml" 148 3624 3677
type(
  'l Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_92b58168 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 147 3563 3593 "src/bootCanvas.ml" 147 3563 3594
)
"src/bootCanvas.ml" 148 3624 3679 "src/bootCanvas.ml" 148 3624 3680
type(
  'l Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_ad8872a8 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
type(
  float
)
ident(
  int_ref r "src/bootCanvas.ml" 147 3563 3607 "src/bootCanvas.ml" 147 3563 3608
)
"src/bootCanvas.ml" 148 3624 3682 "src/bootCanvas.ml" 148 3624 3684
type(
  'l Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_6bc4b4e3 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
type(
  float
)
ident(
  int_ref x2 "src/bootCanvas.ml" 147 3563 3598 "src/bootCanvas.ml" 147 3563 3600
)
"src/bootCanvas.ml" 148 3624 3686 "src/bootCanvas.ml" 148 3624 3688
type(
  'l Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_33fd16a3 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
type(
  float
)
ident(
  int_ref y2 "src/bootCanvas.ml" 147 3563 3602 "src/bootCanvas.ml" 147 3563 3604
)
"src/bootCanvas.ml" 148 3624 3690 "src/bootCanvas.ml" 148 3624 3692
type(
  'l Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_0f6fa25c "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
type(
  float
)
ident(
  int_ref r2 "src/bootCanvas.ml" 147 3563 3610 "src/bootCanvas.ml" 147 3563 3612
)
"src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  'm -> float -> float -> float -> float -> float -> float -> 'l Js.t Js.meth
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3672
)
type(
  'm -> float -> float -> float -> float -> float -> float -> 'l Js.t Js.meth
)
type(
  'm Js.t
)
type(
  'l Js.t
)
ident(
  def res "src/bootCanvas.ml" 148 3624 3693 "src/bootCanvas.ml" 148 3624 3693
)
type(
  'w
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_0f6fa25c "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_33fd16a3 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_6bc4b4e3 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_ad8872a8 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_92b58168 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_0c2c3e28 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  'm Js.t -> string -> Js.Unsafe.any array -> 'w
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'w
)
ident(
  def jsoo_res "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  'm Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
ident(
  def jsoo_0f6fa25c "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
ident(
  def jsoo_33fd16a3 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
ident(
  def jsoo_6bc4b4e3 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
ident(
  def jsoo_ad8872a8 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
ident(
  def jsoo_92b58168 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
type(
  float
)
ident(
  def jsoo_0c2c3e28 "src/bootCanvas.ml" 148 3624 3645 "src/bootCanvas.ml" 148 3624 3693
)
"src/bootCanvas.ml" 149 3697 3711 "src/bootCanvas.ml" 149 3697 3712
type(
  unit
)
"src/bootCanvas.ml" 150 3715 3727 "src/bootCanvas.ml" 150 3715 3736
type(
  (float * BootColor.t -> unit) -> (float * BootColor.t) list -> unit
)
ident(
  ext_ref List.iter
)
"src/bootCanvas.ml" 151 3737 3757 "src/bootCanvas.ml" 151 3737 3758
type(
  float
)
ident(
  def i "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
"src/bootCanvas.ml" 151 3737 3760 "src/bootCanvas.ml" 151 3737 3761
type(
  BootColor.t
)
ident(
  def s "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
"src/bootCanvas.ml" 151 3737 3757 "src/bootCanvas.ml" 151 3737 3761
type(
  float * BootColor.t
)
"src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3770
type(
  'l
)
ident(
  int_ref x "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  'l Js.t
)
ident(
  int_ref grad "src/bootCanvas.ml" 148 3624 3638 "src/bootCanvas.ml" 148 3624 3642
)
"src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3786
type(
  float -> Js.js_string Js.t -> unit Js.meth
)
type(
  float -> Js.js_string Js.t -> unit Js.meth
)
"src/bootCanvas.ml" 151 3737 3787 "src/bootCanvas.ml" 151 3737 3788
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_b72254d0 "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  float
)
type(
  float
)
ident(
  int_ref i "src/bootCanvas.ml" 151 3737 3757 "src/bootCanvas.ml" 151 3737 3758
)
"src/bootCanvas.ml" 151 3737 3790 "src/bootCanvas.ml" 151 3737 3805
type(
  BootColor.t -> Js.js_string Js.t
)
ident(
  ext_ref BootColor.to_js
)
"src/bootCanvas.ml" 151 3737 3806 "src/bootCanvas.ml" 151 3737 3807
type(
  BootColor.t
)
ident(
  int_ref s "src/bootCanvas.ml" 151 3737 3760 "src/bootCanvas.ml" 151 3737 3761
)
"src/bootCanvas.ml" 151 3737 3790 "src/bootCanvas.ml" 151 3737 3807
type(
  unit
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_657dbd2f "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  'l -> float -> Js.js_string Js.t -> unit Js.meth
)
type(
  'l
)
ident(
  def x "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3786
)
type(
  'l -> float -> Js.js_string Js.t -> unit Js.meth
)
type(
  'l Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 151 3737 3808 "src/bootCanvas.ml" 151 3737 3808
)
type(
  'x
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_657dbd2f "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  Js.js_string Js.t -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_b72254d0 "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  'l Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  'l Js.t -> string -> Js.Unsafe.any array -> 'x
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'x
)
ident(
  def jsoo_res "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  'l Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_657dbd2f "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
type(
  float
)
ident(
  def jsoo_b72254d0 "src/bootCanvas.ml" 151 3737 3766 "src/bootCanvas.ml" 151 3737 3808
)
"src/bootCanvas.ml" 151 3737 3756 "src/bootCanvas.ml" 151 3737 3808
type(
  float * BootColor.t -> unit
)
"src/bootCanvas.ml" 152 3810 3824 "src/bootCanvas.ml" 152 3810 3829
type(
  (float * BootColor.t) list
)
ident(
  int_ref steps "src/bootCanvas.ml" 147 3563 3614 "src/bootCanvas.ml" 147 3563 3619
)
"src/bootCanvas.ml" 150 3715 3727 "src/bootCanvas.ml" 152 3810 3829
type(
  unit
)
"src/bootCanvas.ml" 154 3844 3858 "src/bootCanvas.ml" 154 3844 3859
type(
  unit
)
"src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3865
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3895
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3895
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3887
type(
  'u Js.gen_prop
)
type(
  'u Js.gen_prop
)
"src/bootCanvas.ml" 154 3844 3891 "src/bootCanvas.ml" 154 3844 3895
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3895
)
type(
  'l Js.t
)
ident(
  int_ref grad "src/bootCanvas.ml" 148 3624 3638 "src/bootCanvas.ml" 148 3624 3642
)
"src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3895
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  'l Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3895
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3895
)
type(
  'm Js.t -> string -> 'l Js.t -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3895
)
type(
  'l Js.t
)
type(
  'l Js.t
)
type(
  'm -> 'u Js.gen_prop
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3887
)
type(
  'm -> 'u Js.gen_prop
)
type(
  'm Js.t
)
type(
  'l Js.t
)
ident(
  def res "src/bootCanvas.ml" 154 3844 3895 "src/bootCanvas.ml" 154 3844 3895
)
type(
  'l Js.t
)
type(
  'l Js.t
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3895
)
type(
  'm Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 154 3844 3862 "src/bootCanvas.ml" 154 3844 3895
)
"src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3912
type(
  'm
)
ident(
  int_ref x "src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3923
)
type(
  'm Js.t
)
type(
  'm Js.t
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3923
)
type(
  'm Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 128 2846 2877
)
"src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3920
type(
  unit Js.meth
)
type(
  unit Js.meth
)
"src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3923
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3923
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3923
)
type(
  'm -> unit Js.meth
)
type(
  'm
)
ident(
  def x "src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3920
)
type(
  'm -> unit Js.meth
)
type(
  'm Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 155 3899 3923 "src/bootCanvas.ml" 155 3899 3923
)
type(
  'y
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  'm Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3923
)
type(
  'm Js.t -> string -> Js.Unsafe.any array -> 'y
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'y
)
ident(
  def jsoo_res "src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3923
)
type(
  'm Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 155 3899 3909 "src/bootCanvas.ml" 155 3899 3923
)
"src/bootCanvas.ml" 154 3844 3854 "src/bootCanvas.ml" 155 3899 3923
type(
  unit
)
"src/bootCanvas.ml" 149 3697 3707 "src/bootCanvas.ml" 155 3899 3923
type(
  unit
)
"src/bootCanvas.ml" 148 3624 3634 "src/bootCanvas.ml" 155 3899 3923
type(
  unit
)
"src/bootCanvas.ml" 130 2911 2919 "src/bootCanvas.ml" 155 3899 3923
type(
  unit
)
"src/bootCanvas.ml" 157 3934 3940 "src/bootCanvas.ml" 157 3934 3944
type(
  fill_param option
)
"src/bootCanvas.ml" 157 3934 3948 "src/bootCanvas.ml" 157 3934 3950
type(
  unit
)
"src/bootCanvas.ml" 128 2846 2880 "src/bootCanvas.ml" 157 3934 3950
type(
  fill_param option -> unit
)
"src/bootCanvas.ml" 128 2846 2874 "src/bootCanvas.ml" 157 3934 3950
type(
  'm Js.t -> fill_param option -> unit
)
"src/bootCanvas.ml" 159 3952 3958 "src/bootCanvas.ml" 159 3952 3981
type(
  < createLinearGradient : float ->
                           float ->
                           float ->
                           float ->
                           (< addColorStop : float ->
                                             Js.js_string Js.t ->
                                             unit Js.meth;
                              .. >
                            as 'z)
                           Js.t Js.meth;
    createPattern : image -> Js.js_string Js.t -> 'jsoo_arg0 Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float -> float -> float -> 'z Js.t Js.meth;
    stroke : unit Js.meth;
    strokeStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop;
    strokeStyle_gradient : < set : 'z Js.t -> unit; .. > Js.gen_prop;
    strokeStyle_pattern : < set : 'jsoo_arg0 -> unit; .. > Js.gen_prop; .. >
  Js.t -> fill_param option -> unit
)
ident(
  def apply_filler_for_stroke "src/bootCanvas.ml" 190 5078 5080 "src/bootCanvas.ml" 195 5193 5196
)
"src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
type(
  (< createLinearGradient : float ->
                            float -> float -> float -> 'z Js.t Js.meth;
     createPattern : image -> Js.js_string Js.t -> 'jsoo_arg0 Js.meth;
     createRadialGradient : float ->
                            float ->
                            float ->
                            float -> float -> float -> 'z Js.t Js.meth;
     stroke : unit Js.meth;
     strokeStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop;
     strokeStyle_gradient : < set : 'z Js.t -> unit; .. > Js.gen_prop;
     strokeStyle_pattern : < set : 'jsoo_arg0 -> unit; .. > Js.gen_prop; .. >
   as 'a1)
  Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 159 3952 3988 "src/bootCanvas.ml" 188 5060 5076
)
"src/bootCanvas.ml" 160 3997 4008 "src/bootCanvas.ml" 160 3997 4009
type(
  fill_param
)
ident(
  def x "src/bootCanvas.ml" 161 4019 4027 "src/bootCanvas.ml" 186 5023 5049
)
"src/bootCanvas.ml" 160 3997 4003 "src/bootCanvas.ml" 160 3997 4009
type(
  fill_param option
)
"src/bootCanvas.ml" 161 4019 4033 "src/bootCanvas.ml" 161 4019 4034
type(
  fill_param
)
ident(
  int_ref x "src/bootCanvas.ml" 160 3997 4008 "src/bootCanvas.ml" 160 3997 4009
)
"src/bootCanvas.ml" 162 4040 4056 "src/bootCanvas.ml" 162 4040 4057
type(
  BootColor.t
)
ident(
  def c "src/bootCanvas.ml" 163 4061 4071 "src/bootCanvas.ml" 164 4124 4150
)
"src/bootCanvas.ml" 162 4040 4050 "src/bootCanvas.ml" 162 4040 4057
type(
  fill_param
)
"src/bootCanvas.ml" 163 4061 4075 "src/bootCanvas.ml" 163 4061 4076
type(
  unit
)
"src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4082
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4120
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4120
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4097
type(
  (< set : Js.js_string Js.t -> unit; .. > as 'b1) Js.gen_prop
)
type(
  'b1 Js.gen_prop
)
"src/bootCanvas.ml" 163 4061 4102 "src/bootCanvas.ml" 163 4061 4117
type(
  BootColor.t -> Js.js_string Js.t
)
ident(
  ext_ref BootColor.to_js
)
"src/bootCanvas.ml" 163 4061 4118 "src/bootCanvas.ml" 163 4061 4119
type(
  BootColor.t
)
ident(
  int_ref c "src/bootCanvas.ml" 162 4040 4056 "src/bootCanvas.ml" 162 4040 4057
)
"src/bootCanvas.ml" 163 4061 4102 "src/bootCanvas.ml" 163 4061 4119
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4120
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4120
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4120
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4120
)
type(
  'a1 Js.t -> string -> Js.js_string Js.t -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4120
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
type(
  'a1 -> 'b1 Js.gen_prop
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4097
)
type(
  'a1 -> 'b1 Js.gen_prop
)
type(
  'a1 Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def res "src/bootCanvas.ml" 163 4061 4120 "src/bootCanvas.ml" 163 4061 4120
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4120
)
type(
  'a1 Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 163 4061 4079 "src/bootCanvas.ml" 163 4061 4120
)
"src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4137
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4150
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4150
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4147
type(
  unit Js.meth
)
type(
  unit Js.meth
)
"src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4150
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4150
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4150
)
type(
  'a1 -> unit Js.meth
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4147
)
type(
  'a1 -> unit Js.meth
)
type(
  'a1 Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 164 4124 4150 "src/bootCanvas.ml" 164 4124 4150
)
type(
  'c1
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4150
)
type(
  'a1 Js.t -> string -> Js.Unsafe.any array -> 'c1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'c1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4150
)
type(
  'a1 Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 164 4124 4134 "src/bootCanvas.ml" 164 4124 4150
)
"src/bootCanvas.ml" 163 4061 4071 "src/bootCanvas.ml" 164 4124 4150
type(
  unit
)
"src/bootCanvas.ml" 165 4151 4170 "src/bootCanvas.ml" 165 4151 4173
type(
  image
)
ident(
  def img "src/bootCanvas.ml" 166 4183 4193 "src/bootCanvas.ml" 168 4307 4333
)
"src/bootCanvas.ml" 165 4151 4175 "src/bootCanvas.ml" 165 4151 4178
type(
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ]
)
ident(
  def rep "src/bootCanvas.ml" 166 4183 4193 "src/bootCanvas.ml" 168 4307 4333
)
"src/bootCanvas.ml" 165 4151 4161 "src/bootCanvas.ml" 165 4151 4179
type(
  fill_param
)
"src/bootCanvas.ml" 166 4183 4197 "src/bootCanvas.ml" 166 4183 4204
type(
  'jsoo_arg0
)
ident(
  def pattern "src/bootCanvas.ml" 167 4248 4258 "src/bootCanvas.ml" 168 4307 4333
)
"src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4210
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4227
type(
  image -> Js.js_string Js.t -> 'jsoo_arg0 Js.meth
)
type(
  image -> Js.js_string Js.t -> 'jsoo_arg0 Js.meth
)
"src/bootCanvas.ml" 166 4183 4228 "src/bootCanvas.ml" 166 4183 4231
type(
  'jsoo_arg0
)
type(
  image
)
type(
  image
)
ident(
  int_ref jsoo_4d928729 "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  image
)
type(
  image
)
ident(
  int_ref img "src/bootCanvas.ml" 165 4151 4170 "src/bootCanvas.ml" 165 4151 4173
)
"src/bootCanvas.ml" 166 4183 4233 "src/bootCanvas.ml" 166 4183 4239
type(
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ] -> Js.js_string Js.t
)
ident(
  int_ref repeat "src/bootCanvas.ml" 120 2661 2667 "src/bootCanvas.ml" 120 2661 2673
)
"src/bootCanvas.ml" 166 4183 4240 "src/bootCanvas.ml" 166 4183 4243
type(
  [ `No_repeat | `Repeat | `Repeat_x | `Repeat_y ]
)
ident(
  int_ref rep "src/bootCanvas.ml" 165 4151 4175 "src/bootCanvas.ml" 165 4151 4178
)
"src/bootCanvas.ml" 166 4183 4233 "src/bootCanvas.ml" 166 4183 4243
type(
  'jsoo_arg0
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_d42a8cd6 "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
ident(
  int_ref M.res "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  'a1 -> image -> Js.js_string Js.t -> 'jsoo_arg0 Js.meth
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4227
)
type(
  'a1 -> image -> Js.js_string Js.t -> 'jsoo_arg0 Js.meth
)
type(
  'a1 Js.t
)
type(
  'jsoo_arg0
)
ident(
  def res "src/bootCanvas.ml" 166 4183 4244 "src/bootCanvas.ml" 166 4183 4244
)
type(
  'd1
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_d42a8cd6 "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  Js.js_string Js.t -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  image
)
ident(
  int_ref jsoo_4d928729 "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  image -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  'a1 Js.t -> string -> Js.Unsafe.any array -> 'd1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'd1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  'a1 Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_d42a8cd6 "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
type(
  image
)
ident(
  def jsoo_4d928729 "src/bootCanvas.ml" 166 4183 4207 "src/bootCanvas.ml" 166 4183 4244
)
"src/bootCanvas.ml" 167 4248 4262 "src/bootCanvas.ml" 167 4248 4263
type(
  unit
)
"src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4269
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4303
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4303
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4292
type(
  (< set : 'jsoo_arg0 -> unit; .. > as 'e1) Js.gen_prop
)
type(
  'e1 Js.gen_prop
)
"src/bootCanvas.ml" 167 4248 4296 "src/bootCanvas.ml" 167 4248 4303
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4303
)
type(
  'jsoo_arg0
)
ident(
  int_ref pattern "src/bootCanvas.ml" 166 4183 4197 "src/bootCanvas.ml" 166 4183 4204
)
"src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4303
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  'jsoo_arg0
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4303
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4303
)
type(
  'a1 Js.t -> string -> 'jsoo_arg0 -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
ident(
  int_ref M.res "src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4303
)
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
type(
  'a1 -> 'e1 Js.gen_prop
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4292
)
type(
  'a1 -> 'e1 Js.gen_prop
)
type(
  'a1 Js.t
)
type(
  'jsoo_arg0
)
ident(
  def res "src/bootCanvas.ml" 167 4248 4303 "src/bootCanvas.ml" 167 4248 4303
)
type(
  'jsoo_arg0
)
type(
  'jsoo_arg0
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4303
)
type(
  'a1 Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 167 4248 4266 "src/bootCanvas.ml" 167 4248 4303
)
"src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4320
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4333
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4333
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4330
type(
  unit Js.meth
)
type(
  unit Js.meth
)
"src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4333
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4333
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4333
)
type(
  'a1 -> unit Js.meth
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4330
)
type(
  'a1 -> unit Js.meth
)
type(
  'a1 Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 168 4307 4333 "src/bootCanvas.ml" 168 4307 4333
)
type(
  'f1
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4333
)
type(
  'a1 Js.t -> string -> Js.Unsafe.any array -> 'f1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'f1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4333
)
type(
  'a1 Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 168 4307 4317 "src/bootCanvas.ml" 168 4307 4333
)
"src/bootCanvas.ml" 167 4248 4258 "src/bootCanvas.ml" 168 4307 4333
type(
  unit
)
"src/bootCanvas.ml" 166 4183 4193 "src/bootCanvas.ml" 168 4307 4333
type(
  unit
)
"src/bootCanvas.ml" 169 4334 4361 "src/bootCanvas.ml" 169 4334 4362
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 170 4388 4398 "src/bootCanvas.ml" 177 4658 4684
)
"src/bootCanvas.ml" 169 4334 4364 "src/bootCanvas.ml" 169 4334 4365
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 170 4388 4398 "src/bootCanvas.ml" 177 4658 4684
)
"src/bootCanvas.ml" 169 4334 4361 "src/bootCanvas.ml" 169 4334 4365
type(
  point
)
"src/bootCanvas.ml" 169 4334 4369 "src/bootCanvas.ml" 169 4334 4371
type(
  float
)
ident(
  def x2 "src/bootCanvas.ml" 170 4388 4398 "src/bootCanvas.ml" 177 4658 4684
)
"src/bootCanvas.ml" 169 4334 4373 "src/bootCanvas.ml" 169 4334 4375
type(
  float
)
ident(
  def y2 "src/bootCanvas.ml" 170 4388 4398 "src/bootCanvas.ml" 177 4658 4684
)
"src/bootCanvas.ml" 169 4334 4369 "src/bootCanvas.ml" 169 4334 4375
type(
  point
)
"src/bootCanvas.ml" 169 4334 4378 "src/bootCanvas.ml" 169 4334 4383
type(
  (float * BootColor.t) list
)
ident(
  def steps "src/bootCanvas.ml" 170 4388 4398 "src/bootCanvas.ml" 177 4658 4684
)
"src/bootCanvas.ml" 169 4334 4344 "src/bootCanvas.ml" 169 4334 4384
type(
  fill_param
)
"src/bootCanvas.ml" 170 4388 4402 "src/bootCanvas.ml" 170 4388 4406
type(
  'z Js.t
)
ident(
  def grad "src/bootCanvas.ml" 171 4454 4464 "src/bootCanvas.ml" 177 4658 4684
)
"src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4412
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4436
type(
  float -> float -> float -> float -> 'z Js.t Js.meth
)
type(
  float -> float -> float -> float -> 'z Js.t Js.meth
)
"src/bootCanvas.ml" 170 4388 4437 "src/bootCanvas.ml" 170 4388 4438
type(
  'z Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_dd1ffa88 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 169 4334 4361 "src/bootCanvas.ml" 169 4334 4362
)
"src/bootCanvas.ml" 170 4388 4440 "src/bootCanvas.ml" 170 4388 4441
type(
  'z Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_6c9ec695 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 169 4334 4364 "src/bootCanvas.ml" 169 4334 4365
)
"src/bootCanvas.ml" 170 4388 4443 "src/bootCanvas.ml" 170 4388 4445
type(
  'z Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_0c5647b7 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float
)
type(
  float
)
ident(
  int_ref x2 "src/bootCanvas.ml" 169 4334 4369 "src/bootCanvas.ml" 169 4334 4371
)
"src/bootCanvas.ml" 170 4388 4447 "src/bootCanvas.ml" 170 4388 4449
type(
  'z Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_5a48a987 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float
)
type(
  float
)
ident(
  int_ref y2 "src/bootCanvas.ml" 169 4334 4373 "src/bootCanvas.ml" 169 4334 4375
)
"src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  'a1 -> float -> float -> float -> float -> 'z Js.t Js.meth
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4436
)
type(
  'a1 -> float -> float -> float -> float -> 'z Js.t Js.meth
)
type(
  'a1 Js.t
)
type(
  'z Js.t
)
ident(
  def res "src/bootCanvas.ml" 170 4388 4450 "src/bootCanvas.ml" 170 4388 4450
)
type(
  'g1
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_5a48a987 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_0c5647b7 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_6c9ec695 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_dd1ffa88 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  'a1 Js.t -> string -> Js.Unsafe.any array -> 'g1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'g1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  'a1 Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float
)
ident(
  def jsoo_5a48a987 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float
)
ident(
  def jsoo_0c5647b7 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float
)
ident(
  def jsoo_6c9ec695 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
type(
  float
)
ident(
  def jsoo_dd1ffa88 "src/bootCanvas.ml" 170 4388 4409 "src/bootCanvas.ml" 170 4388 4450
)
"src/bootCanvas.ml" 171 4454 4468 "src/bootCanvas.ml" 171 4454 4469
type(
  unit
)
"src/bootCanvas.ml" 172 4472 4484 "src/bootCanvas.ml" 172 4472 4493
type(
  (float * BootColor.t -> unit) -> (float * BootColor.t) list -> unit
)
ident(
  ext_ref List.iter
)
"src/bootCanvas.ml" 173 4494 4514 "src/bootCanvas.ml" 173 4494 4515
type(
  float
)
ident(
  def i "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
"src/bootCanvas.ml" 173 4494 4517 "src/bootCanvas.ml" 173 4494 4518
type(
  BootColor.t
)
ident(
  def s "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
"src/bootCanvas.ml" 173 4494 4514 "src/bootCanvas.ml" 173 4494 4518
type(
  float * BootColor.t
)
"src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4527
type(
  'z
)
ident(
  int_ref x "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  'z Js.t
)
ident(
  int_ref grad "src/bootCanvas.ml" 170 4388 4402 "src/bootCanvas.ml" 170 4388 4406
)
"src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4543
type(
  float -> Js.js_string Js.t -> unit Js.meth
)
type(
  float -> Js.js_string Js.t -> unit Js.meth
)
"src/bootCanvas.ml" 173 4494 4544 "src/bootCanvas.ml" 173 4494 4545
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_3bf4f782 "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  float
)
type(
  float
)
ident(
  int_ref i "src/bootCanvas.ml" 173 4494 4514 "src/bootCanvas.ml" 173 4494 4515
)
"src/bootCanvas.ml" 173 4494 4547 "src/bootCanvas.ml" 173 4494 4562
type(
  BootColor.t -> Js.js_string Js.t
)
ident(
  ext_ref BootColor.to_js
)
"src/bootCanvas.ml" 173 4494 4563 "src/bootCanvas.ml" 173 4494 4564
type(
  BootColor.t
)
ident(
  int_ref s "src/bootCanvas.ml" 173 4494 4517 "src/bootCanvas.ml" 173 4494 4518
)
"src/bootCanvas.ml" 173 4494 4547 "src/bootCanvas.ml" 173 4494 4564
type(
  unit
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_98db9fd1 "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  'z -> float -> Js.js_string Js.t -> unit Js.meth
)
type(
  'z
)
ident(
  def x "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4543
)
type(
  'z -> float -> Js.js_string Js.t -> unit Js.meth
)
type(
  'z Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 173 4494 4565 "src/bootCanvas.ml" 173 4494 4565
)
type(
  'h1
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_98db9fd1 "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  Js.js_string Js.t -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_3bf4f782 "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  'z Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  'z Js.t -> string -> Js.Unsafe.any array -> 'h1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'h1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  'z Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_98db9fd1 "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
type(
  float
)
ident(
  def jsoo_3bf4f782 "src/bootCanvas.ml" 173 4494 4523 "src/bootCanvas.ml" 173 4494 4565
)
"src/bootCanvas.ml" 173 4494 4513 "src/bootCanvas.ml" 173 4494 4565
type(
  float * BootColor.t -> unit
)
"src/bootCanvas.ml" 174 4567 4581 "src/bootCanvas.ml" 174 4567 4586
type(
  (float * BootColor.t) list
)
ident(
  int_ref steps "src/bootCanvas.ml" 169 4334 4378 "src/bootCanvas.ml" 169 4334 4383
)
"src/bootCanvas.ml" 172 4472 4484 "src/bootCanvas.ml" 174 4567 4586
type(
  unit
)
"src/bootCanvas.ml" 176 4601 4615 "src/bootCanvas.ml" 176 4601 4616
type(
  unit
)
"src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4622
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4654
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4654
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4646
type(
  (< set : 'z Js.t -> unit; .. > as 'i1) Js.gen_prop
)
type(
  'i1 Js.gen_prop
)
"src/bootCanvas.ml" 176 4601 4650 "src/bootCanvas.ml" 176 4601 4654
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4654
)
type(
  'z Js.t
)
ident(
  int_ref grad "src/bootCanvas.ml" 170 4388 4402 "src/bootCanvas.ml" 170 4388 4406
)
"src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4654
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  'z Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4654
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4654
)
type(
  'a1 Js.t -> string -> 'z Js.t -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4654
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'a1 -> 'i1 Js.gen_prop
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4646
)
type(
  'a1 -> 'i1 Js.gen_prop
)
type(
  'a1 Js.t
)
type(
  'z Js.t
)
ident(
  def res "src/bootCanvas.ml" 176 4601 4654 "src/bootCanvas.ml" 176 4601 4654
)
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4654
)
type(
  'a1 Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 176 4601 4619 "src/bootCanvas.ml" 176 4601 4654
)
"src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4671
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4684
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4684
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4681
type(
  unit Js.meth
)
type(
  unit Js.meth
)
"src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4684
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4684
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4684
)
type(
  'a1 -> unit Js.meth
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4681
)
type(
  'a1 -> unit Js.meth
)
type(
  'a1 Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 177 4658 4684 "src/bootCanvas.ml" 177 4658 4684
)
type(
  'j1
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4684
)
type(
  'a1 Js.t -> string -> Js.Unsafe.any array -> 'j1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'j1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4684
)
type(
  'a1 Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 177 4658 4668 "src/bootCanvas.ml" 177 4658 4684
)
"src/bootCanvas.ml" 176 4601 4611 "src/bootCanvas.ml" 177 4658 4684
type(
  unit
)
"src/bootCanvas.ml" 171 4454 4464 "src/bootCanvas.ml" 177 4658 4684
type(
  unit
)
"src/bootCanvas.ml" 170 4388 4398 "src/bootCanvas.ml" 177 4658 4684
type(
  unit
)
"src/bootCanvas.ml" 178 4685 4712 "src/bootCanvas.ml" 178 4685 4713
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 179 4746 4756 "src/bootCanvas.ml" 186 5023 5049
)
"src/bootCanvas.ml" 178 4685 4715 "src/bootCanvas.ml" 178 4685 4716
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 179 4746 4756 "src/bootCanvas.ml" 186 5023 5049
)
"src/bootCanvas.ml" 178 4685 4712 "src/bootCanvas.ml" 178 4685 4716
type(
  point
)
"src/bootCanvas.ml" 178 4685 4720 "src/bootCanvas.ml" 178 4685 4722
type(
  float
)
ident(
  def x2 "src/bootCanvas.ml" 179 4746 4756 "src/bootCanvas.ml" 186 5023 5049
)
"src/bootCanvas.ml" 178 4685 4724 "src/bootCanvas.ml" 178 4685 4726
type(
  float
)
ident(
  def y2 "src/bootCanvas.ml" 179 4746 4756 "src/bootCanvas.ml" 186 5023 5049
)
"src/bootCanvas.ml" 178 4685 4720 "src/bootCanvas.ml" 178 4685 4726
type(
  point
)
"src/bootCanvas.ml" 178 4685 4729 "src/bootCanvas.ml" 178 4685 4730
type(
  float
)
ident(
  def r "src/bootCanvas.ml" 179 4746 4756 "src/bootCanvas.ml" 186 5023 5049
)
"src/bootCanvas.ml" 178 4685 4732 "src/bootCanvas.ml" 178 4685 4734
type(
  float
)
ident(
  def r2 "src/bootCanvas.ml" 179 4746 4756 "src/bootCanvas.ml" 186 5023 5049
)
"src/bootCanvas.ml" 178 4685 4736 "src/bootCanvas.ml" 178 4685 4741
type(
  (float * BootColor.t) list
)
ident(
  def steps "src/bootCanvas.ml" 179 4746 4756 "src/bootCanvas.ml" 186 5023 5049
)
"src/bootCanvas.ml" 178 4685 4695 "src/bootCanvas.ml" 178 4685 4742
type(
  fill_param
)
"src/bootCanvas.ml" 179 4746 4760 "src/bootCanvas.ml" 179 4746 4764
type(
  'z Js.t
)
ident(
  def grad "src/bootCanvas.ml" 180 4819 4829 "src/bootCanvas.ml" 186 5023 5049
)
"src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4770
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4794
type(
  float -> float -> float -> float -> float -> float -> 'z Js.t Js.meth
)
type(
  float -> float -> float -> float -> float -> float -> 'z Js.t Js.meth
)
"src/bootCanvas.ml" 179 4746 4795 "src/bootCanvas.ml" 179 4746 4796
type(
  'z Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_46988cce "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 178 4685 4712 "src/bootCanvas.ml" 178 4685 4713
)
"src/bootCanvas.ml" 179 4746 4798 "src/bootCanvas.ml" 179 4746 4799
type(
  'z Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_05bc2b13 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 178 4685 4715 "src/bootCanvas.ml" 178 4685 4716
)
"src/bootCanvas.ml" 179 4746 4801 "src/bootCanvas.ml" 179 4746 4802
type(
  'z Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_2d347356 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
type(
  float
)
ident(
  int_ref r "src/bootCanvas.ml" 178 4685 4729 "src/bootCanvas.ml" 178 4685 4730
)
"src/bootCanvas.ml" 179 4746 4804 "src/bootCanvas.ml" 179 4746 4806
type(
  'z Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_4a3455d3 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
type(
  float
)
ident(
  int_ref x2 "src/bootCanvas.ml" 178 4685 4720 "src/bootCanvas.ml" 178 4685 4722
)
"src/bootCanvas.ml" 179 4746 4808 "src/bootCanvas.ml" 179 4746 4810
type(
  'z Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_30f001a8 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
type(
  float
)
ident(
  int_ref y2 "src/bootCanvas.ml" 178 4685 4724 "src/bootCanvas.ml" 178 4685 4726
)
"src/bootCanvas.ml" 179 4746 4812 "src/bootCanvas.ml" 179 4746 4814
type(
  'z Js.t
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_c0e4da4c "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
type(
  float
)
ident(
  int_ref r2 "src/bootCanvas.ml" 178 4685 4732 "src/bootCanvas.ml" 178 4685 4734
)
"src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  'a1 ->
  float -> float -> float -> float -> float -> float -> 'z Js.t Js.meth
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4794
)
type(
  'a1 ->
  float -> float -> float -> float -> float -> float -> 'z Js.t Js.meth
)
type(
  'a1 Js.t
)
type(
  'z Js.t
)
ident(
  def res "src/bootCanvas.ml" 179 4746 4815 "src/bootCanvas.ml" 179 4746 4815
)
type(
  'k1
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_c0e4da4c "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_30f001a8 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_4a3455d3 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_2d347356 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_05bc2b13 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_46988cce "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  'a1 Js.t -> string -> Js.Unsafe.any array -> 'k1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'k1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  'a1 Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
ident(
  def jsoo_c0e4da4c "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
ident(
  def jsoo_30f001a8 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
ident(
  def jsoo_4a3455d3 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
ident(
  def jsoo_2d347356 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
ident(
  def jsoo_05bc2b13 "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
type(
  float
)
ident(
  def jsoo_46988cce "src/bootCanvas.ml" 179 4746 4767 "src/bootCanvas.ml" 179 4746 4815
)
"src/bootCanvas.ml" 180 4819 4833 "src/bootCanvas.ml" 180 4819 4834
type(
  unit
)
"src/bootCanvas.ml" 181 4837 4849 "src/bootCanvas.ml" 181 4837 4858
type(
  (float * BootColor.t -> unit) -> (float * BootColor.t) list -> unit
)
ident(
  ext_ref List.iter
)
"src/bootCanvas.ml" 182 4859 4879 "src/bootCanvas.ml" 182 4859 4880
type(
  float
)
ident(
  def i "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
"src/bootCanvas.ml" 182 4859 4882 "src/bootCanvas.ml" 182 4859 4883
type(
  BootColor.t
)
ident(
  def s "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
"src/bootCanvas.ml" 182 4859 4879 "src/bootCanvas.ml" 182 4859 4883
type(
  float * BootColor.t
)
"src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4892
type(
  'z
)
ident(
  int_ref x "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  'z Js.t
)
ident(
  int_ref grad "src/bootCanvas.ml" 179 4746 4760 "src/bootCanvas.ml" 179 4746 4764
)
"src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4908
type(
  float -> Js.js_string Js.t -> unit Js.meth
)
type(
  float -> Js.js_string Js.t -> unit Js.meth
)
"src/bootCanvas.ml" 182 4859 4909 "src/bootCanvas.ml" 182 4859 4910
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_ee22b285 "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  float
)
type(
  float
)
ident(
  int_ref i "src/bootCanvas.ml" 182 4859 4879 "src/bootCanvas.ml" 182 4859 4880
)
"src/bootCanvas.ml" 182 4859 4912 "src/bootCanvas.ml" 182 4859 4927
type(
  BootColor.t -> Js.js_string Js.t
)
ident(
  ext_ref BootColor.to_js
)
"src/bootCanvas.ml" 182 4859 4928 "src/bootCanvas.ml" 182 4859 4929
type(
  BootColor.t
)
ident(
  int_ref s "src/bootCanvas.ml" 182 4859 4882 "src/bootCanvas.ml" 182 4859 4883
)
"src/bootCanvas.ml" 182 4859 4912 "src/bootCanvas.ml" 182 4859 4929
type(
  unit
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_8d589752 "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  'z -> float -> Js.js_string Js.t -> unit Js.meth
)
type(
  'z
)
ident(
  def x "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4908
)
type(
  'z -> float -> Js.js_string Js.t -> unit Js.meth
)
type(
  'z Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 182 4859 4930 "src/bootCanvas.ml" 182 4859 4930
)
type(
  'l1
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_8d589752 "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  Js.js_string Js.t -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_ee22b285 "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  'z Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  'z Js.t -> string -> Js.Unsafe.any array -> 'l1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'l1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  'z Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_8d589752 "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
type(
  float
)
ident(
  def jsoo_ee22b285 "src/bootCanvas.ml" 182 4859 4888 "src/bootCanvas.ml" 182 4859 4930
)
"src/bootCanvas.ml" 182 4859 4878 "src/bootCanvas.ml" 182 4859 4930
type(
  float * BootColor.t -> unit
)
"src/bootCanvas.ml" 183 4932 4946 "src/bootCanvas.ml" 183 4932 4951
type(
  (float * BootColor.t) list
)
ident(
  int_ref steps "src/bootCanvas.ml" 178 4685 4736 "src/bootCanvas.ml" 178 4685 4741
)
"src/bootCanvas.ml" 181 4837 4849 "src/bootCanvas.ml" 183 4932 4951
type(
  unit
)
"src/bootCanvas.ml" 185 4966 4980 "src/bootCanvas.ml" 185 4966 4981
type(
  unit
)
"src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 4987
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5019
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5019
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5011
type(
  'i1 Js.gen_prop
)
type(
  'i1 Js.gen_prop
)
"src/bootCanvas.ml" 185 4966 5015 "src/bootCanvas.ml" 185 4966 5019
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5019
)
type(
  'z Js.t
)
ident(
  int_ref grad "src/bootCanvas.ml" 179 4746 4760 "src/bootCanvas.ml" 179 4746 4764
)
"src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5019
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  'z Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5019
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5019
)
type(
  'a1 Js.t -> string -> 'z Js.t -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5019
)
type(
  'z Js.t
)
type(
  'z Js.t
)
type(
  'a1 -> 'i1 Js.gen_prop
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5011
)
type(
  'a1 -> 'i1 Js.gen_prop
)
type(
  'a1 Js.t
)
type(
  'z Js.t
)
ident(
  def res "src/bootCanvas.ml" 185 4966 5019 "src/bootCanvas.ml" 185 4966 5019
)
type(
  'z Js.t
)
type(
  'z Js.t
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5019
)
type(
  'a1 Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 185 4966 4984 "src/bootCanvas.ml" 185 4966 5019
)
"src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5036
type(
  'a1
)
ident(
  int_ref x "src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5049
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5049
)
type(
  'a1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 159 3952 3985
)
"src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5046
type(
  unit Js.meth
)
type(
  unit Js.meth
)
"src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5049
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5049
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5049
)
type(
  'a1 -> unit Js.meth
)
type(
  'a1
)
ident(
  def x "src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5046
)
type(
  'a1 -> unit Js.meth
)
type(
  'a1 Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 186 5023 5049 "src/bootCanvas.ml" 186 5023 5049
)
type(
  'm1
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  'a1 Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5049
)
type(
  'a1 Js.t -> string -> Js.Unsafe.any array -> 'm1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'm1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5049
)
type(
  'a1 Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 186 5023 5033 "src/bootCanvas.ml" 186 5023 5049
)
"src/bootCanvas.ml" 185 4966 4976 "src/bootCanvas.ml" 186 5023 5049
type(
  unit
)
"src/bootCanvas.ml" 180 4819 4829 "src/bootCanvas.ml" 186 5023 5049
type(
  unit
)
"src/bootCanvas.ml" 179 4746 4756 "src/bootCanvas.ml" 186 5023 5049
type(
  unit
)
"src/bootCanvas.ml" 161 4019 4027 "src/bootCanvas.ml" 186 5023 5049
type(
  unit
)
"src/bootCanvas.ml" 188 5060 5066 "src/bootCanvas.ml" 188 5060 5070
type(
  fill_param option
)
"src/bootCanvas.ml" 188 5060 5074 "src/bootCanvas.ml" 188 5060 5076
type(
  unit
)
"src/bootCanvas.ml" 159 3952 3988 "src/bootCanvas.ml" 188 5060 5076
type(
  fill_param option -> unit
)
"src/bootCanvas.ml" 159 3952 3982 "src/bootCanvas.ml" 188 5060 5076
type(
  'a1 Js.t -> fill_param option -> unit
)
"src/bootCanvas.ml" 190 5078 5084 "src/bootCanvas.ml" 190 5078 5095
type(
  < createLinearGradient : float ->
                           float ->
                           float ->
                           float ->
                           (< addColorStop : float ->
                                             Js.js_string Js.t ->
                                             unit Js.meth;
                              .. >
                            as 'n1)
                           Js.t Js.meth;
    createPattern : image -> Js.js_string Js.t -> 'o1 Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float -> float -> float -> 'n1 Js.t Js.meth;
    fill : unit Js.meth;
    fillStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop;
    fillStyle_gradient : < set : 'n1 Js.t -> unit; .. > Js.gen_prop;
    fillStyle_pattern : < set : 'o1 -> unit; .. > Js.gen_prop;
    stroke : unit Js.meth;
    strokeStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop;
    strokeStyle_gradient : < set : 'n1 Js.t -> unit; .. > Js.gen_prop;
    strokeStyle_pattern : < set : 'o1 -> unit; .. > Js.gen_prop; .. >
  Js.t -> fill_param option -> fill_param option -> unit
)
ident(
  def fill_stroke "src/bootCanvas.ml" 192 5149 5182 "src/bootCanvas.ml" 195 5193 5196
)
"src/bootCanvas.ml" 190 5078 5096 "src/bootCanvas.ml" 190 5078 5099
type(
  (< createLinearGradient : float ->
                            float -> float -> float -> 'n1 Js.t Js.meth;
     createPattern : image -> Js.js_string Js.t -> 'o1 Js.meth;
     createRadialGradient : float ->
                            float ->
                            float ->
                            float -> float -> float -> 'n1 Js.t Js.meth;
     fill : unit Js.meth;
     fillStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop;
     fillStyle_gradient : < set : 'n1 Js.t -> unit; .. > Js.gen_prop;
     fillStyle_pattern : < set : 'o1 -> unit; .. > Js.gen_prop;
     stroke : unit Js.meth;
     strokeStyle : < set : Js.js_string Js.t -> unit; .. > Js.gen_prop;
     strokeStyle_gradient : < set : 'n1 Js.t -> unit; .. > Js.gen_prop;
     strokeStyle_pattern : < set : 'o1 -> unit; .. > Js.gen_prop; .. >
   as 'p1)
  Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 190 5078 5100 "src/bootCanvas.ml" 192 5149 5182
)
"src/bootCanvas.ml" 190 5078 5100 "src/bootCanvas.ml" 190 5078 5101
type(
  fill_param option
)
ident(
  def f "src/bootCanvas.ml" 190 5078 5102 "src/bootCanvas.ml" 192 5149 5182
)
"src/bootCanvas.ml" 190 5078 5102 "src/bootCanvas.ml" 190 5078 5103
type(
  fill_param option
)
ident(
  def s "src/bootCanvas.ml" 191 5106 5110 "src/bootCanvas.ml" 192 5149 5182
)
"src/bootCanvas.ml" 191 5106 5114 "src/bootCanvas.ml" 191 5106 5115
type(
  unit
)
"src/bootCanvas.ml" 191 5106 5118 "src/bootCanvas.ml" 191 5106 5139
type(
  'p1 Js.t -> fill_param option -> unit
)
ident(
  int_ref apply_filler_for_fill "src/bootCanvas.ml" 128 2846 2852 "src/bootCanvas.ml" 128 2846 2873
)
"src/bootCanvas.ml" 191 5106 5140 "src/bootCanvas.ml" 191 5106 5143
type(
  'p1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 190 5078 5096 "src/bootCanvas.ml" 190 5078 5099
)
"src/bootCanvas.ml" 191 5106 5144 "src/bootCanvas.ml" 191 5106 5145
type(
  fill_param option
)
ident(
  int_ref f "src/bootCanvas.ml" 190 5078 5100 "src/bootCanvas.ml" 190 5078 5101
)
"src/bootCanvas.ml" 191 5106 5118 "src/bootCanvas.ml" 191 5106 5145
type(
  unit
)
"src/bootCanvas.ml" 192 5149 5153 "src/bootCanvas.ml" 192 5149 5176
type(
  'p1 Js.t -> fill_param option -> unit
)
ident(
  int_ref apply_filler_for_stroke "src/bootCanvas.ml" 159 3952 3958 "src/bootCanvas.ml" 159 3952 3981
)
"src/bootCanvas.ml" 192 5149 5177 "src/bootCanvas.ml" 192 5149 5180
type(
  'p1 Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 190 5078 5096 "src/bootCanvas.ml" 190 5078 5099
)
"src/bootCanvas.ml" 192 5149 5181 "src/bootCanvas.ml" 192 5149 5182
type(
  fill_param option
)
ident(
  int_ref s "src/bootCanvas.ml" 190 5078 5102 "src/bootCanvas.ml" 190 5078 5103
)
"src/bootCanvas.ml" 192 5149 5153 "src/bootCanvas.ml" 192 5149 5182
type(
  unit
)
"src/bootCanvas.ml" 191 5106 5110 "src/bootCanvas.ml" 192 5149 5182
type(
  unit
)
"src/bootCanvas.ml" 190 5078 5102 "src/bootCanvas.ml" 192 5149 5182
type(
  fill_param option -> unit
)
"src/bootCanvas.ml" 190 5078 5100 "src/bootCanvas.ml" 192 5149 5182
type(
  fill_param option -> fill_param option -> unit
)
"src/bootCanvas.ml" 190 5078 5096 "src/bootCanvas.ml" 192 5149 5182
type(
  'p1 Js.t -> fill_param option -> fill_param option -> unit
)
"src/bootCanvas.ml" 197 5198 5202 "src/bootCanvas.ml" 197 5198 5213
type(
  float -> unit
)
ident(
  def miter_limit "src/bootCanvas.ml" 203 5279 5279 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 197 5198 5214 "src/bootCanvas.ml" 197 5198 5215
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 198 5218 5220 "src/bootCanvas.ml" 200 5271 5276
)
"src/bootCanvas.ml" 198 5218 5220 "src/bootCanvas.ml" 198 5218 5227
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 198 5218 5233 "src/bootCanvas.ml" 198 5218 5234
type(
  Dom_html.canvasElement Js.t
)
"src/bootCanvas.ml" 198 5218 5235 "src/bootCanvas.ml" 198 5218 5238
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5270
)
"src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5251
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a.
                      (#Dom_html.element as 'a) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5270
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5270
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 198 5218 5235 "src/bootCanvas.ml" 198 5218 5238
)
"src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5265
type(
  < get : float; set : float -> unit > Js.gen_prop
)
type(
  float Js.prop
)
"src/bootCanvas.ml" 199 5242 5269 "src/bootCanvas.ml" 199 5242 5270
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5270
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 197 5198 5214 "src/bootCanvas.ml" 197 5198 5215
)
"src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5270
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  float
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5270
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5270
)
type(
  Dom_html.canvasRenderingContext2D Js.t -> string -> float -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  float
)
type(
  float
)
ident(
  int_ref M.res "src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5270
)
type(
  float
)
type(
  float
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  < get : float; set : float -> unit > Js.gen_prop
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5265
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  < get : float; set : float -> unit > Js.gen_prop
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  float
)
ident(
  def res "src/bootCanvas.ml" 199 5242 5270 "src/bootCanvas.ml" 199 5242 5270
)
type(
  float
)
type(
  float
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5270
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 199 5242 5248 "src/bootCanvas.ml" 199 5242 5270
)
"src/bootCanvas.ml" 198 5218 5235 "src/bootCanvas.ml" 199 5242 5270
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 198 5218 5233 "src/bootCanvas.ml" 199 5242 5270
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 198 5218 5220 "src/bootCanvas.ml" 200 5271 5276
type(
  unit
)
"src/bootCanvas.ml" 197 5198 5214 "src/bootCanvas.ml" 200 5271 5276
type(
  float -> unit
)
"src/bootCanvas.ml" 203 5279 5283 "src/bootCanvas.ml" 203 5279 5287
type(
  fill_param option -> fill_param option -> (unit -> 'a) list -> unit
)
ident(
  def draw "src/bootCanvas.ml" 212 5473 5473 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 203 5279 5288 "src/bootCanvas.ml" 203 5279 5290
type(
  fill_param option
)
ident(
  def fc "src/bootCanvas.ml" 203 5279 5291 "src/bootCanvas.ml" 209 5465 5470
)
"src/bootCanvas.ml" 203 5279 5291 "src/bootCanvas.ml" 203 5279 5293
type(
  fill_param option
)
ident(
  def sc "src/bootCanvas.ml" 203 5279 5294 "src/bootCanvas.ml" 209 5465 5470
)
"src/bootCanvas.ml" 203 5279 5294 "src/bootCanvas.ml" 203 5279 5296
type(
  (unit -> 'a) list
)
ident(
  def fs "src/bootCanvas.ml" 204 5299 5301 "src/bootCanvas.ml" 209 5465 5470
)
"src/bootCanvas.ml" 204 5299 5301 "src/bootCanvas.ml" 204 5299 5308
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 204 5299 5314 "src/bootCanvas.ml" 204 5299 5320
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 204 5299 5321 "src/bootCanvas.ml" 208 5452 5464
)
"src/bootCanvas.ml" 204 5299 5321 "src/bootCanvas.ml" 204 5299 5324
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 205 5328 5334 "src/bootCanvas.ml" 208 5452 5464
)
"src/bootCanvas.ml" 205 5328 5334 "src/bootCanvas.ml" 205 5328 5343
type(
  ((unit -> 'a) -> unit) -> (unit -> 'a) list -> unit
)
ident(
  ext_ref List.iter
)
"src/bootCanvas.ml" 205 5328 5349 "src/bootCanvas.ml" 205 5328 5350
type(
  unit -> 'a
)
ident(
  def f "src/bootCanvas.ml" 206 5354 5364 "src/bootCanvas.ml" 207 5395 5451
)
"src/bootCanvas.ml" 206 5354 5368 "src/bootCanvas.ml" 206 5354 5369
type(
  unit
)
"src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5375
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5391
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5391
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 204 5299 5321 "src/bootCanvas.ml" 204 5299 5324
)
"src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5388
type(
  unit Js.meth
)
type(
  unit Js.meth
)
"src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5391
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5391
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5391
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5388
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'h.
                      (#Dom_html.element as 'h) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 206 5354 5391 "src/bootCanvas.ml" 206 5354 5391
)
type(
  'i
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5391
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'i
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'i
)
ident(
  def jsoo_res "src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5391
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 206 5354 5372 "src/bootCanvas.ml" 206 5354 5391
)
"src/bootCanvas.ml" 207 5395 5409 "src/bootCanvas.ml" 207 5395 5410
type(
  'a
)
"src/bootCanvas.ml" 207 5395 5413 "src/bootCanvas.ml" 207 5395 5414
type(
  unit -> 'a
)
ident(
  int_ref f "src/bootCanvas.ml" 205 5328 5349 "src/bootCanvas.ml" 205 5328 5350
)
"src/bootCanvas.ml" 207 5395 5415 "src/bootCanvas.ml" 207 5395 5417
type(
  unit
)
"src/bootCanvas.ml" 207 5395 5413 "src/bootCanvas.ml" 207 5395 5417
type(
  'a
)
"src/bootCanvas.ml" 207 5395 5421 "src/bootCanvas.ml" 207 5395 5441
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  fill_param option -> fill_param option -> unit
)
ident(
  int_ref Internal.fill_stroke "src/bootCanvas.ml" 190 5078 5084 "src/bootCanvas.ml" 190 5078 5095
)
"src/bootCanvas.ml" 207 5395 5442 "src/bootCanvas.ml" 207 5395 5445
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 204 5299 5321 "src/bootCanvas.ml" 204 5299 5324
)
"src/bootCanvas.ml" 207 5395 5446 "src/bootCanvas.ml" 207 5395 5448
type(
  fill_param option
)
ident(
  int_ref fc "src/bootCanvas.ml" 203 5279 5288 "src/bootCanvas.ml" 203 5279 5290
)
"src/bootCanvas.ml" 207 5395 5449 "src/bootCanvas.ml" 207 5395 5451
type(
  fill_param option
)
ident(
  int_ref sc "src/bootCanvas.ml" 203 5279 5291 "src/bootCanvas.ml" 203 5279 5293
)
"src/bootCanvas.ml" 207 5395 5421 "src/bootCanvas.ml" 207 5395 5451
type(
  unit
)
"src/bootCanvas.ml" 207 5395 5405 "src/bootCanvas.ml" 207 5395 5451
type(
  unit
)
"src/bootCanvas.ml" 206 5354 5364 "src/bootCanvas.ml" 207 5395 5451
type(
  unit
)
"src/bootCanvas.ml" 205 5328 5349 "src/bootCanvas.ml" 207 5395 5451
type(
  (unit -> 'a) -> unit
)
"src/bootCanvas.ml" 208 5452 5462 "src/bootCanvas.ml" 208 5452 5464
type(
  (unit -> 'a) list
)
ident(
  int_ref fs "src/bootCanvas.ml" 203 5279 5294 "src/bootCanvas.ml" 203 5279 5296
)
"src/bootCanvas.ml" 205 5328 5334 "src/bootCanvas.ml" 208 5452 5464
type(
  unit
)
"src/bootCanvas.ml" 204 5299 5321 "src/bootCanvas.ml" 208 5452 5464
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 204 5299 5314 "src/bootCanvas.ml" 208 5452 5464
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 204 5299 5301 "src/bootCanvas.ml" 209 5465 5470
type(
  unit
)
"src/bootCanvas.ml" 203 5279 5294 "src/bootCanvas.ml" 209 5465 5470
type(
  (unit -> 'a) list -> unit
)
"src/bootCanvas.ml" 203 5279 5291 "src/bootCanvas.ml" 209 5465 5470
type(
  fill_param option -> (unit -> 'a) list -> unit
)
"src/bootCanvas.ml" 203 5279 5288 "src/bootCanvas.ml" 209 5465 5470
type(
  fill_param option -> fill_param option -> (unit -> 'a) list -> unit
)
"src/bootCanvas.ml" 212 5473 5477 "src/bootCanvas.ml" 212 5473 5487
type(
  fill_param option -> fill_param option -> (unit -> 'a) list -> unit
)
ident(
  def draw_shape "src/bootCanvas.ml" 220 5632 5632 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 212 5473 5488 "src/bootCanvas.ml" 212 5473 5490
type(
  fill_param option
)
ident(
  def fc "src/bootCanvas.ml" 212 5473 5491 "src/bootCanvas.ml" 217 5624 5629
)
"src/bootCanvas.ml" 212 5473 5491 "src/bootCanvas.ml" 212 5473 5493
type(
  fill_param option
)
ident(
  def sc "src/bootCanvas.ml" 212 5473 5494 "src/bootCanvas.ml" 217 5624 5629
)
"src/bootCanvas.ml" 212 5473 5494 "src/bootCanvas.ml" 212 5473 5496
type(
  (unit -> 'a) list
)
ident(
  def fs "src/bootCanvas.ml" 213 5499 5501 "src/bootCanvas.ml" 217 5624 5629
)
"src/bootCanvas.ml" 213 5499 5501 "src/bootCanvas.ml" 213 5499 5508
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 213 5499 5514 "src/bootCanvas.ml" 213 5499 5520
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 213 5499 5521 "src/bootCanvas.ml" 216 5611 5623
)
"src/bootCanvas.ml" 213 5499 5521 "src/bootCanvas.ml" 213 5499 5524
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 214 5528 5534 "src/bootCanvas.ml" 216 5611 5623
)
"src/bootCanvas.ml" 214 5528 5534 "src/bootCanvas.ml" 214 5528 5543
type(
  ((unit -> 'a) -> unit) -> (unit -> 'a) list -> unit
)
ident(
  ext_ref List.iter
)
"src/bootCanvas.ml" 214 5528 5549 "src/bootCanvas.ml" 214 5528 5550
type(
  unit -> 'a
)
ident(
  def f "src/bootCanvas.ml" 215 5554 5564 "src/bootCanvas.ml" 215 5554 5610
)
"src/bootCanvas.ml" 215 5554 5568 "src/bootCanvas.ml" 215 5554 5569
type(
  'a
)
"src/bootCanvas.ml" 215 5554 5572 "src/bootCanvas.ml" 215 5554 5573
type(
  unit -> 'a
)
ident(
  int_ref f "src/bootCanvas.ml" 214 5528 5549 "src/bootCanvas.ml" 214 5528 5550
)
"src/bootCanvas.ml" 215 5554 5574 "src/bootCanvas.ml" 215 5554 5576
type(
  unit
)
"src/bootCanvas.ml" 215 5554 5572 "src/bootCanvas.ml" 215 5554 5576
type(
  'a
)
"src/bootCanvas.ml" 215 5554 5580 "src/bootCanvas.ml" 215 5554 5600
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  fill_param option -> fill_param option -> unit
)
ident(
  int_ref Internal.fill_stroke "src/bootCanvas.ml" 190 5078 5084 "src/bootCanvas.ml" 190 5078 5095
)
"src/bootCanvas.ml" 215 5554 5601 "src/bootCanvas.ml" 215 5554 5604
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 213 5499 5521 "src/bootCanvas.ml" 213 5499 5524
)
"src/bootCanvas.ml" 215 5554 5605 "src/bootCanvas.ml" 215 5554 5607
type(
  fill_param option
)
ident(
  int_ref fc "src/bootCanvas.ml" 212 5473 5488 "src/bootCanvas.ml" 212 5473 5490
)
"src/bootCanvas.ml" 215 5554 5608 "src/bootCanvas.ml" 215 5554 5610
type(
  fill_param option
)
ident(
  int_ref sc "src/bootCanvas.ml" 212 5473 5491 "src/bootCanvas.ml" 212 5473 5493
)
"src/bootCanvas.ml" 215 5554 5580 "src/bootCanvas.ml" 215 5554 5610
type(
  unit
)
"src/bootCanvas.ml" 215 5554 5564 "src/bootCanvas.ml" 215 5554 5610
type(
  unit
)
"src/bootCanvas.ml" 214 5528 5549 "src/bootCanvas.ml" 215 5554 5610
type(
  (unit -> 'a) -> unit
)
"src/bootCanvas.ml" 216 5611 5621 "src/bootCanvas.ml" 216 5611 5623
type(
  (unit -> 'a) list
)
ident(
  int_ref fs "src/bootCanvas.ml" 212 5473 5494 "src/bootCanvas.ml" 212 5473 5496
)
"src/bootCanvas.ml" 214 5528 5534 "src/bootCanvas.ml" 216 5611 5623
type(
  unit
)
"src/bootCanvas.ml" 213 5499 5521 "src/bootCanvas.ml" 216 5611 5623
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 213 5499 5514 "src/bootCanvas.ml" 216 5611 5623
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 213 5499 5501 "src/bootCanvas.ml" 217 5624 5629
type(
  unit
)
"src/bootCanvas.ml" 212 5473 5494 "src/bootCanvas.ml" 217 5624 5629
type(
  (unit -> 'a) list -> unit
)
"src/bootCanvas.ml" 212 5473 5491 "src/bootCanvas.ml" 217 5624 5629
type(
  fill_param option -> (unit -> 'a) list -> unit
)
"src/bootCanvas.ml" 212 5473 5488 "src/bootCanvas.ml" 217 5624 5629
type(
  fill_param option -> fill_param option -> (unit -> 'a) list -> unit
)
"src/bootCanvas.ml" 220 5632 5636 "src/bootCanvas.ml" 220 5632 5645
type(
  [< `Bevel | `Miter | `Square ] -> unit
)
ident(
  def line_join "src/bootCanvas.ml" 225 5743 5743 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 220 5632 5646 "src/bootCanvas.ml" 220 5632 5651
type(
  [< `Bevel | `Miter | `Square ] as 'a
)
ident(
  def style "src/bootCanvas.ml" 221 5654 5656 "src/bootCanvas.ml" 223 5736 5741
)
"src/bootCanvas.ml" 221 5654 5656 "src/bootCanvas.ml" 221 5654 5663
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 221 5654 5669 "src/bootCanvas.ml" 221 5654 5675
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 221 5654 5676 "src/bootCanvas.ml" 222 5683 5735
)
"src/bootCanvas.ml" 221 5654 5676 "src/bootCanvas.ml" 221 5654 5679
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5735
)
"src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5692
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5735
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5735
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 221 5654 5676 "src/bootCanvas.ml" 221 5654 5679
)
"src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5704
type(
  < get : Js.js_string Js.t; set : Js.js_string Js.t -> unit > Js.gen_prop
)
type(
  Js.js_string Js.t Js.prop
)
"src/bootCanvas.ml" 222 5683 5709 "src/bootCanvas.ml" 222 5683 5728
type(
  'a -> Js.js_string Js.t
)
ident(
  int_ref Internal.join_style "src/bootCanvas.ml" 101 2235 2241 "src/bootCanvas.ml" 101 2235 2251
)
"src/bootCanvas.ml" 222 5683 5729 "src/bootCanvas.ml" 222 5683 5734
type(
  'a
)
ident(
  int_ref style "src/bootCanvas.ml" 220 5632 5646 "src/bootCanvas.ml" 220 5632 5651
)
"src/bootCanvas.ml" 222 5683 5709 "src/bootCanvas.ml" 222 5683 5734
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5735
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5735
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5735
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5735
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.js_string Js.t -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5735
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  < get : Js.js_string Js.t; set : Js.js_string Js.t -> unit > Js.gen_prop
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5704
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  < get : Js.js_string Js.t; set : Js.js_string Js.t -> unit > Js.gen_prop
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'h.
                      (#Dom_html.element as 'h) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def res "src/bootCanvas.ml" 222 5683 5735 "src/bootCanvas.ml" 222 5683 5735
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5735
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 222 5683 5689 "src/bootCanvas.ml" 222 5683 5735
)
"src/bootCanvas.ml" 221 5654 5676 "src/bootCanvas.ml" 222 5683 5735
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 221 5654 5669 "src/bootCanvas.ml" 222 5683 5735
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 221 5654 5656 "src/bootCanvas.ml" 223 5736 5741
type(
  unit
)
"src/bootCanvas.ml" 220 5632 5646 "src/bootCanvas.ml" 223 5736 5741
type(
  'a -> unit
)
"src/bootCanvas.ml" 225 5743 5747 "src/bootCanvas.ml" 225 5743 5755
type(
  [< `Butt | `Round | `Square ] -> unit
)
ident(
  def line_cap "src/bootCanvas.ml" 231 5852 5852 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 225 5743 5756 "src/bootCanvas.ml" 225 5743 5761
type(
  [< `Butt | `Round | `Square ] as 'a
)
ident(
  def style "src/bootCanvas.ml" 226 5764 5766 "src/bootCanvas.ml" 228 5844 5849
)
"src/bootCanvas.ml" 226 5764 5766 "src/bootCanvas.ml" 226 5764 5773
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 226 5764 5779 "src/bootCanvas.ml" 226 5764 5785
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 226 5764 5786 "src/bootCanvas.ml" 227 5793 5843
)
"src/bootCanvas.ml" 226 5764 5786 "src/bootCanvas.ml" 226 5764 5789
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5843
)
"src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5802
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5843
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5843
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 226 5764 5786 "src/bootCanvas.ml" 226 5764 5789
)
"src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5813
type(
  < get : Js.js_string Js.t; set : Js.js_string Js.t -> unit > Js.gen_prop
)
type(
  Js.js_string Js.t Js.prop
)
"src/bootCanvas.ml" 227 5793 5818 "src/bootCanvas.ml" 227 5793 5836
type(
  'a -> Js.js_string Js.t
)
ident(
  int_ref Internal.cap_style "src/bootCanvas.ml" 94 2090 2096 "src/bootCanvas.ml" 94 2090 2105
)
"src/bootCanvas.ml" 227 5793 5837 "src/bootCanvas.ml" 227 5793 5842
type(
  'a
)
ident(
  int_ref style "src/bootCanvas.ml" 225 5743 5756 "src/bootCanvas.ml" 225 5743 5761
)
"src/bootCanvas.ml" 227 5793 5818 "src/bootCanvas.ml" 227 5793 5842
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5843
)
type(
  Js.js_string Js.t
)
"src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5843
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  Js.js_string Js.t
)
ident(
  int_ref jsoo_arg "src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5843
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5843
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.js_string Js.t -> unit
)
ident(
  ext_ref Js.Unsafe.set
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  int_ref M.res "src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5843
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  < get : Js.js_string Js.t; set : Js.js_string Js.t -> unit > Js.gen_prop
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5813
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  < get : Js.js_string Js.t; set : Js.js_string Js.t -> unit > Js.gen_prop
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'h.
                      (#Dom_html.element as 'h) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def res "src/bootCanvas.ml" 227 5793 5843 "src/bootCanvas.ml" 227 5793 5843
)
type(
  Js.js_string Js.t
)
type(
  Js.js_string Js.t
)
ident(
  def jsoo_arg "src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5843
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 227 5793 5799 "src/bootCanvas.ml" 227 5793 5843
)
"src/bootCanvas.ml" 226 5764 5786 "src/bootCanvas.ml" 227 5793 5843
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 226 5764 5779 "src/bootCanvas.ml" 227 5793 5843
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 226 5764 5766 "src/bootCanvas.ml" 228 5844 5849
type(
  unit
)
"src/bootCanvas.ml" 225 5743 5756 "src/bootCanvas.ml" 228 5844 5849
type(
  'a -> unit
)
"src/bootCanvas.ml" 231 5852 5856 "src/bootCanvas.ml" 231 5852 5866
type(
  float * float * float * float -> unit
)
ident(
  def clear_rect "src/bootCanvas.ml" 236 5971 5971 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 231 5852 5868 "src/bootCanvas.ml" 231 5852 5869
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 232 5891 5893 "src/bootCanvas.ml" 234 5964 5969
)
"src/bootCanvas.ml" 231 5852 5871 "src/bootCanvas.ml" 231 5852 5872
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 232 5891 5893 "src/bootCanvas.ml" 234 5964 5969
)
"src/bootCanvas.ml" 231 5852 5874 "src/bootCanvas.ml" 231 5852 5879
type(
  float
)
ident(
  def width "src/bootCanvas.ml" 232 5891 5893 "src/bootCanvas.ml" 234 5964 5969
)
"src/bootCanvas.ml" 231 5852 5881 "src/bootCanvas.ml" 231 5852 5887
type(
  float
)
ident(
  def height "src/bootCanvas.ml" 232 5891 5893 "src/bootCanvas.ml" 234 5964 5969
)
"src/bootCanvas.ml" 231 5852 5868 "src/bootCanvas.ml" 231 5852 5887
type(
  float * float * float * float
)
"src/bootCanvas.ml" 232 5891 5893 "src/bootCanvas.ml" 232 5891 5900
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 232 5891 5906 "src/bootCanvas.ml" 232 5891 5912
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 232 5891 5913 "src/bootCanvas.ml" 233 5920 5963
)
"src/bootCanvas.ml" 232 5891 5913 "src/bootCanvas.ml" 232 5891 5916
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
"src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5929
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a.
                      (#Dom_html.element as 'a) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 232 5891 5913 "src/bootCanvas.ml" 232 5891 5916
)
"src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5942
type(
  float -> float -> float -> float -> unit Js.meth
)
type(
  float -> float -> float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 233 5920 5943 "src/bootCanvas.ml" 233 5920 5944
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_67aab9f1 "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 231 5852 5868 "src/bootCanvas.ml" 231 5852 5869
)
"src/bootCanvas.ml" 233 5920 5946 "src/bootCanvas.ml" 233 5920 5947
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_c83f271f "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 231 5852 5871 "src/bootCanvas.ml" 231 5852 5872
)
"src/bootCanvas.ml" 233 5920 5949 "src/bootCanvas.ml" 233 5920 5954
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_c28ba819 "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float
)
type(
  float
)
ident(
  int_ref width "src/bootCanvas.ml" 231 5852 5874 "src/bootCanvas.ml" 231 5852 5879
)
"src/bootCanvas.ml" 233 5920 5956 "src/bootCanvas.ml" 233 5920 5962
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_21a09377 "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float
)
type(
  float
)
ident(
  int_ref height "src/bootCanvas.ml" 231 5852 5881 "src/bootCanvas.ml" 231 5852 5887
)
"src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5942
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 233 5920 5963 "src/bootCanvas.ml" 233 5920 5963
)
type(
  'h
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_21a09377 "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_c28ba819 "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_c83f271f "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_67aab9f1 "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'h
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'h
)
ident(
  def jsoo_res "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float
)
ident(
  def jsoo_21a09377 "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float
)
ident(
  def jsoo_c28ba819 "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float
)
ident(
  def jsoo_c83f271f "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
type(
  float
)
ident(
  def jsoo_67aab9f1 "src/bootCanvas.ml" 233 5920 5926 "src/bootCanvas.ml" 233 5920 5963
)
"src/bootCanvas.ml" 232 5891 5913 "src/bootCanvas.ml" 233 5920 5963
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 232 5891 5906 "src/bootCanvas.ml" 233 5920 5963
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 232 5891 5893 "src/bootCanvas.ml" 234 5964 5969
type(
  unit
)
"src/bootCanvas.ml" 231 5852 5867 "src/bootCanvas.ml" 234 5964 5969
type(
  float * float * float * float -> unit
)
"src/bootCanvas.ml" 236 5971 5975 "src/bootCanvas.ml" 236 5971 5979
type(
  float * float * float * float -> unit
)
ident(
  def rect "src/bootCanvas.ml" 242 6069 6069 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 236 5971 5981 "src/bootCanvas.ml" 236 5971 5982
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 237 5996 5998 "src/bootCanvas.ml" 239 6055 6060
)
"src/bootCanvas.ml" 236 5971 5984 "src/bootCanvas.ml" 236 5971 5985
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 237 5996 5998 "src/bootCanvas.ml" 239 6055 6060
)
"src/bootCanvas.ml" 236 5971 5987 "src/bootCanvas.ml" 236 5971 5988
type(
  float
)
ident(
  def w "src/bootCanvas.ml" 237 5996 5998 "src/bootCanvas.ml" 239 6055 6060
)
"src/bootCanvas.ml" 236 5971 5990 "src/bootCanvas.ml" 236 5971 5991
type(
  float
)
ident(
  def h "src/bootCanvas.ml" 237 5996 5998 "src/bootCanvas.ml" 239 6055 6060
)
"src/bootCanvas.ml" 236 5971 5981 "src/bootCanvas.ml" 236 5971 5991
type(
  float * float * float * float
)
"src/bootCanvas.ml" 237 5996 5998 "src/bootCanvas.ml" 237 5996 6005
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 237 5996 6011 "src/bootCanvas.ml" 237 5996 6017
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 237 5996 6018 "src/bootCanvas.ml" 238 6025 6054
)
"src/bootCanvas.ml" 237 5996 6018 "src/bootCanvas.ml" 237 5996 6021
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
"src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6034
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a.
                      (#Dom_html.element as 'a) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 237 5996 6018 "src/bootCanvas.ml" 237 5996 6021
)
"src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6042
type(
  float -> float -> float -> float -> unit Js.meth
)
type(
  float -> float -> float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 238 6025 6043 "src/bootCanvas.ml" 238 6025 6044
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_211596db "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 236 5971 5981 "src/bootCanvas.ml" 236 5971 5982
)
"src/bootCanvas.ml" 238 6025 6046 "src/bootCanvas.ml" 238 6025 6047
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_018bac02 "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 236 5971 5984 "src/bootCanvas.ml" 236 5971 5985
)
"src/bootCanvas.ml" 238 6025 6049 "src/bootCanvas.ml" 238 6025 6050
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_d468cf58 "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float
)
type(
  float
)
ident(
  int_ref w "src/bootCanvas.ml" 236 5971 5987 "src/bootCanvas.ml" 236 5971 5988
)
"src/bootCanvas.ml" 238 6025 6052 "src/bootCanvas.ml" 238 6025 6053
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_d761558f "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float
)
type(
  float
)
ident(
  int_ref h "src/bootCanvas.ml" 236 5971 5990 "src/bootCanvas.ml" 236 5971 5991
)
"src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6042
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 238 6025 6054 "src/bootCanvas.ml" 238 6025 6054
)
type(
  'h
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_d761558f "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_d468cf58 "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_018bac02 "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_211596db "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'h
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'h
)
ident(
  def jsoo_res "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float
)
ident(
  def jsoo_d761558f "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float
)
ident(
  def jsoo_d468cf58 "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float
)
ident(
  def jsoo_018bac02 "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
type(
  float
)
ident(
  def jsoo_211596db "src/bootCanvas.ml" 238 6025 6031 "src/bootCanvas.ml" 238 6025 6054
)
"src/bootCanvas.ml" 237 5996 6018 "src/bootCanvas.ml" 238 6025 6054
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 237 5996 6011 "src/bootCanvas.ml" 238 6025 6054
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 237 5996 5998 "src/bootCanvas.ml" 239 6055 6060
type(
  unit
)
"src/bootCanvas.ml" 236 5971 5980 "src/bootCanvas.ml" 239 6055 6060
type(
  float * float * float * float -> unit
)
"src/bootCanvas.ml" 242 6069 6073 "src/bootCanvas.ml" 242 6069 6082
type(
  fill_param option ->
  fill_param option -> float * float * float * float -> unit
)
ident(
  def fill_rect "src/bootCanvas.ml" 245 6128 6128 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 242 6069 6083 "src/bootCanvas.ml" 242 6069 6085
type(
  fill_param option
)
ident(
  def fc "src/bootCanvas.ml" 242 6069 6086 "src/bootCanvas.ml" 243 6093 6126
)
"src/bootCanvas.ml" 242 6069 6086 "src/bootCanvas.ml" 242 6069 6088
type(
  fill_param option
)
ident(
  def sc "src/bootCanvas.ml" 242 6069 6089 "src/bootCanvas.ml" 243 6093 6126
)
"src/bootCanvas.ml" 242 6069 6089 "src/bootCanvas.ml" 242 6069 6090
type(
  float * float * float * float
)
ident(
  def r "src/bootCanvas.ml" 243 6093 6095 "src/bootCanvas.ml" 243 6093 6126
)
"src/bootCanvas.ml" 243 6093 6095 "src/bootCanvas.ml" 243 6093 6099
type(
  fill_param option -> fill_param option -> (unit -> unit) list -> unit
)
ident(
  int_ref draw "src/bootCanvas.ml" 203 5279 5283 "src/bootCanvas.ml" 203 5279 5287
)
"src/bootCanvas.ml" 243 6093 6100 "src/bootCanvas.ml" 243 6093 6102
type(
  fill_param option
)
ident(
  int_ref fc "src/bootCanvas.ml" 242 6069 6083 "src/bootCanvas.ml" 242 6069 6085
)
"src/bootCanvas.ml" 243 6093 6103 "src/bootCanvas.ml" 243 6093 6105
type(
  fill_param option
)
ident(
  int_ref sc "src/bootCanvas.ml" 242 6069 6086 "src/bootCanvas.ml" 242 6069 6088
)
"src/bootCanvas.ml" 243 6093 6112 "src/bootCanvas.ml" 243 6093 6114
type(
  unit
)
"src/bootCanvas.ml" 243 6093 6118 "src/bootCanvas.ml" 243 6093 6122
type(
  float * float * float * float -> unit
)
ident(
  int_ref rect "src/bootCanvas.ml" 236 5971 5975 "src/bootCanvas.ml" 236 5971 5979
)
"src/bootCanvas.ml" 243 6093 6123 "src/bootCanvas.ml" 243 6093 6124
type(
  float * float * float * float
)
ident(
  int_ref r "src/bootCanvas.ml" 242 6069 6089 "src/bootCanvas.ml" 242 6069 6090
)
"src/bootCanvas.ml" 243 6093 6118 "src/bootCanvas.ml" 243 6093 6124
type(
  unit
)
"src/bootCanvas.ml" 243 6093 6112 "src/bootCanvas.ml" 243 6093 6124
type(
  unit -> unit
)
"src/bootCanvas.ml" 243 6093 6107 "src/bootCanvas.ml" 243 6093 6125
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 243 6093 6106 "src/bootCanvas.ml" 243 6093 6126
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 243 6093 6095 "src/bootCanvas.ml" 243 6093 6126
type(
  unit
)
"src/bootCanvas.ml" 242 6069 6089 "src/bootCanvas.ml" 243 6093 6126
type(
  float * float * float * float -> unit
)
"src/bootCanvas.ml" 242 6069 6086 "src/bootCanvas.ml" 243 6093 6126
type(
  fill_param option -> float * float * float * float -> unit
)
"src/bootCanvas.ml" 242 6069 6083 "src/bootCanvas.ml" 243 6093 6126
type(
  fill_param option ->
  fill_param option -> float * float * float * float -> unit
)
"src/bootCanvas.ml" 245 6128 6132 "src/bootCanvas.ml" 245 6128 6143
type(
  fill_param option -> fill_param option -> float * float -> int -> unit
)
ident(
  def fill_square "src/bootCanvas.ml" 248 6226 6226 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 245 6128 6144 "src/bootCanvas.ml" 245 6128 6146
type(
  fill_param option
)
ident(
  def fc "src/bootCanvas.ml" 245 6128 6147 "src/bootCanvas.ml" 246 6160 6223
)
"src/bootCanvas.ml" 245 6128 6147 "src/bootCanvas.ml" 245 6128 6149
type(
  fill_param option
)
ident(
  def sc "src/bootCanvas.ml" 245 6128 6150 "src/bootCanvas.ml" 246 6160 6223
)
"src/bootCanvas.ml" 245 6128 6151 "src/bootCanvas.ml" 245 6128 6152
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 245 6128 6156 "src/bootCanvas.ml" 246 6160 6223
)
"src/bootCanvas.ml" 245 6128 6153 "src/bootCanvas.ml" 245 6128 6154
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 245 6128 6156 "src/bootCanvas.ml" 246 6160 6223
)
"src/bootCanvas.ml" 245 6128 6151 "src/bootCanvas.ml" 245 6128 6154
type(
  float * float
)
"src/bootCanvas.ml" 245 6128 6156 "src/bootCanvas.ml" 245 6128 6157
type(
  int
)
ident(
  def w "src/bootCanvas.ml" 246 6160 6162 "src/bootCanvas.ml" 246 6160 6223
)
"src/bootCanvas.ml" 246 6160 6162 "src/bootCanvas.ml" 246 6160 6171
type(
  fill_param option ->
  fill_param option -> float * float * float * float -> unit
)
ident(
  int_ref fill_rect "src/bootCanvas.ml" 242 6069 6073 "src/bootCanvas.ml" 242 6069 6082
)
"src/bootCanvas.ml" 246 6160 6172 "src/bootCanvas.ml" 246 6160 6174
type(
  fill_param option
)
ident(
  int_ref fc "src/bootCanvas.ml" 245 6128 6144 "src/bootCanvas.ml" 245 6128 6146
)
"src/bootCanvas.ml" 246 6160 6175 "src/bootCanvas.ml" 246 6160 6177
type(
  fill_param option
)
ident(
  int_ref sc "src/bootCanvas.ml" 245 6128 6147 "src/bootCanvas.ml" 245 6128 6149
)
"src/bootCanvas.ml" 246 6160 6179 "src/bootCanvas.ml" 246 6160 6184
type(
  int -> int -> int -> int -> float * float * float * float
)
ident(
  int_ref _rect "src/bootCanvas.ml" 26 620 624 "src/bootCanvas.ml" 26 620 629
)
"src/bootCanvas.ml" 246 6160 6186 "src/bootCanvas.ml" 246 6160 6198
type(
  float -> int
)
ident(
  ext_ref Pervasives.int_of_float
)
"src/bootCanvas.ml" 246 6160 6199 "src/bootCanvas.ml" 246 6160 6200
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 245 6128 6151 "src/bootCanvas.ml" 245 6128 6152
)
"src/bootCanvas.ml" 246 6160 6186 "src/bootCanvas.ml" 246 6160 6200
type(
  int
)
"src/bootCanvas.ml" 246 6160 6203 "src/bootCanvas.ml" 246 6160 6215
type(
  float -> int
)
ident(
  ext_ref Pervasives.int_of_float
)
"src/bootCanvas.ml" 246 6160 6216 "src/bootCanvas.ml" 246 6160 6217
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 245 6128 6153 "src/bootCanvas.ml" 245 6128 6154
)
"src/bootCanvas.ml" 246 6160 6203 "src/bootCanvas.ml" 246 6160 6217
type(
  int
)
"src/bootCanvas.ml" 246 6160 6219 "src/bootCanvas.ml" 246 6160 6220
type(
  int
)
ident(
  int_ref w "src/bootCanvas.ml" 245 6128 6156 "src/bootCanvas.ml" 245 6128 6157
)
"src/bootCanvas.ml" 246 6160 6221 "src/bootCanvas.ml" 246 6160 6222
type(
  int
)
ident(
  int_ref w "src/bootCanvas.ml" 245 6128 6156 "src/bootCanvas.ml" 245 6128 6157
)
"src/bootCanvas.ml" 246 6160 6179 "src/bootCanvas.ml" 246 6160 6222
type(
  float * float * float * float
)
"src/bootCanvas.ml" 246 6160 6162 "src/bootCanvas.ml" 246 6160 6223
type(
  unit
)
"src/bootCanvas.ml" 245 6128 6156 "src/bootCanvas.ml" 246 6160 6223
type(
  int -> unit
)
"src/bootCanvas.ml" 245 6128 6150 "src/bootCanvas.ml" 246 6160 6223
type(
  float * float -> int -> unit
)
"src/bootCanvas.ml" 245 6128 6147 "src/bootCanvas.ml" 246 6160 6223
type(
  fill_param option -> float * float -> int -> unit
)
"src/bootCanvas.ml" 245 6128 6144 "src/bootCanvas.ml" 246 6160 6223
type(
  fill_param option -> fill_param option -> float * float -> int -> unit
)
"src/bootCanvas.ml" 248 6226 6230 "src/bootCanvas.ml" 248 6226 6239
type(
  unit -> unit
)
ident(
  def clear_all "src/bootCanvas.ml" 255 6400 6400 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 248 6226 6240 "src/bootCanvas.ml" 248 6226 6242
type(
  unit
)
"src/bootCanvas.ml" 249 6245 6247 "src/bootCanvas.ml" 249 6245 6251
type(
  (Dom_html.canvasElement Js.t -> unit) -> unit
)
ident(
  int_ref wrap "src/bootCanvas.ml" 49 1104 1108 "src/bootCanvas.ml" 49 1104 1112
)
"src/bootCanvas.ml" 249 6245 6257 "src/bootCanvas.ml" 249 6245 6263
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 250 6267 6273 "src/bootCanvas.ml" 252 6358 6392
)
"src/bootCanvas.ml" 250 6267 6277 "src/bootCanvas.ml" 250 6267 6278
type(
  float
)
ident(
  def w "src/bootCanvas.ml" 252 6358 6367 "src/bootCanvas.ml" 252 6358 6392
)
"src/bootCanvas.ml" 250 6267 6281 "src/bootCanvas.ml" 250 6267 6293
type(
  int -> float
)
ident(
  ext_ref Pervasives.float_of_int
)
"src/bootCanvas.ml" 250 6267 6295 "src/bootCanvas.ml" 250 6267 6301
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  int_ref x "src/bootCanvas.ml" 250 6267 6295 "src/bootCanvas.ml" 250 6267 6310
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 250 6267 6295 "src/bootCanvas.ml" 250 6267 6310
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref canvas "src/bootCanvas.ml" 249 6245 6257 "src/bootCanvas.ml" 249 6245 6263
)
"src/bootCanvas.ml" 250 6267 6295 "src/bootCanvas.ml" 250 6267 6310
type(
  int
)
type(
  int
)
type(
  int
)
type(
  int
)
ident(
  int_ref M.res "src/bootCanvas.ml" 250 6267 6295 "src/bootCanvas.ml" 250 6267 6310
)
type(
  int
)
type(
  int
)
type(
  int
)
type(
  int
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 250 6267 6295 "src/bootCanvas.ml" 250 6267 6310
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  int Js.prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  def x "src/bootCanvas.ml" 250 6267 6295 "src/bootCanvas.ml" 250 6267 6310
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  int
)
ident(
  def res "src/bootCanvas.ml" 250 6267 6310 "src/bootCanvas.ml" 250 6267 6310
)
type(
  'a
)
type(
  string
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 250 6267 6295 "src/bootCanvas.ml" 250 6267 6310
)
type(
  Dom_html.canvasElement Js.t -> string -> 'a
)
ident(
  ext_ref Js.Unsafe.get
)
type(
  'a
)
ident(
  def jsoo_res "src/bootCanvas.ml" 250 6267 6295 "src/bootCanvas.ml" 250 6267 6310
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 250 6267 6295 "src/bootCanvas.ml" 250 6267 6310
)
"src/bootCanvas.ml" 250 6267 6281 "src/bootCanvas.ml" 250 6267 6311
type(
  float
)
"src/bootCanvas.ml" 251 6312 6322 "src/bootCanvas.ml" 251 6312 6323
type(
  float
)
ident(
  def h "src/bootCanvas.ml" 252 6358 6367 "src/bootCanvas.ml" 252 6358 6392
)
"src/bootCanvas.ml" 251 6312 6326 "src/bootCanvas.ml" 251 6312 6338
type(
  int -> float
)
ident(
  ext_ref Pervasives.float_of_int
)
"src/bootCanvas.ml" 251 6312 6340 "src/bootCanvas.ml" 251 6312 6346
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  int_ref x "src/bootCanvas.ml" 251 6312 6340 "src/bootCanvas.ml" 251 6312 6356
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 251 6312 6340 "src/bootCanvas.ml" 251 6312 6356
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref canvas "src/bootCanvas.ml" 249 6245 6257 "src/bootCanvas.ml" 249 6245 6263
)
"src/bootCanvas.ml" 251 6312 6340 "src/bootCanvas.ml" 251 6312 6356
type(
  int
)
type(
  int
)
type(
  int
)
type(
  int
)
ident(
  int_ref M.res "src/bootCanvas.ml" 251 6312 6340 "src/bootCanvas.ml" 251 6312 6356
)
type(
  int
)
type(
  int
)
type(
  int
)
type(
  int
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 251 6312 6340 "src/bootCanvas.ml" 251 6312 6356
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  int Js.prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  def x "src/bootCanvas.ml" 251 6312 6340 "src/bootCanvas.ml" 251 6312 6356
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  int
)
ident(
  def res "src/bootCanvas.ml" 251 6312 6356 "src/bootCanvas.ml" 251 6312 6356
)
type(
  'b
)
type(
  string
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 251 6312 6340 "src/bootCanvas.ml" 251 6312 6356
)
type(
  Dom_html.canvasElement Js.t -> string -> 'b
)
ident(
  ext_ref Js.Unsafe.get
)
type(
  'b
)
ident(
  def jsoo_res "src/bootCanvas.ml" 251 6312 6340 "src/bootCanvas.ml" 251 6312 6356
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 251 6312 6340 "src/bootCanvas.ml" 251 6312 6356
)
"src/bootCanvas.ml" 251 6312 6326 "src/bootCanvas.ml" 251 6312 6357
type(
  float
)
"src/bootCanvas.ml" 252 6358 6367 "src/bootCanvas.ml" 252 6358 6377
type(
  float * float * float * float -> unit
)
ident(
  int_ref clear_rect "src/bootCanvas.ml" 231 5852 5856 "src/bootCanvas.ml" 231 5852 5866
)
"src/bootCanvas.ml" 252 6358 6379 "src/bootCanvas.ml" 252 6358 6381
type(
  float
)
"src/bootCanvas.ml" 252 6358 6383 "src/bootCanvas.ml" 252 6358 6385
type(
  float
)
"src/bootCanvas.ml" 252 6358 6387 "src/bootCanvas.ml" 252 6358 6388
type(
  float
)
ident(
  int_ref w "src/bootCanvas.ml" 250 6267 6277 "src/bootCanvas.ml" 250 6267 6278
)
"src/bootCanvas.ml" 252 6358 6390 "src/bootCanvas.ml" 252 6358 6391
type(
  float
)
ident(
  int_ref h "src/bootCanvas.ml" 251 6312 6322 "src/bootCanvas.ml" 251 6312 6323
)
"src/bootCanvas.ml" 252 6358 6379 "src/bootCanvas.ml" 252 6358 6391
type(
  float * float * float * float
)
"src/bootCanvas.ml" 252 6358 6367 "src/bootCanvas.ml" 252 6358 6392
type(
  unit
)
"src/bootCanvas.ml" 250 6267 6273 "src/bootCanvas.ml" 252 6358 6392
type(
  unit
)
"src/bootCanvas.ml" 249 6245 6257 "src/bootCanvas.ml" 252 6358 6392
type(
  Dom_html.canvasElement Js.t -> unit
)
"src/bootCanvas.ml" 249 6245 6247 "src/bootCanvas.ml" 253 6393 6398
type(
  unit
)
"src/bootCanvas.ml" 248 6226 6240 "src/bootCanvas.ml" 253 6393 6398
type(
  unit -> unit
)
"src/bootCanvas.ml" 255 6400 6404 "src/bootCanvas.ml" 255 6400 6412
type(
  fill_param option -> unit
)
ident(
  def fill_all "src/bootCanvas.ml" 263 6596 6596 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 255 6400 6413 "src/bootCanvas.ml" 255 6400 6422
type(
  fill_param option
)
ident(
  def color_str "src/bootCanvas.ml" 256 6425 6427 "src/bootCanvas.ml" 260 6588 6593
)
"src/bootCanvas.ml" 256 6425 6427 "src/bootCanvas.ml" 256 6425 6431
type(
  (Dom_html.canvasElement Js.t -> unit) -> unit
)
ident(
  int_ref wrap "src/bootCanvas.ml" 49 1104 1108 "src/bootCanvas.ml" 49 1104 1112
)
"src/bootCanvas.ml" 256 6425 6437 "src/bootCanvas.ml" 256 6425 6443
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 257 6447 6453 "src/bootCanvas.ml" 259 6538 6587
)
"src/bootCanvas.ml" 257 6447 6457 "src/bootCanvas.ml" 257 6447 6458
type(
  float
)
ident(
  def w "src/bootCanvas.ml" 259 6538 6547 "src/bootCanvas.ml" 259 6538 6587
)
"src/bootCanvas.ml" 257 6447 6461 "src/bootCanvas.ml" 257 6447 6473
type(
  int -> float
)
ident(
  ext_ref Pervasives.float_of_int
)
"src/bootCanvas.ml" 257 6447 6475 "src/bootCanvas.ml" 257 6447 6481
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  int_ref x "src/bootCanvas.ml" 257 6447 6475 "src/bootCanvas.ml" 257 6447 6490
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 257 6447 6475 "src/bootCanvas.ml" 257 6447 6490
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref canvas "src/bootCanvas.ml" 256 6425 6437 "src/bootCanvas.ml" 256 6425 6443
)
"src/bootCanvas.ml" 257 6447 6475 "src/bootCanvas.ml" 257 6447 6490
type(
  int
)
type(
  int
)
type(
  int
)
type(
  int
)
ident(
  int_ref M.res "src/bootCanvas.ml" 257 6447 6475 "src/bootCanvas.ml" 257 6447 6490
)
type(
  int
)
type(
  int
)
type(
  int
)
type(
  int
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 257 6447 6475 "src/bootCanvas.ml" 257 6447 6490
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  int Js.prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  def x "src/bootCanvas.ml" 257 6447 6475 "src/bootCanvas.ml" 257 6447 6490
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  int
)
ident(
  def res "src/bootCanvas.ml" 257 6447 6490 "src/bootCanvas.ml" 257 6447 6490
)
type(
  'a
)
type(
  string
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 257 6447 6475 "src/bootCanvas.ml" 257 6447 6490
)
type(
  Dom_html.canvasElement Js.t -> string -> 'a
)
ident(
  ext_ref Js.Unsafe.get
)
type(
  'a
)
ident(
  def jsoo_res "src/bootCanvas.ml" 257 6447 6475 "src/bootCanvas.ml" 257 6447 6490
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 257 6447 6475 "src/bootCanvas.ml" 257 6447 6490
)
"src/bootCanvas.ml" 257 6447 6461 "src/bootCanvas.ml" 257 6447 6491
type(
  float
)
"src/bootCanvas.ml" 258 6492 6502 "src/bootCanvas.ml" 258 6492 6503
type(
  float
)
ident(
  def h "src/bootCanvas.ml" 259 6538 6547 "src/bootCanvas.ml" 259 6538 6587
)
"src/bootCanvas.ml" 258 6492 6506 "src/bootCanvas.ml" 258 6492 6518
type(
  int -> float
)
ident(
  ext_ref Pervasives.float_of_int
)
"src/bootCanvas.ml" 258 6492 6520 "src/bootCanvas.ml" 258 6492 6526
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  int_ref x "src/bootCanvas.ml" 258 6492 6520 "src/bootCanvas.ml" 258 6492 6536
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 258 6492 6520 "src/bootCanvas.ml" 258 6492 6536
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref canvas "src/bootCanvas.ml" 256 6425 6437 "src/bootCanvas.ml" 256 6425 6443
)
"src/bootCanvas.ml" 258 6492 6520 "src/bootCanvas.ml" 258 6492 6536
type(
  int
)
type(
  int
)
type(
  int
)
type(
  int
)
ident(
  int_ref M.res "src/bootCanvas.ml" 258 6492 6520 "src/bootCanvas.ml" 258 6492 6536
)
type(
  int
)
type(
  int
)
type(
  int
)
type(
  int
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 258 6492 6520 "src/bootCanvas.ml" 258 6492 6536
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  int Js.prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
)
ident(
  def x "src/bootCanvas.ml" 258 6492 6520 "src/bootCanvas.ml" 258 6492 6536
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop > ->
  < get : int; set : int -> unit > Js.gen_prop
)
type(
  < appendChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    attributes : Dom.attr Dom.namedNodeMap Js.t Js.readonly_prop;
    childNodes : Dom.node Dom.nodeList Js.t Js.prop;
    classList : Dom_html.tokenList Js.t Js.readonly_prop;
    className : Js.js_string Js.t Js.prop;
    clientHeight : int Js.readonly_prop; clientLeft : int Js.readonly_prop;
    clientTop : int Js.readonly_prop; clientWidth : int Js.readonly_prop;
    cloneNode : bool Js.t -> Dom.node Js.t Js.meth;
    compareDocumentPosition : Dom.node Js.t -> Dom.DocumentPosition.t Js.meth;
    dir : Js.js_string Js.t Js.prop;
    firstChild : Dom.node Js.t Js.opt Js.prop;
    getAttribute : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    getAttributeNode : Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getAttributeNodeNS : Js.js_string Js.t ->
                         Js.js_string Js.t -> Dom.attr Js.t Js.opt Js.meth;
    getBoundingClientRect : Dom_html.clientRect Js.t Js.meth;
    getClientRects : Dom_html.clientRectList Js.t Js.meth;
    getContext : Dom_html.context ->
                 Dom_html.canvasRenderingContext2D Js.t Js.meth;
    getElementsByTagName : Js.js_string Js.t ->
                           Dom.element Dom.nodeList Js.t Js.meth;
    hasAttribute : Js.js_string Js.t -> bool Js.t Js.meth;
    hasAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> bool Js.t Js.meth;
    hasChildNodes : bool Js.t Js.meth; height : int Js.prop;
    id : Js.js_string Js.t Js.prop; innerHTML : Js.js_string Js.t Js.prop;
    insertBefore : Dom.node Js.t ->
                   Dom.node Js.t Js.opt -> Dom.node Js.t Js.meth;
    lang : Js.js_string Js.t Js.prop;
    lastChild : Dom.node Js.t Js.opt Js.prop;
    lookupNamespaceURI : Js.js_string Js.t ->
                         Js.js_string Js.t Js.opt Js.meth;
    lookupPrefix : Js.js_string Js.t -> Js.js_string Js.t Js.opt Js.meth;
    namespaceURI : Js.js_string Js.t Js.opt Js.prop;
    nextSibling : Dom.node Js.t Js.opt Js.prop;
    nodeName : Js.js_string Js.t Js.readonly_prop;
    nodeType : Dom.nodeType Js.readonly_prop;
    nodeValue : Js.js_string Js.t Js.opt Js.readonly_prop;
    offsetHeight : int Js.readonly_prop; offsetLeft : int Js.readonly_prop;
    offsetParent : Dom_html.element Js.t Js.opt Js.readonly_prop;
    offsetTop : int Js.readonly_prop; offsetWidth : int Js.readonly_prop;
    onclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    ondblclick : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondrag : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    ondragend : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    ondragenter : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragleave : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondragover : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    ondragstart : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    ondrop : (Dom_html.canvasElement Js.t, Dom_html.dragEvent Js.t)
             Dom_html.event_listener Js.writeonly_prop;
    onkeydown : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onkeypress : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onkeyup : (Dom_html.canvasElement Js.t, Dom_html.keyboardEvent Js.t)
              Dom_html.event_listener Js.writeonly_prop;
    onmousedown : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmousemove : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseout : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                 Dom_html.event_listener Js.writeonly_prop;
    onmouseover : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                  Dom_html.event_listener Js.writeonly_prop;
    onmouseup : (Dom_html.canvasElement Js.t, Dom_html.mouseEvent Js.t)
                Dom_html.event_listener Js.writeonly_prop;
    onscroll : (Dom_html.canvasElement Js.t, Dom_html.event Js.t)
               Dom_html.event_listener Js.writeonly_prop;
    outerHTML : Js.js_string Js.t Js.prop;
    parentNode : Dom.node Js.t Js.opt Js.prop;
    previousSibling : Dom.node Js.t Js.opt Js.prop;
    querySelector : Js.js_string Js.t -> Dom_html.element Js.t Js.opt Js.meth;
    querySelectorAll : Js.js_string Js.t ->
                       Dom_html.element Dom.nodeList Js.t Js.meth;
    removeAttribute : Js.js_string Js.t -> unit Js.meth;
    removeAttributeNS : Js.js_string Js.t ->
                        Js.js_string Js.t -> unit Js.meth;
    removeAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.meth;
    removeChild : Dom.node Js.t -> Dom.node Js.t Js.meth;
    replaceChild : Dom.node Js.t -> Dom.node Js.t -> Dom.node Js.t Js.meth;
    scrollHeight : int Js.prop; scrollIntoView : bool Js.t -> unit Js.meth;
    scrollLeft : int Js.prop; scrollTop : int Js.prop;
    scrollWidth : int Js.prop;
    setAttribute : Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNS : Js.js_string Js.t ->
                     Js.js_string Js.t -> Js.js_string Js.t -> unit Js.meth;
    setAttributeNode : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    setAttributeNodeNS : Dom.attr Js.t -> Dom.attr Js.t Js.opt Js.meth;
    style : Dom_html.cssStyleDeclaration Js.t Js.prop;
    tagName : Js.js_string Js.t Js.readonly_prop;
    textContent : Js.js_string Js.t Js.opt Js.prop;
    title : Js.js_string Js.t Js.prop; toDataURL : Js.js_string Js.t Js.meth;
    width : int Js.prop >
  Js.t
)
type(
  int
)
ident(
  def res "src/bootCanvas.ml" 258 6492 6536 "src/bootCanvas.ml" 258 6492 6536
)
type(
  'b
)
type(
  string
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  int_ref jsoo_obj "src/bootCanvas.ml" 258 6492 6520 "src/bootCanvas.ml" 258 6492 6536
)
type(
  Dom_html.canvasElement Js.t -> string -> 'b
)
ident(
  ext_ref Js.Unsafe.get
)
type(
  'b
)
ident(
  def jsoo_res "src/bootCanvas.ml" 258 6492 6520 "src/bootCanvas.ml" 258 6492 6536
)
type(
  Dom_html.canvasElement Js.t
)
ident(
  def jsoo_obj "src/bootCanvas.ml" 258 6492 6520 "src/bootCanvas.ml" 258 6492 6536
)
"src/bootCanvas.ml" 258 6492 6506 "src/bootCanvas.ml" 258 6492 6537
type(
  float
)
"src/bootCanvas.ml" 259 6538 6547 "src/bootCanvas.ml" 259 6538 6556
type(
  fill_param option ->
  fill_param option -> float * float * float * float -> unit
)
ident(
  int_ref fill_rect "src/bootCanvas.ml" 242 6069 6073 "src/bootCanvas.ml" 242 6069 6082
)
"src/bootCanvas.ml" 259 6538 6557 "src/bootCanvas.ml" 259 6538 6566
type(
  fill_param option
)
ident(
  int_ref color_str "src/bootCanvas.ml" 255 6400 6413 "src/bootCanvas.ml" 255 6400 6422
)
"src/bootCanvas.ml" 259 6538 6567 "src/bootCanvas.ml" 259 6538 6571
type(
  fill_param option
)
"src/bootCanvas.ml" 259 6538 6574 "src/bootCanvas.ml" 259 6538 6576
type(
  float
)
"src/bootCanvas.ml" 259 6538 6578 "src/bootCanvas.ml" 259 6538 6580
type(
  float
)
"src/bootCanvas.ml" 259 6538 6582 "src/bootCanvas.ml" 259 6538 6583
type(
  float
)
ident(
  int_ref w "src/bootCanvas.ml" 257 6447 6457 "src/bootCanvas.ml" 257 6447 6458
)
"src/bootCanvas.ml" 259 6538 6585 "src/bootCanvas.ml" 259 6538 6586
type(
  float
)
ident(
  int_ref h "src/bootCanvas.ml" 258 6492 6502 "src/bootCanvas.ml" 258 6492 6503
)
"src/bootCanvas.ml" 259 6538 6574 "src/bootCanvas.ml" 259 6538 6586
type(
  float * float * float * float
)
"src/bootCanvas.ml" 259 6538 6547 "src/bootCanvas.ml" 259 6538 6587
type(
  unit
)
"src/bootCanvas.ml" 257 6447 6453 "src/bootCanvas.ml" 259 6538 6587
type(
  unit
)
"src/bootCanvas.ml" 256 6425 6437 "src/bootCanvas.ml" 259 6538 6587
type(
  Dom_html.canvasElement Js.t -> unit
)
"src/bootCanvas.ml" 256 6425 6427 "src/bootCanvas.ml" 260 6588 6593
type(
  unit
)
"src/bootCanvas.ml" 255 6400 6413 "src/bootCanvas.ml" 260 6588 6593
type(
  fill_param option -> unit
)
"src/bootCanvas.ml" 263 6596 6600 "src/bootCanvas.ml" 263 6596 6605
type(
  ?closed:bool -> (float * float) list -> unit
)
ident(
  def shape "src/bootCanvas.ml" 273 6898 6898 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 263 6596 6615 "src/bootCanvas.ml" 263 6596 6620
type(
  bool
)
type(
  bool
)
ident(
  int_ref *sth* "src/bootCanvas.ml" 263 6596 6615 "src/bootCanvas.ml" 263 6596 6620
)
type(
  bool option
)
type(
  bool option
)
type(
  bool
)
"src/bootCanvas.ml" 263 6596 6606 "src/bootCanvas.ml" 263 6596 6621
type(
  bool
)
"src/bootCanvas.ml" 263 6596 6622 "src/bootCanvas.ml" 263 6596 6628
type(
  (float * float) list
)
ident(
  def points "src/bootCanvas.ml" 264 6632 6634 "src/bootCanvas.ml" 271 6891 6896
)
"src/bootCanvas.ml" 264 6632 6634 "src/bootCanvas.ml" 264 6632 6641
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 264 6632 6647 "src/bootCanvas.ml" 264 6632 6653
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 264 6632 6654 "src/bootCanvas.ml" 270 6875 6890
)
"src/bootCanvas.ml" 264 6632 6654 "src/bootCanvas.ml" 264 6632 6657
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 265 6661 6667 "src/bootCanvas.ml" 270 6875 6890
)
"src/bootCanvas.ml" 265 6661 6673 "src/bootCanvas.ml" 265 6661 6679
type(
  (float * float) list
)
ident(
  int_ref points "src/bootCanvas.ml" 263 6596 6622 "src/bootCanvas.ml" 263 6596 6628
)
"src/bootCanvas.ml" 266 6685 6694 "src/bootCanvas.ml" 266 6685 6695
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 267 6717 6725 "src/bootCanvas.ml" 269 6831 6873
)
"src/bootCanvas.ml" 266 6685 6696 "src/bootCanvas.ml" 266 6685 6697
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 267 6717 6725 "src/bootCanvas.ml" 269 6831 6873
)
"src/bootCanvas.ml" 266 6685 6694 "src/bootCanvas.ml" 266 6685 6697
type(
  float * float
)
"src/bootCanvas.ml" 266 6685 6702 "src/bootCanvas.ml" 266 6685 6712
type(
  (float * float) list
)
ident(
  def point_list "src/bootCanvas.ml" 267 6717 6725 "src/bootCanvas.ml" 269 6831 6873
)
"src/bootCanvas.ml" 266 6685 6693 "src/bootCanvas.ml" 266 6685 6712
type(
  (float * float) list
)
"src/bootCanvas.ml" 267 6717 6729 "src/bootCanvas.ml" 267 6717 6730
type(
  unit
)
"src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6736
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a.
                      (#Dom_html.element as 'a) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 264 6632 6654 "src/bootCanvas.ml" 264 6632 6657
)
"src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6746
type(
  float -> float -> unit Js.meth
)
type(
  float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 267 6717 6748 "src/bootCanvas.ml" 267 6717 6749
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_d67bff3e "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 266 6685 6694 "src/bootCanvas.ml" 266 6685 6695
)
"src/bootCanvas.ml" 267 6717 6750 "src/bootCanvas.ml" 267 6717 6751
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_442f87c4 "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 266 6685 6696 "src/bootCanvas.ml" 266 6685 6697
)
"src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6746
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 267 6717 6752 "src/bootCanvas.ml" 267 6717 6752
)
type(
  'h
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_442f87c4 "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_d67bff3e "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'h
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'h
)
ident(
  def jsoo_res "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  float
)
ident(
  def jsoo_442f87c4 "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
type(
  float
)
ident(
  def jsoo_d67bff3e "src/bootCanvas.ml" 267 6717 6733 "src/bootCanvas.ml" 267 6717 6752
)
"src/bootCanvas.ml" 268 6756 6768 "src/bootCanvas.ml" 268 6756 6769
type(
  unit
)
"src/bootCanvas.ml" 268 6756 6772 "src/bootCanvas.ml" 268 6756 6781
type(
  (float * float -> unit) -> (float * float) list -> unit
)
ident(
  ext_ref List.iter
)
"src/bootCanvas.ml" 268 6756 6788 "src/bootCanvas.ml" 268 6756 6789
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
"src/bootCanvas.ml" 268 6756 6790 "src/bootCanvas.ml" 268 6756 6791
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
"src/bootCanvas.ml" 268 6756 6788 "src/bootCanvas.ml" 268 6756 6791
type(
  float * float
)
"src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6799
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'i.
                      (#Dom_html.element as 'i) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'j.
                      (#Dom_html.element as 'j) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'k.
                      (#Dom_html.element as 'k) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 264 6632 6654 "src/bootCanvas.ml" 264 6632 6657
)
"src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6809
type(
  float -> float -> unit Js.meth
)
type(
  float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 268 6756 6811 "src/bootCanvas.ml" 268 6756 6812
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_ee9e6243 "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 268 6756 6788 "src/bootCanvas.ml" 268 6756 6789
)
"src/bootCanvas.ml" 268 6756 6813 "src/bootCanvas.ml" 268 6756 6814
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_840a123d "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 268 6756 6790 "src/bootCanvas.ml" 268 6756 6791
)
"src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'l.
                      (#Dom_html.element as 'l) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'm.
                      (#Dom_html.element as 'm) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6809
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'n.
                      (#Dom_html.element as 'n) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'o.
                      (#Dom_html.element as 'o) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 268 6756 6815 "src/bootCanvas.ml" 268 6756 6815
)
type(
  'p
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_840a123d "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_ee9e6243 "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'p
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'p
)
ident(
  def jsoo_res "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  float
)
ident(
  def jsoo_840a123d "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
type(
  float
)
ident(
  def jsoo_ee9e6243 "src/bootCanvas.ml" 268 6756 6796 "src/bootCanvas.ml" 268 6756 6815
)
"src/bootCanvas.ml" 268 6756 6787 "src/bootCanvas.ml" 268 6756 6815
type(
  float * float -> unit
)
"src/bootCanvas.ml" 268 6756 6817 "src/bootCanvas.ml" 268 6756 6827
type(
  (float * float) list
)
ident(
  int_ref point_list "src/bootCanvas.ml" 266 6685 6702 "src/bootCanvas.ml" 266 6685 6712
)
"src/bootCanvas.ml" 268 6756 6772 "src/bootCanvas.ml" 268 6756 6827
type(
  unit
)
"src/bootCanvas.ml" 269 6831 6842 "src/bootCanvas.ml" 269 6831 6848
type(
  bool
)
ident(
  int_ref closed "src/bootCanvas.ml" 263 6596 6606 "src/bootCanvas.ml" 263 6596 6621
)
"src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6857
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'q.
                      (#Dom_html.element as 'q) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6873
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'r.
                      (#Dom_html.element as 'r) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 's.
                      (#Dom_html.element as 's) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6873
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 264 6632 6654 "src/bootCanvas.ml" 264 6632 6657
)
"src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6870
type(
  unit Js.meth
)
type(
  unit Js.meth
)
"src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6873
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6873
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6873
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 't.
                      (#Dom_html.element as 't) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'u.
                      (#Dom_html.element as 'u) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6870
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'v.
                      (#Dom_html.element as 'v) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'w.
                      (#Dom_html.element as 'w) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 269 6831 6873 "src/bootCanvas.ml" 269 6831 6873
)
type(
  'x
)
type(
  Js.Unsafe.any array
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6873
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'x
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'x
)
ident(
  def jsoo_res "src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6873
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 269 6831 6854 "src/bootCanvas.ml" 269 6831 6873
)
"src/bootCanvas.ml" 269 6831 6839 "src/bootCanvas.ml" 269 6831 6873
type(
  unit
)
type(
  unit
)
"src/bootCanvas.ml" 268 6756 6764 "src/bootCanvas.ml" 269 6831 6873
type(
  unit
)
"src/bootCanvas.ml" 267 6717 6725 "src/bootCanvas.ml" 269 6831 6873
type(
  unit
)
"src/bootCanvas.ml" 270 6875 6883 "src/bootCanvas.ml" 270 6875 6884
type(
  (float * float) list
)
"src/bootCanvas.ml" 270 6875 6888 "src/bootCanvas.ml" 270 6875 6890
type(
  unit
)
"src/bootCanvas.ml" 265 6661 6667 "src/bootCanvas.ml" 270 6875 6890
type(
  unit
)
"src/bootCanvas.ml" 264 6632 6654 "src/bootCanvas.ml" 270 6875 6890
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 264 6632 6647 "src/bootCanvas.ml" 270 6875 6890
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 264 6632 6634 "src/bootCanvas.ml" 271 6891 6896
type(
  unit
)
"src/bootCanvas.ml" 263 6596 6622 "src/bootCanvas.ml" 271 6891 6896
type(
  (float * float) list -> unit
)
"src/bootCanvas.ml" 263 6596 6606 "src/bootCanvas.ml" 271 6891 6896
type(
  ?closed:bool -> (float * float) list -> unit
)
type(
  (float * float) list -> unit
)
type(
  bool
)
type(
  bool option
)
ident(
  int_ref *opt* "src/bootCanvas.ml" 263 6596 6606 "src/bootCanvas.ml" 271 6891 6896
)
type(
  bool option
)
"src/bootCanvas.ml" 273 6898 6902 "src/bootCanvas.ml" 273 6898 6912
type(
  ?closed:bool ->
  fill_param option -> fill_param option -> (float * float) list -> unit
)
ident(
  def fill_shape "src/bootCanvas.ml" 276 7028 7028 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 273 6898 6922 "src/bootCanvas.ml" 273 6898 6927
type(
  bool
)
type(
  bool
)
ident(
  int_ref *sth* "src/bootCanvas.ml" 273 6898 6922 "src/bootCanvas.ml" 273 6898 6927
)
type(
  bool option
)
type(
  bool option
)
type(
  bool
)
"src/bootCanvas.ml" 273 6898 6913 "src/bootCanvas.ml" 273 6898 6928
type(
  bool
)
"src/bootCanvas.ml" 273 6898 6929 "src/bootCanvas.ml" 273 6898 6939
type(
  fill_param option
)
ident(
  def fill_color "src/bootCanvas.ml" 273 6898 6940 "src/bootCanvas.ml" 274 6963 7026
)
"src/bootCanvas.ml" 273 6898 6940 "src/bootCanvas.ml" 273 6898 6952
type(
  fill_param option
)
ident(
  def stroke_color "src/bootCanvas.ml" 273 6898 6953 "src/bootCanvas.ml" 274 6963 7026
)
"src/bootCanvas.ml" 273 6898 6953 "src/bootCanvas.ml" 273 6898 6959
type(
  (float * float) list
)
ident(
  def points "src/bootCanvas.ml" 274 6963 6965 "src/bootCanvas.ml" 274 6963 7026
)
"src/bootCanvas.ml" 274 6963 6965 "src/bootCanvas.ml" 274 6963 6969
type(
  fill_param option -> fill_param option -> (unit -> unit) list -> unit
)
ident(
  int_ref draw "src/bootCanvas.ml" 203 5279 5283 "src/bootCanvas.ml" 203 5279 5287
)
"src/bootCanvas.ml" 274 6963 6970 "src/bootCanvas.ml" 274 6963 6980
type(
  fill_param option
)
ident(
  int_ref fill_color "src/bootCanvas.ml" 273 6898 6929 "src/bootCanvas.ml" 273 6898 6939
)
"src/bootCanvas.ml" 274 6963 6981 "src/bootCanvas.ml" 274 6963 6993
type(
  fill_param option
)
ident(
  int_ref stroke_color "src/bootCanvas.ml" 273 6898 6940 "src/bootCanvas.ml" 273 6898 6952
)
"src/bootCanvas.ml" 274 6963 6999 "src/bootCanvas.ml" 274 6963 7001
type(
  unit
)
"src/bootCanvas.ml" 274 6963 7005 "src/bootCanvas.ml" 274 6963 7010
type(
  ?closed:bool -> (float * float) list -> unit
)
ident(
  int_ref shape "src/bootCanvas.ml" 263 6596 6600 "src/bootCanvas.ml" 263 6596 6605
)
"src/bootCanvas.ml" 274 6963 7011 "src/bootCanvas.ml" 274 6963 7018
type(
  bool
)
ident(
  int_ref closed "src/bootCanvas.ml" 273 6898 6913 "src/bootCanvas.ml" 273 6898 6928
)
"src/bootCanvas.ml" 274 6963 7019 "src/bootCanvas.ml" 274 6963 7025
type(
  (float * float) list
)
ident(
  int_ref points "src/bootCanvas.ml" 273 6898 6953 "src/bootCanvas.ml" 273 6898 6959
)
"src/bootCanvas.ml" 274 6963 7005 "src/bootCanvas.ml" 274 6963 7025
type(
  unit
)
"src/bootCanvas.ml" 274 6963 6999 "src/bootCanvas.ml" 274 6963 7025
type(
  unit -> unit
)
"src/bootCanvas.ml" 274 6963 6995 "src/bootCanvas.ml" 274 6963 7025
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 274 6963 6994 "src/bootCanvas.ml" 274 6963 7026
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 274 6963 6965 "src/bootCanvas.ml" 274 6963 7026
type(
  unit
)
"src/bootCanvas.ml" 273 6898 6953 "src/bootCanvas.ml" 274 6963 7026
type(
  (float * float) list -> unit
)
"src/bootCanvas.ml" 273 6898 6940 "src/bootCanvas.ml" 274 6963 7026
type(
  fill_param option -> (float * float) list -> unit
)
"src/bootCanvas.ml" 273 6898 6929 "src/bootCanvas.ml" 274 6963 7026
type(
  fill_param option -> fill_param option -> (float * float) list -> unit
)
"src/bootCanvas.ml" 273 6898 6913 "src/bootCanvas.ml" 274 6963 7026
type(
  ?closed:bool ->
  fill_param option -> fill_param option -> (float * float) list -> unit
)
type(
  fill_param option -> fill_param option -> (float * float) list -> unit
)
type(
  bool
)
type(
  bool option
)
ident(
  int_ref *opt* "src/bootCanvas.ml" 273 6898 6913 "src/bootCanvas.ml" 274 6963 7026
)
type(
  bool option
)
"src/bootCanvas.ml" 276 7028 7032 "src/bootCanvas.ml" 276 7028 7049
type(
  fill_param option -> fill_param option -> (float * float) list -> unit
)
ident(
  def fill_closed_shape "src/bootCanvas.ml" 278 7077 7077 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 276 7028 7052 "src/bootCanvas.ml" 276 7028 7062
type(
  ?closed:bool ->
  fill_param option -> fill_param option -> (float * float) list -> unit
)
ident(
  int_ref fill_shape "src/bootCanvas.ml" 273 6898 6902 "src/bootCanvas.ml" 273 6898 6912
)
"src/bootCanvas.ml" 276 7028 7071 "src/bootCanvas.ml" 276 7028 7075
type(
  bool
)
"src/bootCanvas.ml" 276 7028 7052 "src/bootCanvas.ml" 276 7028 7075
type(
  fill_param option -> fill_param option -> (float * float) list -> unit
)
"src/bootCanvas.ml" 278 7077 7081 "src/bootCanvas.ml" 278 7077 7094
type(
  fill_param option ->
  fill_param option ->
  float * float -> float * float -> float * float -> unit
)
ident(
  def fill_triangle "src/bootCanvas.ml" 282 7160 7160 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 278 7077 7095 "src/bootCanvas.ml" 278 7077 7097
type(
  fill_param option
)
ident(
  def fc "src/bootCanvas.ml" 278 7077 7098 "src/bootCanvas.ml" 279 7112 7156
)
"src/bootCanvas.ml" 278 7077 7098 "src/bootCanvas.ml" 278 7077 7100
type(
  fill_param option
)
ident(
  def sc "src/bootCanvas.ml" 278 7077 7101 "src/bootCanvas.ml" 279 7112 7156
)
"src/bootCanvas.ml" 278 7077 7101 "src/bootCanvas.ml" 278 7077 7103
type(
  float * float
)
ident(
  def pa "src/bootCanvas.ml" 278 7077 7104 "src/bootCanvas.ml" 279 7112 7156
)
"src/bootCanvas.ml" 278 7077 7104 "src/bootCanvas.ml" 278 7077 7106
type(
  float * float
)
ident(
  def pb "src/bootCanvas.ml" 278 7077 7107 "src/bootCanvas.ml" 279 7112 7156
)
"src/bootCanvas.ml" 278 7077 7107 "src/bootCanvas.ml" 278 7077 7109
type(
  float * float
)
ident(
  def pc "src/bootCanvas.ml" 279 7112 7114 "src/bootCanvas.ml" 279 7112 7156
)
"src/bootCanvas.ml" 279 7112 7114 "src/bootCanvas.ml" 279 7112 7124
type(
  ?closed:bool ->
  fill_param option -> fill_param option -> (float * float) list -> unit
)
ident(
  int_ref fill_shape "src/bootCanvas.ml" 273 6898 6902 "src/bootCanvas.ml" 273 6898 6912
)
"src/bootCanvas.ml" 279 7112 7133 "src/bootCanvas.ml" 279 7112 7137
type(
  bool
)
"src/bootCanvas.ml" 279 7112 7138 "src/bootCanvas.ml" 279 7112 7140
type(
  fill_param option
)
ident(
  int_ref fc "src/bootCanvas.ml" 278 7077 7095 "src/bootCanvas.ml" 278 7077 7097
)
"src/bootCanvas.ml" 279 7112 7141 "src/bootCanvas.ml" 279 7112 7143
type(
  fill_param option
)
ident(
  int_ref sc "src/bootCanvas.ml" 278 7077 7098 "src/bootCanvas.ml" 278 7077 7100
)
"src/bootCanvas.ml" 279 7112 7145 "src/bootCanvas.ml" 279 7112 7147
type(
  float * float
)
ident(
  int_ref pa "src/bootCanvas.ml" 278 7077 7101 "src/bootCanvas.ml" 278 7077 7103
)
"src/bootCanvas.ml" 279 7112 7149 "src/bootCanvas.ml" 279 7112 7151
type(
  float * float
)
ident(
  int_ref pb "src/bootCanvas.ml" 278 7077 7104 "src/bootCanvas.ml" 278 7077 7106
)
"src/bootCanvas.ml" 279 7112 7153 "src/bootCanvas.ml" 279 7112 7155
type(
  float * float
)
ident(
  int_ref pc "src/bootCanvas.ml" 278 7077 7107 "src/bootCanvas.ml" 278 7077 7109
)
type(
  (float * float) list
)
"src/bootCanvas.ml" 279 7112 7149 "src/bootCanvas.ml" 279 7112 7155
type(
  (float * float) list
)
"src/bootCanvas.ml" 279 7112 7145 "src/bootCanvas.ml" 279 7112 7155
type(
  (float * float) list
)
"src/bootCanvas.ml" 279 7112 7144 "src/bootCanvas.ml" 279 7112 7156
type(
  (float * float) list
)
"src/bootCanvas.ml" 279 7112 7114 "src/bootCanvas.ml" 279 7112 7156
type(
  unit
)
"src/bootCanvas.ml" 278 7077 7107 "src/bootCanvas.ml" 279 7112 7156
type(
  float * float -> unit
)
"src/bootCanvas.ml" 278 7077 7104 "src/bootCanvas.ml" 279 7112 7156
type(
  float * float -> float * float -> unit
)
"src/bootCanvas.ml" 278 7077 7101 "src/bootCanvas.ml" 279 7112 7156
type(
  float * float -> float * float -> float * float -> unit
)
"src/bootCanvas.ml" 278 7077 7098 "src/bootCanvas.ml" 279 7112 7156
type(
  fill_param option ->
  float * float -> float * float -> float * float -> unit
)
"src/bootCanvas.ml" 278 7077 7095 "src/bootCanvas.ml" 279 7112 7156
type(
  fill_param option ->
  fill_param option ->
  float * float -> float * float -> float * float -> unit
)
"src/bootCanvas.ml" 282 7160 7164 "src/bootCanvas.ml" 282 7160 7167
type(
  ?clockwise:bool -> float * float -> float -> float -> float -> unit
)
ident(
  def arc "src/bootCanvas.ml" 288 7370 7370 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 282 7160 7180 "src/bootCanvas.ml" 282 7160 7184
type(
  bool
)
type(
  bool
)
ident(
  int_ref *sth* "src/bootCanvas.ml" 282 7160 7180 "src/bootCanvas.ml" 282 7160 7184
)
type(
  bool option
)
type(
  bool option
)
type(
  bool
)
"src/bootCanvas.ml" 282 7160 7168 "src/bootCanvas.ml" 282 7160 7185
type(
  bool
)
"src/bootCanvas.ml" 282 7160 7187 "src/bootCanvas.ml" 282 7160 7188
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 282 7160 7193 "src/bootCanvas.ml" 286 7363 7368
)
"src/bootCanvas.ml" 282 7160 7190 "src/bootCanvas.ml" 282 7160 7191
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 282 7160 7193 "src/bootCanvas.ml" 286 7363 7368
)
"src/bootCanvas.ml" 282 7160 7187 "src/bootCanvas.ml" 282 7160 7191
type(
  float * float
)
"src/bootCanvas.ml" 282 7160 7193 "src/bootCanvas.ml" 282 7160 7199
type(
  float
)
ident(
  def radius "src/bootCanvas.ml" 282 7160 7200 "src/bootCanvas.ml" 286 7363 7368
)
"src/bootCanvas.ml" 282 7160 7200 "src/bootCanvas.ml" 282 7160 7202
type(
  float
)
ident(
  def sa "src/bootCanvas.ml" 282 7160 7203 "src/bootCanvas.ml" 286 7363 7368
)
"src/bootCanvas.ml" 282 7160 7203 "src/bootCanvas.ml" 282 7160 7205
type(
  float
)
ident(
  def ea "src/bootCanvas.ml" 283 7208 7210 "src/bootCanvas.ml" 286 7363 7368
)
"src/bootCanvas.ml" 283 7208 7210 "src/bootCanvas.ml" 283 7208 7217
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 283 7208 7223 "src/bootCanvas.ml" 283 7208 7229
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 283 7208 7230 "src/bootCanvas.ml" 285 7308 7362
)
"src/bootCanvas.ml" 283 7208 7230 "src/bootCanvas.ml" 283 7208 7233
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 284 7237 7243 "src/bootCanvas.ml" 285 7308 7362
)
"src/bootCanvas.ml" 284 7237 7247 "src/bootCanvas.ml" 284 7237 7260
type(
  bool Js.t
)
ident(
  def anticlockwise "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
"src/bootCanvas.ml" 284 7237 7266 "src/bootCanvas.ml" 284 7237 7275
type(
  bool
)
ident(
  int_ref clockwise "src/bootCanvas.ml" 282 7160 7168 "src/bootCanvas.ml" 282 7160 7185
)
"src/bootCanvas.ml" 284 7237 7281 "src/bootCanvas.ml" 284 7237 7290
type(
  bool Js.t
)
ident(
  ext_ref Js._false
)
"src/bootCanvas.ml" 284 7237 7296 "src/bootCanvas.ml" 284 7237 7304
type(
  bool Js.t
)
ident(
  ext_ref Js._true
)
"src/bootCanvas.ml" 284 7237 7263 "src/bootCanvas.ml" 284 7237 7304
type(
  bool Js.t
)
"src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7317
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a.
                      (#Dom_html.element as 'a) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 283 7208 7230 "src/bootCanvas.ml" 283 7208 7233
)
"src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7324
type(
  float -> float -> float -> float -> float -> bool Js.t -> unit Js.meth
)
type(
  float -> float -> float -> float -> float -> bool Js.t -> unit Js.meth
)
"src/bootCanvas.ml" 285 7308 7326 "src/bootCanvas.ml" 285 7308 7327
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_8b5c7b8a "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 282 7160 7187 "src/bootCanvas.ml" 282 7160 7188
)
"src/bootCanvas.ml" 285 7308 7329 "src/bootCanvas.ml" 285 7308 7330
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_e9b56724 "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 282 7160 7190 "src/bootCanvas.ml" 282 7160 7191
)
"src/bootCanvas.ml" 285 7308 7332 "src/bootCanvas.ml" 285 7308 7338
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_b13fd6ae "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float
)
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 282 7160 7193 "src/bootCanvas.ml" 282 7160 7199
)
"src/bootCanvas.ml" 285 7308 7340 "src/bootCanvas.ml" 285 7308 7342
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_5d84d34e "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float
)
type(
  float
)
ident(
  int_ref sa "src/bootCanvas.ml" 282 7160 7200 "src/bootCanvas.ml" 282 7160 7202
)
"src/bootCanvas.ml" 285 7308 7344 "src/bootCanvas.ml" 285 7308 7346
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_ec84381f "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float
)
type(
  float
)
ident(
  int_ref ea "src/bootCanvas.ml" 282 7160 7203 "src/bootCanvas.ml" 282 7160 7205
)
"src/bootCanvas.ml" 285 7308 7348 "src/bootCanvas.ml" 285 7308 7361
type(
  unit
)
type(
  bool Js.t
)
type(
  bool Js.t
)
ident(
  int_ref jsoo_9c02a5aa "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  bool Js.t
)
type(
  bool Js.t
)
ident(
  int_ref anticlockwise "src/bootCanvas.ml" 284 7237 7247 "src/bootCanvas.ml" 284 7237 7260
)
"src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> float -> bool Js.t -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7324
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> float -> bool Js.t -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 285 7308 7362 "src/bootCanvas.ml" 285 7308 7362
)
type(
  'h
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  bool Js.t
)
ident(
  int_ref jsoo_9c02a5aa "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  bool Js.t -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_ec84381f "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_5d84d34e "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_b13fd6ae "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_e9b56724 "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_8b5c7b8a "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'h
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'h
)
ident(
  def jsoo_res "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  bool Js.t
)
ident(
  def jsoo_9c02a5aa "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float
)
ident(
  def jsoo_ec84381f "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float
)
ident(
  def jsoo_5d84d34e "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float
)
ident(
  def jsoo_b13fd6ae "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float
)
ident(
  def jsoo_e9b56724 "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
type(
  float
)
ident(
  def jsoo_8b5c7b8a "src/bootCanvas.ml" 285 7308 7314 "src/bootCanvas.ml" 285 7308 7362
)
"src/bootCanvas.ml" 284 7237 7243 "src/bootCanvas.ml" 285 7308 7362
type(
  unit
)
"src/bootCanvas.ml" 283 7208 7230 "src/bootCanvas.ml" 285 7308 7362
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 283 7208 7223 "src/bootCanvas.ml" 285 7308 7362
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 283 7208 7210 "src/bootCanvas.ml" 286 7363 7368
type(
  unit
)
"src/bootCanvas.ml" 282 7160 7203 "src/bootCanvas.ml" 286 7363 7368
type(
  float -> unit
)
"src/bootCanvas.ml" 282 7160 7200 "src/bootCanvas.ml" 286 7363 7368
type(
  float -> float -> unit
)
"src/bootCanvas.ml" 282 7160 7193 "src/bootCanvas.ml" 286 7363 7368
type(
  float -> float -> float -> unit
)
"src/bootCanvas.ml" 282 7160 7186 "src/bootCanvas.ml" 286 7363 7368
type(
  float * float -> float -> float -> float -> unit
)
"src/bootCanvas.ml" 282 7160 7168 "src/bootCanvas.ml" 286 7363 7368
type(
  ?clockwise:bool -> float * float -> float -> float -> float -> unit
)
type(
  float * float -> float -> float -> float -> unit
)
type(
  bool
)
type(
  bool option
)
ident(
  int_ref *opt* "src/bootCanvas.ml" 282 7160 7168 "src/bootCanvas.ml" 286 7363 7368
)
type(
  bool option
)
"src/bootCanvas.ml" 288 7370 7374 "src/bootCanvas.ml" 288 7370 7382
type(
  ?clockwise:bool ->
  fill_param option ->
  fill_param option -> float * float -> float -> float -> float -> unit
)
ident(
  def fill_arc "src/bootCanvas.ml" 291 7471 7471 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 288 7370 7395 "src/bootCanvas.ml" 288 7370 7399
type(
  bool
)
type(
  bool
)
ident(
  int_ref *sth* "src/bootCanvas.ml" 288 7370 7395 "src/bootCanvas.ml" 288 7370 7399
)
type(
  bool option
)
type(
  bool option
)
type(
  bool
)
"src/bootCanvas.ml" 288 7370 7383 "src/bootCanvas.ml" 288 7370 7400
type(
  bool
)
"src/bootCanvas.ml" 288 7370 7401 "src/bootCanvas.ml" 288 7370 7403
type(
  fill_param option
)
ident(
  def fc "src/bootCanvas.ml" 288 7370 7404 "src/bootCanvas.ml" 289 7424 7467
)
"src/bootCanvas.ml" 288 7370 7404 "src/bootCanvas.ml" 288 7370 7406
type(
  fill_param option
)
ident(
  def sc "src/bootCanvas.ml" 288 7370 7407 "src/bootCanvas.ml" 289 7424 7467
)
"src/bootCanvas.ml" 288 7370 7407 "src/bootCanvas.ml" 288 7370 7408
type(
  float * float
)
ident(
  def p "src/bootCanvas.ml" 288 7370 7409 "src/bootCanvas.ml" 289 7424 7467
)
"src/bootCanvas.ml" 288 7370 7409 "src/bootCanvas.ml" 288 7370 7415
type(
  float
)
ident(
  def radius "src/bootCanvas.ml" 288 7370 7416 "src/bootCanvas.ml" 289 7424 7467
)
"src/bootCanvas.ml" 288 7370 7416 "src/bootCanvas.ml" 288 7370 7418
type(
  float
)
ident(
  def sa "src/bootCanvas.ml" 288 7370 7419 "src/bootCanvas.ml" 289 7424 7467
)
"src/bootCanvas.ml" 288 7370 7419 "src/bootCanvas.ml" 288 7370 7421
type(
  float
)
ident(
  def ea "src/bootCanvas.ml" 289 7424 7426 "src/bootCanvas.ml" 289 7424 7467
)
"src/bootCanvas.ml" 289 7424 7426 "src/bootCanvas.ml" 289 7424 7430
type(
  fill_param option -> fill_param option -> (unit -> unit) list -> unit
)
ident(
  int_ref draw "src/bootCanvas.ml" 203 5279 5283 "src/bootCanvas.ml" 203 5279 5287
)
"src/bootCanvas.ml" 289 7424 7431 "src/bootCanvas.ml" 289 7424 7433
type(
  fill_param option
)
ident(
  int_ref fc "src/bootCanvas.ml" 288 7370 7401 "src/bootCanvas.ml" 288 7370 7403
)
"src/bootCanvas.ml" 289 7424 7434 "src/bootCanvas.ml" 289 7424 7436
type(
  fill_param option
)
ident(
  int_ref sc "src/bootCanvas.ml" 288 7370 7404 "src/bootCanvas.ml" 288 7370 7406
)
"src/bootCanvas.ml" 289 7424 7442 "src/bootCanvas.ml" 289 7424 7444
type(
  unit
)
"src/bootCanvas.ml" 289 7424 7448 "src/bootCanvas.ml" 289 7424 7451
type(
  ?clockwise:bool -> float * float -> float -> float -> float -> unit
)
ident(
  int_ref arc "src/bootCanvas.ml" 282 7160 7164 "src/bootCanvas.ml" 282 7160 7167
)
"src/bootCanvas.ml" 289 7424 7452 "src/bootCanvas.ml" 289 7424 7453
type(
  float * float
)
ident(
  int_ref p "src/bootCanvas.ml" 288 7370 7407 "src/bootCanvas.ml" 288 7370 7408
)
"src/bootCanvas.ml" 289 7424 7454 "src/bootCanvas.ml" 289 7424 7460
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 288 7370 7409 "src/bootCanvas.ml" 288 7370 7415
)
"src/bootCanvas.ml" 289 7424 7461 "src/bootCanvas.ml" 289 7424 7463
type(
  float
)
ident(
  int_ref sa "src/bootCanvas.ml" 288 7370 7416 "src/bootCanvas.ml" 288 7370 7418
)
"src/bootCanvas.ml" 289 7424 7464 "src/bootCanvas.ml" 289 7424 7466
type(
  float
)
ident(
  int_ref ea "src/bootCanvas.ml" 288 7370 7419 "src/bootCanvas.ml" 288 7370 7421
)
"src/bootCanvas.ml" 289 7424 7448 "src/bootCanvas.ml" 289 7424 7466
type(
  unit
)
"src/bootCanvas.ml" 289 7424 7442 "src/bootCanvas.ml" 289 7424 7466
type(
  unit -> unit
)
"src/bootCanvas.ml" 289 7424 7438 "src/bootCanvas.ml" 289 7424 7466
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 289 7424 7437 "src/bootCanvas.ml" 289 7424 7467
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 289 7424 7426 "src/bootCanvas.ml" 289 7424 7467
type(
  unit
)
"src/bootCanvas.ml" 288 7370 7419 "src/bootCanvas.ml" 289 7424 7467
type(
  float -> unit
)
"src/bootCanvas.ml" 288 7370 7416 "src/bootCanvas.ml" 289 7424 7467
type(
  float -> float -> unit
)
"src/bootCanvas.ml" 288 7370 7409 "src/bootCanvas.ml" 289 7424 7467
type(
  float -> float -> float -> unit
)
"src/bootCanvas.ml" 288 7370 7407 "src/bootCanvas.ml" 289 7424 7467
type(
  float * float -> float -> float -> float -> unit
)
"src/bootCanvas.ml" 288 7370 7404 "src/bootCanvas.ml" 289 7424 7467
type(
  fill_param option -> float * float -> float -> float -> float -> unit
)
"src/bootCanvas.ml" 288 7370 7401 "src/bootCanvas.ml" 289 7424 7467
type(
  fill_param option ->
  fill_param option -> float * float -> float -> float -> float -> unit
)
"src/bootCanvas.ml" 288 7370 7383 "src/bootCanvas.ml" 289 7424 7467
type(
  ?clockwise:bool ->
  fill_param option ->
  fill_param option -> float * float -> float -> float -> float -> unit
)
type(
  fill_param option ->
  fill_param option -> float * float -> float -> float -> float -> unit
)
type(
  bool
)
type(
  bool option
)
ident(
  int_ref *opt* "src/bootCanvas.ml" 288 7370 7383 "src/bootCanvas.ml" 289 7424 7467
)
type(
  bool option
)
"src/bootCanvas.ml" 291 7471 7475 "src/bootCanvas.ml" 291 7471 7486
type(
  fill_param option -> fill_param option -> float * float -> float -> unit
)
ident(
  def fill_circle "src/bootCanvas.ml" 295 7555 7555 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 291 7471 7487 "src/bootCanvas.ml" 291 7471 7489
type(
  fill_param option
)
ident(
  def fc "src/bootCanvas.ml" 291 7471 7490 "src/bootCanvas.ml" 292 7504 7552
)
"src/bootCanvas.ml" 291 7471 7490 "src/bootCanvas.ml" 291 7471 7492
type(
  fill_param option
)
ident(
  def sc "src/bootCanvas.ml" 291 7471 7493 "src/bootCanvas.ml" 292 7504 7552
)
"src/bootCanvas.ml" 291 7471 7493 "src/bootCanvas.ml" 291 7471 7494
type(
  float * float
)
ident(
  def p "src/bootCanvas.ml" 291 7471 7495 "src/bootCanvas.ml" 292 7504 7552
)
"src/bootCanvas.ml" 291 7471 7495 "src/bootCanvas.ml" 291 7471 7501
type(
  float
)
ident(
  def radius "src/bootCanvas.ml" 292 7504 7506 "src/bootCanvas.ml" 292 7504 7552
)
"src/bootCanvas.ml" 292 7504 7506 "src/bootCanvas.ml" 292 7504 7514
type(
  ?clockwise:bool ->
  fill_param option ->
  fill_param option -> float * float -> float -> float -> float -> unit
)
ident(
  int_ref fill_arc "src/bootCanvas.ml" 288 7370 7374 "src/bootCanvas.ml" 288 7370 7382
)
"src/bootCanvas.ml" 292 7504 7515 "src/bootCanvas.ml" 292 7504 7517
type(
  fill_param option
)
ident(
  int_ref fc "src/bootCanvas.ml" 291 7471 7487 "src/bootCanvas.ml" 291 7471 7489
)
"src/bootCanvas.ml" 292 7504 7518 "src/bootCanvas.ml" 292 7504 7520
type(
  fill_param option
)
ident(
  int_ref sc "src/bootCanvas.ml" 291 7471 7490 "src/bootCanvas.ml" 291 7471 7492
)
"src/bootCanvas.ml" 292 7504 7521 "src/bootCanvas.ml" 292 7504 7522
type(
  float * float
)
ident(
  int_ref p "src/bootCanvas.ml" 291 7471 7493 "src/bootCanvas.ml" 291 7471 7494
)
"src/bootCanvas.ml" 292 7504 7523 "src/bootCanvas.ml" 292 7504 7529
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 291 7471 7495 "src/bootCanvas.ml" 291 7471 7501
)
"src/bootCanvas.ml" 292 7504 7530 "src/bootCanvas.ml" 292 7504 7532
type(
  float
)
"src/bootCanvas.ml" 292 7504 7534 "src/bootCanvas.ml" 292 7504 7545
type(
  float
)
ident(
  int_ref Internal.pi "src/bootCanvas.ml" 92 2055 2061 "src/bootCanvas.ml" 92 2055 2063
)
"src/bootCanvas.ml" 292 7504 7546 "src/bootCanvas.ml" 292 7504 7548
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( *. )
)
"src/bootCanvas.ml" 292 7504 7549 "src/bootCanvas.ml" 292 7504 7551
type(
  float
)
"src/bootCanvas.ml" 292 7504 7534 "src/bootCanvas.ml" 292 7504 7551
type(
  float
)
"src/bootCanvas.ml" 292 7504 7506 "src/bootCanvas.ml" 292 7504 7552
type(
  unit
)
"src/bootCanvas.ml" 291 7471 7495 "src/bootCanvas.ml" 292 7504 7552
type(
  float -> unit
)
"src/bootCanvas.ml" 291 7471 7493 "src/bootCanvas.ml" 292 7504 7552
type(
  float * float -> float -> unit
)
"src/bootCanvas.ml" 291 7471 7490 "src/bootCanvas.ml" 292 7504 7552
type(
  fill_param option -> float * float -> float -> unit
)
"src/bootCanvas.ml" 291 7471 7487 "src/bootCanvas.ml" 292 7504 7552
type(
  fill_param option -> fill_param option -> float * float -> float -> unit
)
"src/bootCanvas.ml" 295 7555 7559 "src/bootCanvas.ml" 295 7555 7574
type(
  float * float -> float * float -> unit
)
ident(
  def quadratic_curve "src/bootCanvas.ml" 299 7663 7663 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 295 7555 7576 "src/bootCanvas.ml" 295 7555 7577
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 295 7555 7582 "src/bootCanvas.ml" 296 7593 7660
)
"src/bootCanvas.ml" 295 7555 7579 "src/bootCanvas.ml" 295 7555 7580
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 295 7555 7582 "src/bootCanvas.ml" 296 7593 7660
)
"src/bootCanvas.ml" 295 7555 7576 "src/bootCanvas.ml" 295 7555 7580
type(
  float * float
)
"src/bootCanvas.ml" 295 7555 7583 "src/bootCanvas.ml" 295 7555 7585
type(
  float
)
ident(
  def x2 "src/bootCanvas.ml" 296 7593 7595 "src/bootCanvas.ml" 296 7593 7660
)
"src/bootCanvas.ml" 295 7555 7587 "src/bootCanvas.ml" 295 7555 7589
type(
  float
)
ident(
  def y2 "src/bootCanvas.ml" 296 7593 7595 "src/bootCanvas.ml" 296 7593 7660
)
"src/bootCanvas.ml" 295 7555 7583 "src/bootCanvas.ml" 295 7555 7589
type(
  float * float
)
"src/bootCanvas.ml" 296 7593 7595 "src/bootCanvas.ml" 296 7593 7602
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 296 7593 7608 "src/bootCanvas.ml" 296 7593 7614
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 296 7593 7615 "src/bootCanvas.ml" 296 7593 7659
)
"src/bootCanvas.ml" 296 7593 7615 "src/bootCanvas.ml" 296 7593 7618
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
"src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7625
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a.
                      (#Dom_html.element as 'a) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 296 7593 7615 "src/bootCanvas.ml" 296 7593 7618
)
"src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7645
type(
  float -> float -> float -> float -> unit Js.meth
)
type(
  float -> float -> float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 296 7593 7646 "src/bootCanvas.ml" 296 7593 7647
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_0902e952 "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 295 7555 7576 "src/bootCanvas.ml" 295 7555 7577
)
"src/bootCanvas.ml" 296 7593 7649 "src/bootCanvas.ml" 296 7593 7650
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_cac0d41b "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 295 7555 7579 "src/bootCanvas.ml" 295 7555 7580
)
"src/bootCanvas.ml" 296 7593 7652 "src/bootCanvas.ml" 296 7593 7654
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_9c11b056 "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float
)
type(
  float
)
ident(
  int_ref x2 "src/bootCanvas.ml" 295 7555 7583 "src/bootCanvas.ml" 295 7555 7585
)
"src/bootCanvas.ml" 296 7593 7656 "src/bootCanvas.ml" 296 7593 7658
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_b217ce9f "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float
)
type(
  float
)
ident(
  int_ref y2 "src/bootCanvas.ml" 295 7555 7587 "src/bootCanvas.ml" 295 7555 7589
)
"src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7645
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 296 7593 7659 "src/bootCanvas.ml" 296 7593 7659
)
type(
  'h
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_b217ce9f "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_9c11b056 "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_cac0d41b "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_0902e952 "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'h
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'h
)
ident(
  def jsoo_res "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float
)
ident(
  def jsoo_b217ce9f "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float
)
ident(
  def jsoo_9c11b056 "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float
)
ident(
  def jsoo_cac0d41b "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
type(
  float
)
ident(
  def jsoo_0902e952 "src/bootCanvas.ml" 296 7593 7622 "src/bootCanvas.ml" 296 7593 7659
)
"src/bootCanvas.ml" 296 7593 7615 "src/bootCanvas.ml" 296 7593 7659
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 296 7593 7608 "src/bootCanvas.ml" 296 7593 7659
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 296 7593 7595 "src/bootCanvas.ml" 296 7593 7660
type(
  unit
)
"src/bootCanvas.ml" 295 7555 7582 "src/bootCanvas.ml" 296 7593 7660
type(
  float * float -> unit
)
"src/bootCanvas.ml" 295 7555 7575 "src/bootCanvas.ml" 296 7593 7660
type(
  float * float -> float * float -> unit
)
"src/bootCanvas.ml" 299 7663 7667 "src/bootCanvas.ml" 299 7663 7687
type(
  fill_param option ->
  fill_param option -> float * float -> float * float -> unit
)
ident(
  def fill_quadratic_curve "src/bootCanvas.ml" 303 7751 7751 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 299 7663 7688 "src/bootCanvas.ml" 299 7663 7690
type(
  fill_param option
)
ident(
  def fc "src/bootCanvas.ml" 299 7663 7691 "src/bootCanvas.ml" 300 7702 7748
)
"src/bootCanvas.ml" 299 7663 7691 "src/bootCanvas.ml" 299 7663 7693
type(
  fill_param option
)
ident(
  def sc "src/bootCanvas.ml" 299 7663 7694 "src/bootCanvas.ml" 300 7702 7748
)
"src/bootCanvas.ml" 299 7663 7694 "src/bootCanvas.ml" 299 7663 7696
type(
  float * float
)
ident(
  def pa "src/bootCanvas.ml" 299 7663 7697 "src/bootCanvas.ml" 300 7702 7748
)
"src/bootCanvas.ml" 299 7663 7697 "src/bootCanvas.ml" 299 7663 7699
type(
  float * float
)
ident(
  def pb "src/bootCanvas.ml" 300 7702 7704 "src/bootCanvas.ml" 300 7702 7748
)
"src/bootCanvas.ml" 300 7702 7704 "src/bootCanvas.ml" 300 7702 7708
type(
  fill_param option -> fill_param option -> (unit -> unit) list -> unit
)
ident(
  int_ref draw "src/bootCanvas.ml" 203 5279 5283 "src/bootCanvas.ml" 203 5279 5287
)
"src/bootCanvas.ml" 300 7702 7709 "src/bootCanvas.ml" 300 7702 7711
type(
  fill_param option
)
ident(
  int_ref fc "src/bootCanvas.ml" 299 7663 7688 "src/bootCanvas.ml" 299 7663 7690
)
"src/bootCanvas.ml" 300 7702 7712 "src/bootCanvas.ml" 300 7702 7714
type(
  fill_param option
)
ident(
  int_ref sc "src/bootCanvas.ml" 299 7663 7691 "src/bootCanvas.ml" 299 7663 7693
)
"src/bootCanvas.ml" 300 7702 7720 "src/bootCanvas.ml" 300 7702 7722
type(
  unit
)
"src/bootCanvas.ml" 300 7702 7726 "src/bootCanvas.ml" 300 7702 7741
type(
  float * float -> float * float -> unit
)
ident(
  int_ref quadratic_curve "src/bootCanvas.ml" 295 7555 7559 "src/bootCanvas.ml" 295 7555 7574
)
"src/bootCanvas.ml" 300 7702 7742 "src/bootCanvas.ml" 300 7702 7744
type(
  float * float
)
ident(
  int_ref pa "src/bootCanvas.ml" 299 7663 7694 "src/bootCanvas.ml" 299 7663 7696
)
"src/bootCanvas.ml" 300 7702 7745 "src/bootCanvas.ml" 300 7702 7747
type(
  float * float
)
ident(
  int_ref pb "src/bootCanvas.ml" 299 7663 7697 "src/bootCanvas.ml" 299 7663 7699
)
"src/bootCanvas.ml" 300 7702 7726 "src/bootCanvas.ml" 300 7702 7747
type(
  unit
)
"src/bootCanvas.ml" 300 7702 7720 "src/bootCanvas.ml" 300 7702 7747
type(
  unit -> unit
)
"src/bootCanvas.ml" 300 7702 7716 "src/bootCanvas.ml" 300 7702 7747
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 300 7702 7715 "src/bootCanvas.ml" 300 7702 7748
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 300 7702 7704 "src/bootCanvas.ml" 300 7702 7748
type(
  unit
)
"src/bootCanvas.ml" 299 7663 7697 "src/bootCanvas.ml" 300 7702 7748
type(
  float * float -> unit
)
"src/bootCanvas.ml" 299 7663 7694 "src/bootCanvas.ml" 300 7702 7748
type(
  float * float -> float * float -> unit
)
"src/bootCanvas.ml" 299 7663 7691 "src/bootCanvas.ml" 300 7702 7748
type(
  fill_param option -> float * float -> float * float -> unit
)
"src/bootCanvas.ml" 299 7663 7688 "src/bootCanvas.ml" 300 7702 7748
type(
  fill_param option ->
  fill_param option -> float * float -> float * float -> unit
)
"src/bootCanvas.ml" 303 7751 7755 "src/bootCanvas.ml" 303 7751 7767
type(
  float * float -> float * float -> float * float -> unit
)
ident(
  def bezier_curve "src/bootCanvas.ml" 307 7870 7870 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 303 7751 7769 "src/bootCanvas.ml" 303 7751 7770
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 303 7751 7775 "src/bootCanvas.ml" 304 7795 7867
)
"src/bootCanvas.ml" 303 7751 7772 "src/bootCanvas.ml" 303 7751 7773
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 303 7751 7775 "src/bootCanvas.ml" 304 7795 7867
)
"src/bootCanvas.ml" 303 7751 7769 "src/bootCanvas.ml" 303 7751 7773
type(
  float * float
)
"src/bootCanvas.ml" 303 7751 7776 "src/bootCanvas.ml" 303 7751 7778
type(
  float
)
ident(
  def x2 "src/bootCanvas.ml" 303 7751 7784 "src/bootCanvas.ml" 304 7795 7867
)
"src/bootCanvas.ml" 303 7751 7780 "src/bootCanvas.ml" 303 7751 7782
type(
  float
)
ident(
  def y2 "src/bootCanvas.ml" 303 7751 7784 "src/bootCanvas.ml" 304 7795 7867
)
"src/bootCanvas.ml" 303 7751 7776 "src/bootCanvas.ml" 303 7751 7782
type(
  float * float
)
"src/bootCanvas.ml" 303 7751 7785 "src/bootCanvas.ml" 303 7751 7787
type(
  float
)
ident(
  def x3 "src/bootCanvas.ml" 304 7795 7797 "src/bootCanvas.ml" 304 7795 7867
)
"src/bootCanvas.ml" 303 7751 7789 "src/bootCanvas.ml" 303 7751 7791
type(
  float
)
ident(
  def y3 "src/bootCanvas.ml" 304 7795 7797 "src/bootCanvas.ml" 304 7795 7867
)
"src/bootCanvas.ml" 303 7751 7785 "src/bootCanvas.ml" 303 7751 7791
type(
  float * float
)
"src/bootCanvas.ml" 304 7795 7797 "src/bootCanvas.ml" 304 7795 7804
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 304 7795 7810 "src/bootCanvas.ml" 304 7795 7816
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 304 7795 7817 "src/bootCanvas.ml" 304 7795 7866
)
"src/bootCanvas.ml" 304 7795 7817 "src/bootCanvas.ml" 304 7795 7820
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
"src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7827
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a.
                      (#Dom_html.element as 'a) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 304 7795 7817 "src/bootCanvas.ml" 304 7795 7820
)
"src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7844
type(
  float -> float -> float -> float -> float -> float -> unit Js.meth
)
type(
  float -> float -> float -> float -> float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 304 7795 7845 "src/bootCanvas.ml" 304 7795 7846
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_80a49005 "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 303 7751 7769 "src/bootCanvas.ml" 303 7751 7770
)
"src/bootCanvas.ml" 304 7795 7848 "src/bootCanvas.ml" 304 7795 7849
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_18dd76d0 "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 303 7751 7772 "src/bootCanvas.ml" 303 7751 7773
)
"src/bootCanvas.ml" 304 7795 7851 "src/bootCanvas.ml" 304 7795 7853
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_bcf3a4fb "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
type(
  float
)
ident(
  int_ref x2 "src/bootCanvas.ml" 303 7751 7776 "src/bootCanvas.ml" 303 7751 7778
)
"src/bootCanvas.ml" 304 7795 7855 "src/bootCanvas.ml" 304 7795 7857
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_78778a64 "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
type(
  float
)
ident(
  int_ref y2 "src/bootCanvas.ml" 303 7751 7780 "src/bootCanvas.ml" 303 7751 7782
)
"src/bootCanvas.ml" 304 7795 7859 "src/bootCanvas.ml" 304 7795 7861
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_fcbda56c "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
type(
  float
)
ident(
  int_ref x3 "src/bootCanvas.ml" 303 7751 7785 "src/bootCanvas.ml" 303 7751 7787
)
"src/bootCanvas.ml" 304 7795 7863 "src/bootCanvas.ml" 304 7795 7865
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_ccc5c82d "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
type(
  float
)
ident(
  int_ref y3 "src/bootCanvas.ml" 303 7751 7789 "src/bootCanvas.ml" 303 7751 7791
)
"src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7844
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 304 7795 7866 "src/bootCanvas.ml" 304 7795 7866
)
type(
  'h
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_ccc5c82d "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_fcbda56c "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_78778a64 "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_bcf3a4fb "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_18dd76d0 "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_80a49005 "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'h
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'h
)
ident(
  def jsoo_res "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
ident(
  def jsoo_ccc5c82d "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
ident(
  def jsoo_fcbda56c "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
ident(
  def jsoo_78778a64 "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
ident(
  def jsoo_bcf3a4fb "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
ident(
  def jsoo_18dd76d0 "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
type(
  float
)
ident(
  def jsoo_80a49005 "src/bootCanvas.ml" 304 7795 7824 "src/bootCanvas.ml" 304 7795 7866
)
"src/bootCanvas.ml" 304 7795 7817 "src/bootCanvas.ml" 304 7795 7866
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 304 7795 7810 "src/bootCanvas.ml" 304 7795 7866
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 304 7795 7797 "src/bootCanvas.ml" 304 7795 7867
type(
  unit
)
"src/bootCanvas.ml" 303 7751 7784 "src/bootCanvas.ml" 304 7795 7867
type(
  float * float -> unit
)
"src/bootCanvas.ml" 303 7751 7775 "src/bootCanvas.ml" 304 7795 7867
type(
  float * float -> float * float -> unit
)
"src/bootCanvas.ml" 303 7751 7768 "src/bootCanvas.ml" 304 7795 7867
type(
  float * float -> float * float -> float * float -> unit
)
"src/bootCanvas.ml" 307 7870 7874 "src/bootCanvas.ml" 307 7870 7891
type(
  fill_param option ->
  fill_param option ->
  float * float -> float * float -> float * float -> unit
)
ident(
  def fill_bezier_curve "src/bootCanvas.ml" 310 7989 7989 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 307 7870 7892 "src/bootCanvas.ml" 307 7870 7894
type(
  fill_param option
)
ident(
  def fc "src/bootCanvas.ml" 307 7870 7895 "src/bootCanvas.ml" 308 7925 7987
)
"src/bootCanvas.ml" 307 7870 7895 "src/bootCanvas.ml" 307 7870 7897
type(
  fill_param option
)
ident(
  def sc "src/bootCanvas.ml" 307 7870 7898 "src/bootCanvas.ml" 308 7925 7987
)
"src/bootCanvas.ml" 307 7870 7899 "src/bootCanvas.ml" 307 7870 7900
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 307 7870 7905 "src/bootCanvas.ml" 308 7925 7987
)
"src/bootCanvas.ml" 307 7870 7902 "src/bootCanvas.ml" 307 7870 7903
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 307 7870 7905 "src/bootCanvas.ml" 308 7925 7987
)
"src/bootCanvas.ml" 307 7870 7899 "src/bootCanvas.ml" 307 7870 7903
type(
  float * float
)
"src/bootCanvas.ml" 307 7870 7906 "src/bootCanvas.ml" 307 7870 7908
type(
  float
)
ident(
  def x2 "src/bootCanvas.ml" 307 7870 7914 "src/bootCanvas.ml" 308 7925 7987
)
"src/bootCanvas.ml" 307 7870 7910 "src/bootCanvas.ml" 307 7870 7912
type(
  float
)
ident(
  def y2 "src/bootCanvas.ml" 307 7870 7914 "src/bootCanvas.ml" 308 7925 7987
)
"src/bootCanvas.ml" 307 7870 7906 "src/bootCanvas.ml" 307 7870 7912
type(
  float * float
)
"src/bootCanvas.ml" 307 7870 7915 "src/bootCanvas.ml" 307 7870 7917
type(
  float
)
ident(
  def x3 "src/bootCanvas.ml" 308 7925 7927 "src/bootCanvas.ml" 308 7925 7987
)
"src/bootCanvas.ml" 307 7870 7919 "src/bootCanvas.ml" 307 7870 7921
type(
  float
)
ident(
  def y3 "src/bootCanvas.ml" 308 7925 7927 "src/bootCanvas.ml" 308 7925 7987
)
"src/bootCanvas.ml" 307 7870 7915 "src/bootCanvas.ml" 307 7870 7921
type(
  float * float
)
"src/bootCanvas.ml" 308 7925 7927 "src/bootCanvas.ml" 308 7925 7931
type(
  fill_param option -> fill_param option -> (unit -> unit) list -> unit
)
ident(
  int_ref draw "src/bootCanvas.ml" 203 5279 5283 "src/bootCanvas.ml" 203 5279 5287
)
"src/bootCanvas.ml" 308 7925 7932 "src/bootCanvas.ml" 308 7925 7934
type(
  fill_param option
)
ident(
  int_ref fc "src/bootCanvas.ml" 307 7870 7892 "src/bootCanvas.ml" 307 7870 7894
)
"src/bootCanvas.ml" 308 7925 7935 "src/bootCanvas.ml" 308 7925 7937
type(
  fill_param option
)
ident(
  int_ref sc "src/bootCanvas.ml" 307 7870 7895 "src/bootCanvas.ml" 307 7870 7897
)
"src/bootCanvas.ml" 308 7925 7943 "src/bootCanvas.ml" 308 7925 7945
type(
  unit
)
"src/bootCanvas.ml" 308 7925 7949 "src/bootCanvas.ml" 308 7925 7961
type(
  float * float -> float * float -> float * float -> unit
)
ident(
  int_ref bezier_curve "src/bootCanvas.ml" 303 7751 7755 "src/bootCanvas.ml" 303 7751 7767
)
"src/bootCanvas.ml" 308 7925 7963 "src/bootCanvas.ml" 308 7925 7964
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 307 7870 7899 "src/bootCanvas.ml" 307 7870 7900
)
"src/bootCanvas.ml" 308 7925 7966 "src/bootCanvas.ml" 308 7925 7967
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 307 7870 7902 "src/bootCanvas.ml" 307 7870 7903
)
"src/bootCanvas.ml" 308 7925 7963 "src/bootCanvas.ml" 308 7925 7967
type(
  float * float
)
"src/bootCanvas.ml" 308 7925 7970 "src/bootCanvas.ml" 308 7925 7972
type(
  float
)
ident(
  int_ref x2 "src/bootCanvas.ml" 307 7870 7906 "src/bootCanvas.ml" 307 7870 7908
)
"src/bootCanvas.ml" 308 7925 7974 "src/bootCanvas.ml" 308 7925 7976
type(
  float
)
ident(
  int_ref y2 "src/bootCanvas.ml" 307 7870 7910 "src/bootCanvas.ml" 307 7870 7912
)
"src/bootCanvas.ml" 308 7925 7970 "src/bootCanvas.ml" 308 7925 7976
type(
  float * float
)
"src/bootCanvas.ml" 308 7925 7979 "src/bootCanvas.ml" 308 7925 7981
type(
  float
)
ident(
  int_ref x3 "src/bootCanvas.ml" 307 7870 7915 "src/bootCanvas.ml" 307 7870 7917
)
"src/bootCanvas.ml" 308 7925 7983 "src/bootCanvas.ml" 308 7925 7985
type(
  float
)
ident(
  int_ref y3 "src/bootCanvas.ml" 307 7870 7919 "src/bootCanvas.ml" 307 7870 7921
)
"src/bootCanvas.ml" 308 7925 7979 "src/bootCanvas.ml" 308 7925 7985
type(
  float * float
)
"src/bootCanvas.ml" 308 7925 7949 "src/bootCanvas.ml" 308 7925 7986
type(
  unit
)
"src/bootCanvas.ml" 308 7925 7943 "src/bootCanvas.ml" 308 7925 7986
type(
  unit -> unit
)
"src/bootCanvas.ml" 308 7925 7939 "src/bootCanvas.ml" 308 7925 7986
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 308 7925 7938 "src/bootCanvas.ml" 308 7925 7987
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 308 7925 7927 "src/bootCanvas.ml" 308 7925 7987
type(
  unit
)
"src/bootCanvas.ml" 307 7870 7914 "src/bootCanvas.ml" 308 7925 7987
type(
  float * float -> unit
)
"src/bootCanvas.ml" 307 7870 7905 "src/bootCanvas.ml" 308 7925 7987
type(
  float * float -> float * float -> unit
)
"src/bootCanvas.ml" 307 7870 7898 "src/bootCanvas.ml" 308 7925 7987
type(
  float * float -> float * float -> float * float -> unit
)
"src/bootCanvas.ml" 307 7870 7895 "src/bootCanvas.ml" 308 7925 7987
type(
  fill_param option ->
  float * float -> float * float -> float * float -> unit
)
"src/bootCanvas.ml" 307 7870 7892 "src/bootCanvas.ml" 308 7925 7987
type(
  fill_param option ->
  fill_param option ->
  float * float -> float * float -> float * float -> unit
)
"src/bootCanvas.ml" 310 7989 7993 "src/bootCanvas.ml" 310 7989 8005
type(
  float * float * float * float -> float -> unit
)
ident(
  def rounded_rect "src/bootCanvas.ml" 326 8645 8645 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
type(
  float
)
ident(
  def x "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 324 8638 8643
)
"src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
type(
  float
)
ident(
  def y "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 324 8638 8643
)
"src/bootCanvas.ml" 310 7989 8013 "src/bootCanvas.ml" 310 7989 8018
type(
  float
)
ident(
  def width "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 324 8638 8643
)
"src/bootCanvas.ml" 310 7989 8020 "src/bootCanvas.ml" 310 7989 8026
type(
  float
)
ident(
  def height "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 324 8638 8643
)
"src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8026
type(
  float * float * float * float
)
"src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 310 7989 8034
type(
  float
)
ident(
  def radius "src/bootCanvas.ml" 311 8037 8039 "src/bootCanvas.ml" 324 8638 8643
)
"src/bootCanvas.ml" 311 8037 8039 "src/bootCanvas.ml" 311 8037 8046
type(
  (Dom_html.canvasElement Js.t ->
   Dom_html.canvasRenderingContext2D Js.t -> unit) ->
  unit
)
ident(
  int_ref wrap_2d "src/bootCanvas.ml" 64 1411 1415 "src/bootCanvas.ml" 64 1411 1422
)
"src/bootCanvas.ml" 311 8037 8052 "src/bootCanvas.ml" 311 8037 8058
type(
  Dom_html.canvasElement Js.t
)
ident(
  def canvas "src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 323 8591 8637
)
"src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 311 8037 8062
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def ctx "src/bootCanvas.ml" 312 8066 8072 "src/bootCanvas.ml" 323 8591 8637
)
"src/bootCanvas.ml" 312 8066 8076 "src/bootCanvas.ml" 312 8066 8077
type(
  unit
)
"src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8083
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a.
                      (#Dom_html.element as 'a) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b.
                      (#Dom_html.element as 'b) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c.
                      (#Dom_html.element as 'c) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 311 8037 8062
)
"src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8093
type(
  float -> float -> unit Js.meth
)
type(
  float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 312 8066 8094 "src/bootCanvas.ml" 312 8066 8095
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_50cf3d17 "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 312 8066 8097 "src/bootCanvas.ml" 312 8066 8098
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 312 8066 8099 "src/bootCanvas.ml" 312 8066 8101
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 312 8066 8102 "src/bootCanvas.ml" 312 8066 8108
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 310 7989 8034
)
"src/bootCanvas.ml" 312 8066 8097 "src/bootCanvas.ml" 312 8066 8108
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_bd8d546d "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd.
                      (#Dom_html.element as 'd) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e.
                      (#Dom_html.element as 'e) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8093
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f.
                      (#Dom_html.element as 'f) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g.
                      (#Dom_html.element as 'g) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 312 8066 8109 "src/bootCanvas.ml" 312 8066 8109
)
type(
  'h
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_bd8d546d "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_50cf3d17 "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'h
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'h
)
ident(
  def jsoo_res "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  float
)
ident(
  def jsoo_bd8d546d "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
type(
  float
)
ident(
  def jsoo_50cf3d17 "src/bootCanvas.ml" 312 8066 8080 "src/bootCanvas.ml" 312 8066 8109
)
"src/bootCanvas.ml" 313 8113 8123 "src/bootCanvas.ml" 313 8113 8124
type(
  unit
)
"src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8130
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'i.
                      (#Dom_html.element as 'i) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'j.
                      (#Dom_html.element as 'j) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'k.
                      (#Dom_html.element as 'k) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 311 8037 8062
)
"src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8140
type(
  float -> float -> unit Js.meth
)
type(
  float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 313 8113 8141 "src/bootCanvas.ml" 313 8113 8142
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_7fb62a09 "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 313 8113 8144 "src/bootCanvas.ml" 313 8113 8145
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 313 8113 8146 "src/bootCanvas.ml" 313 8113 8148
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 313 8113 8149 "src/bootCanvas.ml" 313 8113 8155
type(
  float
)
ident(
  int_ref height "src/bootCanvas.ml" 310 7989 8020 "src/bootCanvas.ml" 310 7989 8026
)
"src/bootCanvas.ml" 313 8113 8144 "src/bootCanvas.ml" 313 8113 8155
type(
  float
)
"src/bootCanvas.ml" 313 8113 8156 "src/bootCanvas.ml" 313 8113 8158
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( -. )
)
"src/bootCanvas.ml" 313 8113 8159 "src/bootCanvas.ml" 313 8113 8165
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 310 7989 8034
)
"src/bootCanvas.ml" 313 8113 8144 "src/bootCanvas.ml" 313 8113 8165
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_c7dd16df "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'l.
                      (#Dom_html.element as 'l) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'm.
                      (#Dom_html.element as 'm) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8140
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'n.
                      (#Dom_html.element as 'n) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'o.
                      (#Dom_html.element as 'o) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 313 8113 8166 "src/bootCanvas.ml" 313 8113 8166
)
type(
  'p
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_c7dd16df "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_7fb62a09 "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'p
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'p
)
ident(
  def jsoo_res "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  float
)
ident(
  def jsoo_c7dd16df "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
type(
  float
)
ident(
  def jsoo_7fb62a09 "src/bootCanvas.ml" 313 8113 8127 "src/bootCanvas.ml" 313 8113 8166
)
"src/bootCanvas.ml" 314 8170 8180 "src/bootCanvas.ml" 314 8170 8181
type(
  unit
)
"src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8187
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'q.
                      (#Dom_html.element as 'q) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'r.
                      (#Dom_html.element as 'r) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 's.
                      (#Dom_html.element as 's) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 311 8037 8062
)
"src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8207
type(
  float -> float -> float -> float -> unit Js.meth
)
type(
  float -> float -> float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 314 8170 8209 "src/bootCanvas.ml" 314 8170 8210
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_e010e632 "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 314 8170 8211 "src/bootCanvas.ml" 314 8170 8212
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 314 8170 8212 "src/bootCanvas.ml" 314 8170 8214
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 314 8170 8214 "src/bootCanvas.ml" 314 8170 8220
type(
  float
)
ident(
  int_ref height "src/bootCanvas.ml" 310 7989 8020 "src/bootCanvas.ml" 310 7989 8026
)
"src/bootCanvas.ml" 314 8170 8211 "src/bootCanvas.ml" 314 8170 8220
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_7514e246 "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 314 8170 8221 "src/bootCanvas.ml" 314 8170 8222
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 314 8170 8222 "src/bootCanvas.ml" 314 8170 8224
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 314 8170 8224 "src/bootCanvas.ml" 314 8170 8230
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 310 7989 8034
)
"src/bootCanvas.ml" 314 8170 8221 "src/bootCanvas.ml" 314 8170 8230
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_e954953f "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 314 8170 8231 "src/bootCanvas.ml" 314 8170 8232
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 314 8170 8232 "src/bootCanvas.ml" 314 8170 8234
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 314 8170 8234 "src/bootCanvas.ml" 314 8170 8240
type(
  float
)
ident(
  int_ref height "src/bootCanvas.ml" 310 7989 8020 "src/bootCanvas.ml" 310 7989 8026
)
"src/bootCanvas.ml" 314 8170 8231 "src/bootCanvas.ml" 314 8170 8240
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_b587a5e4 "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 't.
                      (#Dom_html.element as 't) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'u.
                      (#Dom_html.element as 'u) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8207
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'v.
                      (#Dom_html.element as 'v) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'w.
                      (#Dom_html.element as 'w) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 314 8170 8241 "src/bootCanvas.ml" 314 8170 8241
)
type(
  'x
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_b587a5e4 "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_e954953f "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_7514e246 "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_e010e632 "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'x
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'x
)
ident(
  def jsoo_res "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float
)
ident(
  def jsoo_b587a5e4 "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float
)
ident(
  def jsoo_e954953f "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float
)
ident(
  def jsoo_7514e246 "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
type(
  float
)
ident(
  def jsoo_e010e632 "src/bootCanvas.ml" 314 8170 8184 "src/bootCanvas.ml" 314 8170 8241
)
"src/bootCanvas.ml" 315 8245 8255 "src/bootCanvas.ml" 315 8245 8256
type(
  unit
)
"src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8262
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'y.
                      (#Dom_html.element as 'y) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'z.
                      (#Dom_html.element as 'z) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a1.
                      (#Dom_html.element as 'a1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 311 8037 8062
)
"src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8272
type(
  float -> float -> unit Js.meth
)
type(
  float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 315 8245 8273 "src/bootCanvas.ml" 315 8245 8274
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 315 8245 8274 "src/bootCanvas.ml" 315 8245 8276
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 315 8245 8276 "src/bootCanvas.ml" 315 8245 8281
type(
  float
)
ident(
  int_ref width "src/bootCanvas.ml" 310 7989 8013 "src/bootCanvas.ml" 310 7989 8018
)
"src/bootCanvas.ml" 315 8245 8273 "src/bootCanvas.ml" 315 8245 8281
type(
  float
)
"src/bootCanvas.ml" 315 8245 8281 "src/bootCanvas.ml" 315 8245 8283
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( -. )
)
"src/bootCanvas.ml" 315 8245 8283 "src/bootCanvas.ml" 315 8245 8289
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 310 7989 8034
)
"src/bootCanvas.ml" 315 8245 8273 "src/bootCanvas.ml" 315 8245 8289
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_bc654c4b "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 315 8245 8290 "src/bootCanvas.ml" 315 8245 8291
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 315 8245 8291 "src/bootCanvas.ml" 315 8245 8293
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 315 8245 8293 "src/bootCanvas.ml" 315 8245 8299
type(
  float
)
ident(
  int_ref height "src/bootCanvas.ml" 310 7989 8020 "src/bootCanvas.ml" 310 7989 8026
)
"src/bootCanvas.ml" 315 8245 8290 "src/bootCanvas.ml" 315 8245 8299
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_30747b7c "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b1.
                      (#Dom_html.element as 'b1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c1.
                      (#Dom_html.element as 'c1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8272
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'd1.
                      (#Dom_html.element as 'd1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e1.
                      (#Dom_html.element as 'e1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 315 8245 8300 "src/bootCanvas.ml" 315 8245 8300
)
type(
  'f1
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_30747b7c "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_bc654c4b "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'f1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'f1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  float
)
ident(
  def jsoo_30747b7c "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
type(
  float
)
ident(
  def jsoo_bc654c4b "src/bootCanvas.ml" 315 8245 8259 "src/bootCanvas.ml" 315 8245 8300
)
"src/bootCanvas.ml" 316 8304 8314 "src/bootCanvas.ml" 316 8304 8315
type(
  unit
)
"src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 317 8318 8329
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g1.
                      (#Dom_html.element as 'g1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'h1.
                      (#Dom_html.element as 'h1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'i1.
                      (#Dom_html.element as 'i1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 311 8037 8062
)
"src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 317 8318 8349
type(
  float -> float -> float -> float -> unit Js.meth
)
type(
  float -> float -> float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 318 8352 8362 "src/bootCanvas.ml" 318 8352 8363
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 318 8352 8363 "src/bootCanvas.ml" 318 8352 8365
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 318 8352 8366 "src/bootCanvas.ml" 318 8352 8371
type(
  float
)
ident(
  int_ref width "src/bootCanvas.ml" 310 7989 8013 "src/bootCanvas.ml" 310 7989 8018
)
"src/bootCanvas.ml" 318 8352 8362 "src/bootCanvas.ml" 318 8352 8371
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_566c1550 "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 318 8352 8372 "src/bootCanvas.ml" 318 8352 8373
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 318 8352 8373 "src/bootCanvas.ml" 318 8352 8375
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 318 8352 8376 "src/bootCanvas.ml" 318 8352 8382
type(
  float
)
ident(
  int_ref height "src/bootCanvas.ml" 310 7989 8020 "src/bootCanvas.ml" 310 7989 8026
)
"src/bootCanvas.ml" 318 8352 8372 "src/bootCanvas.ml" 318 8352 8382
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_a9d32f2d "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 318 8352 8383 "src/bootCanvas.ml" 318 8352 8384
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 318 8352 8384 "src/bootCanvas.ml" 318 8352 8386
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 318 8352 8387 "src/bootCanvas.ml" 318 8352 8392
type(
  float
)
ident(
  int_ref width "src/bootCanvas.ml" 310 7989 8013 "src/bootCanvas.ml" 310 7989 8018
)
"src/bootCanvas.ml" 318 8352 8383 "src/bootCanvas.ml" 318 8352 8392
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_d056eed9 "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 318 8352 8393 "src/bootCanvas.ml" 318 8352 8394
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 318 8352 8394 "src/bootCanvas.ml" 318 8352 8396
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 318 8352 8396 "src/bootCanvas.ml" 318 8352 8402
type(
  float
)
ident(
  int_ref height "src/bootCanvas.ml" 310 7989 8020 "src/bootCanvas.ml" 310 7989 8026
)
"src/bootCanvas.ml" 318 8352 8393 "src/bootCanvas.ml" 318 8352 8402
type(
  float
)
"src/bootCanvas.ml" 318 8352 8402 "src/bootCanvas.ml" 318 8352 8404
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( -. )
)
"src/bootCanvas.ml" 318 8352 8404 "src/bootCanvas.ml" 318 8352 8410
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 310 7989 8034
)
"src/bootCanvas.ml" 318 8352 8393 "src/bootCanvas.ml" 318 8352 8410
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_e4966ffd "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'j1.
                      (#Dom_html.element as 'j1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'k1.
                      (#Dom_html.element as 'k1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 317 8318 8349
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'l1.
                      (#Dom_html.element as 'l1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'm1.
                      (#Dom_html.element as 'm1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 318 8352 8411 "src/bootCanvas.ml" 318 8352 8411
)
type(
  'n1
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_e4966ffd "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_d056eed9 "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_a9d32f2d "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_566c1550 "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'n1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'n1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float
)
ident(
  def jsoo_e4966ffd "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float
)
ident(
  def jsoo_d056eed9 "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float
)
ident(
  def jsoo_a9d32f2d "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
type(
  float
)
ident(
  def jsoo_566c1550 "src/bootCanvas.ml" 317 8318 8326 "src/bootCanvas.ml" 318 8352 8411
)
"src/bootCanvas.ml" 320 8422 8432 "src/bootCanvas.ml" 320 8422 8433
type(
  unit
)
"src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8439
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'o1.
                      (#Dom_html.element as 'o1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'p1.
                      (#Dom_html.element as 'p1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'q1.
                      (#Dom_html.element as 'q1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 311 8037 8062
)
"src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8449
type(
  float -> float -> unit Js.meth
)
type(
  float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 320 8422 8450 "src/bootCanvas.ml" 320 8422 8451
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 320 8422 8451 "src/bootCanvas.ml" 320 8422 8453
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 320 8422 8453 "src/bootCanvas.ml" 320 8422 8458
type(
  float
)
ident(
  int_ref width "src/bootCanvas.ml" 310 7989 8013 "src/bootCanvas.ml" 310 7989 8018
)
"src/bootCanvas.ml" 320 8422 8450 "src/bootCanvas.ml" 320 8422 8458
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_8d84aa72 "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 320 8422 8459 "src/bootCanvas.ml" 320 8422 8460
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 320 8422 8460 "src/bootCanvas.ml" 320 8422 8462
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 320 8422 8462 "src/bootCanvas.ml" 320 8422 8468
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 310 7989 8034
)
"src/bootCanvas.ml" 320 8422 8459 "src/bootCanvas.ml" 320 8422 8468
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_bafdfbd5 "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'r1.
                      (#Dom_html.element as 'r1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 's1.
                      (#Dom_html.element as 's1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8449
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 't1.
                      (#Dom_html.element as 't1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'u1.
                      (#Dom_html.element as 'u1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 320 8422 8469 "src/bootCanvas.ml" 320 8422 8469
)
type(
  'v1
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_bafdfbd5 "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_8d84aa72 "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'v1
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'v1
)
ident(
  def jsoo_res "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  float
)
ident(
  def jsoo_bafdfbd5 "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
type(
  float
)
ident(
  def jsoo_8d84aa72 "src/bootCanvas.ml" 320 8422 8436 "src/bootCanvas.ml" 320 8422 8469
)
"src/bootCanvas.ml" 321 8474 8484 "src/bootCanvas.ml" 321 8474 8485
type(
  unit
)
"src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8491
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'w1.
                      (#Dom_html.element as 'w1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'x1.
                      (#Dom_html.element as 'x1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'y1.
                      (#Dom_html.element as 'y1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 311 8037 8062
)
"src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8511
type(
  float -> float -> float -> float -> unit Js.meth
)
type(
  float -> float -> float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 321 8474 8512 "src/bootCanvas.ml" 321 8474 8513
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 321 8474 8513 "src/bootCanvas.ml" 321 8474 8515
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 321 8474 8515 "src/bootCanvas.ml" 321 8474 8520
type(
  float
)
ident(
  int_ref width "src/bootCanvas.ml" 310 7989 8013 "src/bootCanvas.ml" 310 7989 8018
)
"src/bootCanvas.ml" 321 8474 8512 "src/bootCanvas.ml" 321 8474 8520
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_228c416a "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 321 8474 8521 "src/bootCanvas.ml" 321 8474 8522
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_db1de587 "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 321 8474 8523 "src/bootCanvas.ml" 321 8474 8524
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 321 8474 8524 "src/bootCanvas.ml" 321 8474 8526
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 321 8474 8526 "src/bootCanvas.ml" 321 8474 8531
type(
  float
)
ident(
  int_ref width "src/bootCanvas.ml" 310 7989 8013 "src/bootCanvas.ml" 310 7989 8018
)
"src/bootCanvas.ml" 321 8474 8523 "src/bootCanvas.ml" 321 8474 8531
type(
  float
)
"src/bootCanvas.ml" 321 8474 8531 "src/bootCanvas.ml" 321 8474 8533
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( -. )
)
"src/bootCanvas.ml" 321 8474 8533 "src/bootCanvas.ml" 321 8474 8539
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 310 7989 8034
)
"src/bootCanvas.ml" 321 8474 8523 "src/bootCanvas.ml" 321 8474 8539
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_da546fd6 "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 321 8474 8540 "src/bootCanvas.ml" 321 8474 8541
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_827bbffb "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'z1.
                      (#Dom_html.element as 'z1) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'a2.
                      (#Dom_html.element as 'a2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8511
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'b2.
                      (#Dom_html.element as 'b2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'c2.
                      (#Dom_html.element as 'c2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 321 8474 8542 "src/bootCanvas.ml" 321 8474 8542
)
type(
  'd2
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_827bbffb "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_da546fd6 "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_db1de587 "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_228c416a "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'd2
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'd2
)
ident(
  def jsoo_res "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float
)
ident(
  def jsoo_827bbffb "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float
)
ident(
  def jsoo_da546fd6 "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float
)
ident(
  def jsoo_db1de587 "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
type(
  float
)
ident(
  def jsoo_228c416a "src/bootCanvas.ml" 321 8474 8488 "src/bootCanvas.ml" 321 8474 8542
)
"src/bootCanvas.ml" 322 8547 8557 "src/bootCanvas.ml" 322 8547 8558
type(
  unit
)
"src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8564
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'e2.
                      (#Dom_html.element as 'e2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'f2.
                      (#Dom_html.element as 'f2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'g2.
                      (#Dom_html.element as 'g2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 311 8037 8062
)
"src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8574
type(
  float -> float -> unit Js.meth
)
type(
  float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 322 8547 8575 "src/bootCanvas.ml" 322 8547 8576
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 322 8547 8576 "src/bootCanvas.ml" 322 8547 8578
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 322 8547 8578 "src/bootCanvas.ml" 322 8547 8584
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 310 7989 8034
)
"src/bootCanvas.ml" 322 8547 8575 "src/bootCanvas.ml" 322 8547 8584
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_610cba75 "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 322 8547 8585 "src/bootCanvas.ml" 322 8547 8586
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_c01b9b98 "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'h2.
                      (#Dom_html.element as 'h2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'i2.
                      (#Dom_html.element as 'i2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8574
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'j2.
                      (#Dom_html.element as 'j2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'k2.
                      (#Dom_html.element as 'k2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 322 8547 8587 "src/bootCanvas.ml" 322 8547 8587
)
type(
  'l2
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_c01b9b98 "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_610cba75 "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 'l2
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  'l2
)
ident(
  def jsoo_res "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  float
)
ident(
  def jsoo_c01b9b98 "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
type(
  float
)
ident(
  def jsoo_610cba75 "src/bootCanvas.ml" 322 8547 8561 "src/bootCanvas.ml" 322 8547 8587
)
"src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8600
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'm2.
                      (#Dom_html.element as 'm2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  int_ref x "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'n2.
                      (#Dom_html.element as 'n2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'o2.
                      (#Dom_html.element as 'o2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref ctx "src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 311 8037 8062
)
"src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8620
type(
  float -> float -> float -> float -> unit Js.meth
)
type(
  float -> float -> float -> float -> unit Js.meth
)
"src/bootCanvas.ml" 323 8591 8621 "src/bootCanvas.ml" 323 8591 8622
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_5c1c3f5c "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 323 8591 8623 "src/bootCanvas.ml" 323 8591 8624
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_591035ce "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float
)
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 323 8591 8625 "src/bootCanvas.ml" 323 8591 8626
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_d93cc8be "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float
)
type(
  float
)
ident(
  int_ref x "src/bootCanvas.ml" 310 7989 8007 "src/bootCanvas.ml" 310 7989 8008
)
"src/bootCanvas.ml" 323 8591 8627 "src/bootCanvas.ml" 323 8591 8628
type(
  float
)
ident(
  int_ref y "src/bootCanvas.ml" 310 7989 8010 "src/bootCanvas.ml" 310 7989 8011
)
"src/bootCanvas.ml" 323 8591 8628 "src/bootCanvas.ml" 323 8591 8630
type(
  float -> float -> float
)
ident(
  ext_ref Pervasives.( +. )
)
"src/bootCanvas.ml" 323 8591 8630 "src/bootCanvas.ml" 323 8591 8636
type(
  float
)
ident(
  int_ref radius "src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 310 7989 8034
)
"src/bootCanvas.ml" 323 8591 8627 "src/bootCanvas.ml" 323 8591 8636
type(
  unit
)
type(
  float
)
type(
  float
)
ident(
  int_ref jsoo_d99b56ae "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float
)
type(
  float
)
"src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref M.res "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
ident(
  int_ref jsoo_res "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'p2.
                      (#Dom_html.element as 'p2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'q2.
                      (#Dom_html.element as 'q2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
)
ident(
  def x "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8620
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 'r2.
                      (#Dom_html.element as 'r2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth > ->
  float -> float -> float -> float -> unit Js.meth
)
type(
  < arc : float ->
          float -> float -> float -> float -> bool Js.t -> unit Js.meth;
    arcTo : float -> float -> float -> float -> float -> unit Js.meth;
    beginPath : unit Js.meth;
    bezierCurveTo : float ->
                    float -> float -> float -> float -> float -> unit Js.meth;
    canvas : Dom_html.canvasElement Js.t Js.readonly_prop;
    clearRect : float -> float -> float -> float -> unit Js.meth;
    clip : unit Js.meth; closePath : unit Js.meth;
    createImageData : int -> int -> Dom_html.imageData Js.t Js.meth;
    createLinearGradient : float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    createPattern : Dom_html.imageElement Js.t ->
                    Js.js_string Js.t -> Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromCanvas : Dom_html.canvasElement Js.t ->
                               Js.js_string Js.t ->
                               Dom_html.canvasPattern Js.t Js.meth;
    createPattern_fromVideo : Dom_html.videoElement Js.t ->
                              Js.js_string Js.t ->
                              Dom_html.canvasPattern Js.t Js.meth;
    createRadialGradient : float ->
                           float ->
                           float ->
                           float ->
                           float ->
                           float -> Dom_html.canvasGradient Js.t Js.meth;
    drawFocusRing : 's2.
                      (#Dom_html.element as 's2) Js.t ->
                      float -> float -> bool Js.t -> bool Js.t Js.meth;
    drawImage : Dom_html.imageElement Js.t -> float -> float -> unit Js.meth;
    drawImage_fromCanvas : Dom_html.canvasElement Js.t ->
                           float -> float -> unit Js.meth;
    drawImage_fromCanvasWithSize : Dom_html.canvasElement Js.t ->
                                   float ->
                                   float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithSize : Dom_html.videoElement Js.t ->
                                  float ->
                                  float -> float -> float -> unit Js.meth;
    drawImage_fromVideoWithVideo : Dom_html.videoElement Js.t ->
                                   float -> float -> unit Js.meth;
    drawImage_full : Dom_html.imageElement Js.t ->
                     float ->
                     float ->
                     float ->
                     float ->
                     float -> float -> float -> float -> unit Js.meth;
    drawImage_fullFromCanvas : Dom_html.canvasElement Js.t ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float ->
                               float -> float -> float -> unit Js.meth;
    drawImage_fullFromVideo : Dom_html.videoElement Js.t ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float ->
                              float -> float -> float -> unit Js.meth;
    drawImage_withSize : Dom_html.imageElement Js.t ->
                         float -> float -> float -> float -> unit Js.meth;
    fill : unit Js.meth;
    fillRect : float -> float -> float -> float -> unit Js.meth;
    fillStyle : Js.js_string Js.t Js.writeonly_prop;
    fillStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    fillStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    fillText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    fillText_withWidth : Js.js_string Js.t ->
                         float -> float -> float -> unit Js.meth;
    font : Js.js_string Js.t Js.prop;
    getImageData : float ->
                   float -> float -> float -> Dom_html.imageData Js.t Js.meth;
    globalAlpha : float Js.prop;
    globalCompositeOperation : Js.js_string Js.t Js.prop;
    isPointInPath : float -> float -> bool Js.t Js.meth;
    lineCap : Js.js_string Js.t Js.prop;
    lineJoin : Js.js_string Js.t Js.prop;
    lineTo : float -> float -> unit Js.meth; lineWidth : float Js.prop;
    measureText : Js.js_string Js.t -> Dom_html.textMetrics Js.t Js.meth;
    miterLimit : float Js.prop; moveTo : float -> float -> unit Js.meth;
    putImageData : Dom_html.imageData Js.t -> float -> float -> unit Js.meth;
    quadraticCurveTo : float -> float -> float -> float -> unit Js.meth;
    rect : float -> float -> float -> float -> unit Js.meth;
    restore : unit Js.meth; rotate : float -> unit Js.meth;
    save : unit Js.meth; scale : float -> float -> unit Js.meth;
    setTransform : float ->
                   float -> float -> float -> float -> float -> unit Js.meth;
    shadowBlur : float Js.prop; shadowColor : Js.js_string Js.t Js.prop;
    shadowOffsetX : float Js.prop; shadowOffsetY : float Js.prop;
    stroke : unit Js.meth;
    strokeRect : float -> float -> float -> float -> unit Js.meth;
    strokeStyle : Js.js_string Js.t Js.writeonly_prop;
    strokeStyle_gradient : Dom_html.canvasGradient Js.t Js.writeonly_prop;
    strokeStyle_pattern : Dom_html.canvasPattern Js.t Js.writeonly_prop;
    strokeText : Js.js_string Js.t -> float -> float -> unit Js.meth;
    strokeText_withWidth : Js.js_string Js.t ->
                           float -> float -> float -> unit Js.meth;
    textAlign : Js.js_string Js.t Js.prop;
    textBaseline : Js.js_string Js.t Js.prop;
    transform : float ->
                float -> float -> float -> float -> float -> unit Js.meth;
    translate : float -> float -> unit Js.meth >
  Js.t
)
type(
  unit
)
ident(
  def res "src/bootCanvas.ml" 323 8591 8637 "src/bootCanvas.ml" 323 8591 8637
)
type(
  't2
)
type(
  Js.Unsafe.any array
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_d99b56ae "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_d93cc8be "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_591035ce "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  Js.Unsafe.any
)
type(
  float
)
ident(
  int_ref jsoo_5c1c3f5c "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float -> Js.Unsafe.any
)
ident(
  ext_ref Js.Unsafe.inject
)
type(
  string
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  int_ref jsoo_self "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  Dom_html.canvasRenderingContext2D Js.t ->
  string -> Js.Unsafe.any array -> 't2
)
ident(
  ext_ref Js.Unsafe.meth_call
)
type(
  't2
)
ident(
  def jsoo_res "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  Dom_html.canvasRenderingContext2D Js.t
)
ident(
  def jsoo_self "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float
)
ident(
  def jsoo_d99b56ae "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float
)
ident(
  def jsoo_d93cc8be "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float
)
ident(
  def jsoo_591035ce "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
type(
  float
)
ident(
  def jsoo_5c1c3f5c "src/bootCanvas.ml" 323 8591 8597 "src/bootCanvas.ml" 323 8591 8637
)
"src/bootCanvas.ml" 322 8547 8553 "src/bootCanvas.ml" 323 8591 8637
type(
  unit
)
"src/bootCanvas.ml" 321 8474 8480 "src/bootCanvas.ml" 323 8591 8637
type(
  unit
)
"src/bootCanvas.ml" 320 8422 8428 "src/bootCanvas.ml" 323 8591 8637
type(
  unit
)
"src/bootCanvas.ml" 316 8304 8310 "src/bootCanvas.ml" 323 8591 8637
type(
  unit
)
"src/bootCanvas.ml" 315 8245 8251 "src/bootCanvas.ml" 323 8591 8637
type(
  unit
)
"src/bootCanvas.ml" 314 8170 8176 "src/bootCanvas.ml" 323 8591 8637
type(
  unit
)
"src/bootCanvas.ml" 313 8113 8119 "src/bootCanvas.ml" 323 8591 8637
type(
  unit
)
"src/bootCanvas.ml" 312 8066 8072 "src/bootCanvas.ml" 323 8591 8637
type(
  unit
)
"src/bootCanvas.ml" 311 8037 8059 "src/bootCanvas.ml" 323 8591 8637
type(
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 311 8037 8052 "src/bootCanvas.ml" 323 8591 8637
type(
  Dom_html.canvasElement Js.t ->
  Dom_html.canvasRenderingContext2D Js.t -> unit
)
"src/bootCanvas.ml" 311 8037 8039 "src/bootCanvas.ml" 324 8638 8643
type(
  unit
)
"src/bootCanvas.ml" 310 7989 8028 "src/bootCanvas.ml" 324 8638 8643
type(
  float -> unit
)
"src/bootCanvas.ml" 310 7989 8006 "src/bootCanvas.ml" 324 8638 8643
type(
  float * float * float * float -> float -> unit
)
"src/bootCanvas.ml" 326 8645 8649 "src/bootCanvas.ml" 326 8645 8666
type(
  fill_param option ->
  fill_param option -> float * float * float * float -> float -> unit
)
ident(
  def fill_rounded_rect "src/bootCanvas.ml" 330 8729 8729 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 326 8645 8667 "src/bootCanvas.ml" 326 8645 8669
type(
  fill_param option
)
ident(
  def fc "src/bootCanvas.ml" 326 8645 8670 "src/bootCanvas.ml" 327 8682 8726
)
"src/bootCanvas.ml" 326 8645 8670 "src/bootCanvas.ml" 326 8645 8672
type(
  fill_param option
)
ident(
  def sc "src/bootCanvas.ml" 326 8645 8673 "src/bootCanvas.ml" 327 8682 8726
)
"src/bootCanvas.ml" 326 8645 8673 "src/bootCanvas.ml" 326 8645 8677
type(
  float * float * float * float
)
ident(
  def rect "src/bootCanvas.ml" 326 8645 8678 "src/bootCanvas.ml" 327 8682 8726
)
"src/bootCanvas.ml" 326 8645 8678 "src/bootCanvas.ml" 326 8645 8679
type(
  float
)
ident(
  def r "src/bootCanvas.ml" 327 8682 8684 "src/bootCanvas.ml" 327 8682 8726
)
"src/bootCanvas.ml" 327 8682 8684 "src/bootCanvas.ml" 327 8682 8688
type(
  fill_param option -> fill_param option -> (unit -> unit) list -> unit
)
ident(
  int_ref draw "src/bootCanvas.ml" 203 5279 5283 "src/bootCanvas.ml" 203 5279 5287
)
"src/bootCanvas.ml" 327 8682 8689 "src/bootCanvas.ml" 327 8682 8691
type(
  fill_param option
)
ident(
  int_ref fc "src/bootCanvas.ml" 326 8645 8667 "src/bootCanvas.ml" 326 8645 8669
)
"src/bootCanvas.ml" 327 8682 8692 "src/bootCanvas.ml" 327 8682 8694
type(
  fill_param option
)
ident(
  int_ref sc "src/bootCanvas.ml" 326 8645 8670 "src/bootCanvas.ml" 326 8645 8672
)
"src/bootCanvas.ml" 327 8682 8700 "src/bootCanvas.ml" 327 8682 8702
type(
  unit
)
"src/bootCanvas.ml" 327 8682 8706 "src/bootCanvas.ml" 327 8682 8718
type(
  float * float * float * float -> float -> unit
)
ident(
  int_ref rounded_rect "src/bootCanvas.ml" 310 7989 7993 "src/bootCanvas.ml" 310 7989 8005
)
"src/bootCanvas.ml" 327 8682 8719 "src/bootCanvas.ml" 327 8682 8723
type(
  float * float * float * float
)
ident(
  int_ref rect "src/bootCanvas.ml" 326 8645 8673 "src/bootCanvas.ml" 326 8645 8677
)
"src/bootCanvas.ml" 327 8682 8724 "src/bootCanvas.ml" 327 8682 8725
type(
  float
)
ident(
  int_ref r "src/bootCanvas.ml" 326 8645 8678 "src/bootCanvas.ml" 326 8645 8679
)
"src/bootCanvas.ml" 327 8682 8706 "src/bootCanvas.ml" 327 8682 8725
type(
  unit
)
"src/bootCanvas.ml" 327 8682 8700 "src/bootCanvas.ml" 327 8682 8725
type(
  unit -> unit
)
"src/bootCanvas.ml" 327 8682 8696 "src/bootCanvas.ml" 327 8682 8725
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 327 8682 8695 "src/bootCanvas.ml" 327 8682 8726
type(
  (unit -> unit) list
)
"src/bootCanvas.ml" 327 8682 8684 "src/bootCanvas.ml" 327 8682 8726
type(
  unit
)
"src/bootCanvas.ml" 326 8645 8678 "src/bootCanvas.ml" 327 8682 8726
type(
  float -> unit
)
"src/bootCanvas.ml" 326 8645 8673 "src/bootCanvas.ml" 327 8682 8726
type(
  float * float * float * float -> float -> unit
)
"src/bootCanvas.ml" 326 8645 8670 "src/bootCanvas.ml" 327 8682 8726
type(
  fill_param option -> float * float * float * float -> float -> unit
)
"src/bootCanvas.ml" 326 8645 8667 "src/bootCanvas.ml" 327 8682 8726
type(
  fill_param option ->
  fill_param option -> float * float * float * float -> float -> unit
)
"src/bootCanvas.ml" 330 8729 8733 "src/bootCanvas.ml" 330 8729 8738
type(
  ?id:'_a option -> ?path:'_b option -> onload:'_c -> unit -> '_d
)
ident(
  def image "src/bootCanvas.ml" 346 9181 9181 "src/bootCanvas.ml" 1 0 -1
)
"src/bootCanvas.ml" 330 8729 8744 "src/bootCanvas.ml" 330 8729 8748
type(
  '_a option
)
type(
  '_a option
)
ident(
  int_ref *sth* "src/bootCanvas.ml" 330 8729 8744 "src/bootCanvas.ml" 330 8729 8748
)
type(
  '_a option option
)
type(
  '_a option option
)
type(
  '_a option
)
"src/bootCanvas.ml" 330 8729 8739 "src/bootCanvas.ml" 330 8729 8749
type(
  '_a option
)
"src/bootCanvas.ml" 330 8729 8757 "src/bootCanvas.ml" 330 8729 8761
type(
  '_b option
)
type(
  '_b option
)
ident(
  int_ref *sth* "src/bootCanvas.ml" 330 8729 8757 "src/bootCanvas.ml" 330 8729 8761
)
type(
  '_b option option
)
type(
  '_b option option
)
type(
  '_b option
)
"src/bootCanvas.ml" 330 8729 8750 "src/bootCanvas.ml" 330 8729 8762
type(
  '_b option
)
"src/bootCanvas.ml" 330 8729 8771 "src/bootCanvas.ml" 330 8729 8773
type(
  unit
)
"src/bootCanvas.ml" 331 8776 8782 "src/bootCanvas.ml" 331 8776 8785
type(
  '_e
)
ident(
  def img "src/bootCanvas.ml" 336 8880 8882 "src/bootCanvas.ml" 342 9155 9163
)
"src/bootCanvas.ml" 332 8788 8792 "src/bootCanvas.ml" 332 8788 8810
type(
  Dom_html.document Js.t -> Dom_html.imageElement Js.t
)
ident(
  ext_ref Dom_html.createImg
)
"src/bootCanvas.ml" 332 8788 8811 "src/bootCanvas.ml" 332 8788 8828
type(
  Dom_html.document Js.t
)
ident(
  ext_ref Dom_html.document
)
"src/bootCanvas.ml" 332 8788 8792 "src/bootCanvas.ml" 332 8788 8828
type(
  Dom_html.imageElement Js.t
)
"src/bootCanvas.ml" 333 8829 8833 "src/bootCanvas.ml" 333 8829 8835
type(
  Dom_html.imageElement Js.t ->
  (Dom_html.imageElement Js.t -> Dom_html.imageElement Js.t Js.opt) ->
  Dom_html.imageElement Js.t Js.opt
)
ident(
  ext_ref Pervasives.( |> )
)
"src/bootCanvas.ml" 333 8829 8836 "src/bootCanvas.ml" 333 8829 8857
type(
  Dom_html.imageElement Js.t -> Dom_html.imageElement Js.t Js.opt
)
ident(
  ext_ref Dom_html.CoerceTo.img
)
"src/bootCanvas.ml" 332 8788 8792 "src/bootCanvas.ml" 333 8829 8857
type(
  Dom_html.imageElement Js.t Js.opt
)
"src/bootCanvas.ml" 334 8858 8862 "src/bootCanvas.ml" 334 8858 8864
type(
  Dom_html.imageElement Js.t Js.opt ->
  (Dom_html.imageElement Js.t Js.opt -> '_f) -> '_f
)
ident(
  ext_ref Pervasives.( |> )
)
"src/bootCanvas.ml" 330 8729 8763 "src/bootCanvas.ml" 342 9155 9163
type(
  '_c
)
ident(
  def onload "src/bootCanvas.ml" 330 8729 8771 "src/bootCanvas.ml" 342 9155 9163
)
"src/bootCanvas.ml" 330 8729 8750 "src/bootCanvas.ml" 342 9155 9163
type(
  '_b option
)
type(
  '_b option option
)
ident(
  int_ref *opt* "src/bootCanvas.ml" 330 8729 8750 "src/bootCanvas.ml" 342 9155 9163
)
type(
  '_b option option
)
"src/bootCanvas.ml" 330 8729 8739 "src/bootCanvas.ml" 342 9155 9163
type(
  '_a option
)
type(
  '_a option option
)
ident(
  int_ref *opt* "src/bootCanvas.ml" 330 8729 8739 "src/bootCanvas.ml" 342 9155 9163
)
type(
  '_a option option
)
